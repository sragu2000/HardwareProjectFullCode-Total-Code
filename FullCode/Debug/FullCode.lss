
FullCode.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001d6c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000146  00800060  00001d6c  00001e00  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000011e  008001a6  008001a6  00001f46  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001f46  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001fa4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000170  00000000  00000000  00001fe0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000022c6  00000000  00000000  00002150  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000873  00000000  00000000  00004416  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001157  00000000  00000000  00004c89  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000420  00000000  00000000  00005de0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000766  00000000  00000000  00006200  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001879  00000000  00000000  00006966  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000168  00000000  00000000  000081df  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 c5 00 	jmp	0x18a	; 0x18a <__ctors_end>
       4:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>
       8:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>
       c:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>
      10:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>
      14:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>
      18:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>
      1c:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>
      20:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>
      24:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>
      28:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>
      2c:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>
      30:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>
      34:	0c 94 51 03 	jmp	0x6a2	; 0x6a2 <__vector_13>
      38:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>
      3c:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>
      40:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>
      44:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>
      48:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>
      4c:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>
      50:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__bad_interrupt>

00000054 <__trampolines_end>:
      54:	4e 41       	sbci	r20, 0x1E	; 30
      56:	4e 49       	Address 0x00000056 is out of bounds.
.word	0xffff	; ????

00000057 <pstr_inity>:
      57:	49 4e 49 54 59                                      INITY

0000005c <pstr_inf>:
      5c:	49 4e 46                                            INF

0000005f <pwr_m10>:
      5f:	cd cc cc 3d 0a d7 23 3c 17 b7 d1 38 77 cc 2b 32     ...=..#<...8w.+2
      6f:	95 95 e6 24 1f b1 4f 0a                             ...$..O.

00000077 <pwr_p10>:
      77:	00 00 20 41 00 00 c8 42 00 40 1c 46 20 bc be 4c     .. A...B.@.F ..L
      87:	ca 1b 0e 5a ae c5 9d 74 00 40 7a 10 f3 5a 00 a0     ...Z...t.@z..Z..
      97:	72 4e 18 09 00 10 a5 d4 e8 00 00 e8 76 48 17 00     rN..........vH..
      a7:	00 e4 0b 54 02 00 00 ca 9a 3b 00 00 00 e1 f5 05     ...T.....;......
      b7:	00 00 80 96 98 00 00 00 40 42 0f 00 00 00 a0 86     ........@B......
      c7:	01 00 00 00 10 27 00 00 00 00 e8 03 00 00 00 00     .....'..........
      d7:	64 00 00 00 00 00 0a 00 00 00 00 00 01 00 00 00     d...............
      e7:	00 00 2c 76 d8 88 dc 67 4f 08 23 df c1 df ae 59     ..,v...gO.#....Y
      f7:	e1 b1 b7 96 e5 e3 e4 53 c6 3a e6 51 99 76 96 e8     .......S.:.Q.v..
     107:	e6 c2 84 26 eb 89 8c 9b 62 ed 40 7c 6f fc ef bc     ...&....b.@|o...
     117:	9c 9f 40 f2 ba a5 6f a5 f4 90 05 5a 2a f7 5c 93     ..@...o....Z*.\.
     127:	6b 6c f9 67 6d c1 1b fc e0 e4 0d 47 fe f5 20 e6     kl.gm......G.. .
     137:	b5 00 d0 ed 90 2e 03 00 94 35 77 05 00 80 84 1e     .........5w.....
     147:	08 00 00 20 4e 0a 00 00 00 c8 0c 33 33 33 33 0f     ... N......3333.
     157:	98 6e 12 83 11 41 ef 8d 21 14 89 3b e6 55 16 cf     .n...A..!..;.U..
     167:	fe e6 db 18 d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb     ......K8..|.....
     177:	e4 24 20 32 84 72 5e 22 81 00 c9 f1 24 ec a1 e5     .$ 2.r^"....$...
     187:	3d 27 00                                            ='.

0000018a <__ctors_end>:
     18a:	11 24       	eor	r1, r1
     18c:	1f be       	out	0x3f, r1	; 63
     18e:	cf e5       	ldi	r28, 0x5F	; 95
     190:	d8 e0       	ldi	r29, 0x08	; 8
     192:	de bf       	out	0x3e, r29	; 62
     194:	cd bf       	out	0x3d, r28	; 61

00000196 <__do_copy_data>:
     196:	11 e0       	ldi	r17, 0x01	; 1
     198:	a0 e6       	ldi	r26, 0x60	; 96
     19a:	b0 e0       	ldi	r27, 0x00	; 0
     19c:	ec e6       	ldi	r30, 0x6C	; 108
     19e:	fd e1       	ldi	r31, 0x1D	; 29
     1a0:	02 c0       	rjmp	.+4      	; 0x1a6 <__do_copy_data+0x10>
     1a2:	05 90       	lpm	r0, Z+
     1a4:	0d 92       	st	X+, r0
     1a6:	a6 3a       	cpi	r26, 0xA6	; 166
     1a8:	b1 07       	cpc	r27, r17
     1aa:	d9 f7       	brne	.-10     	; 0x1a2 <__do_copy_data+0xc>

000001ac <__do_clear_bss>:
     1ac:	22 e0       	ldi	r18, 0x02	; 2
     1ae:	a6 ea       	ldi	r26, 0xA6	; 166
     1b0:	b1 e0       	ldi	r27, 0x01	; 1
     1b2:	01 c0       	rjmp	.+2      	; 0x1b6 <.do_clear_bss_start>

000001b4 <.do_clear_bss_loop>:
     1b4:	1d 92       	st	X+, r1

000001b6 <.do_clear_bss_start>:
     1b6:	a4 3c       	cpi	r26, 0xC4	; 196
     1b8:	b2 07       	cpc	r27, r18
     1ba:	e1 f7       	brne	.-8      	; 0x1b4 <.do_clear_bss_loop>
     1bc:	0e 94 df 06 	call	0xdbe	; 0xdbe <main>
     1c0:	0c 94 b4 0e 	jmp	0x1d68	; 0x1d68 <_exit>

000001c4 <__bad_interrupt>:
     1c4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001c8 <I2C_Init>:
	return 1;												/* If yes then return 1 to indicate ack received i.e. ready to accept data byte */
	if (status == 0x20)										/* Check weather SLA+W transmitted & nack received or not? */
	return 2;												/* If yes then return 2 to indicate nack received i.e. device is busy */
	else
	return 3;												/* Else return 3 to indicate SLA+W failed */
}
     1c8:	11 b8       	out	0x01, r1	; 1
     1ca:	80 e2       	ldi	r24, 0x20	; 32
     1cc:	80 b9       	out	0x00, r24	; 0
     1ce:	08 95       	ret

000001d0 <I2C_Repeated_Start>:

uint8_t I2C_Repeated_Start(char slave_read_address)			/* I2C repeated start function */
{
	uint8_t status;											/* Declare variable */
	TWCR = (1<<TWSTA)|(1<<TWEN)|(1<<TWINT);					/* Enable TWI, generate start condition and clear interrupt flag */
     1d0:	94 ea       	ldi	r25, 0xA4	; 164
     1d2:	96 bf       	out	0x36, r25	; 54
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (start condition) */
     1d4:	06 b6       	in	r0, 0x36	; 54
     1d6:	07 fe       	sbrs	r0, 7
     1d8:	fd cf       	rjmp	.-6      	; 0x1d4 <I2C_Repeated_Start+0x4>
	status = TWSR & 0xF8;									/* Read TWI status register with masking lower three bits */
     1da:	91 b1       	in	r25, 0x01	; 1
     1dc:	98 7f       	andi	r25, 0xF8	; 248
	if (status != 0x10)										/* Check weather repeated start condition transmitted successfully or not? */
     1de:	90 31       	cpi	r25, 0x10	; 16
     1e0:	71 f4       	brne	.+28     	; 0x1fe <I2C_Repeated_Start+0x2e>
	return 0;												/* If no then return 0 to indicate repeated start condition fail */
	TWDR = slave_read_address;								/* If yes then write SLA+R in TWI data register */
     1e2:	83 b9       	out	0x03, r24	; 3
	TWCR = (1<<TWEN)|(1<<TWINT);							/* Enable TWI and clear interrupt flag */
     1e4:	84 e8       	ldi	r24, 0x84	; 132
     1e6:	86 bf       	out	0x36, r24	; 54
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (Write operation) */
     1e8:	06 b6       	in	r0, 0x36	; 54
     1ea:	07 fe       	sbrs	r0, 7
     1ec:	fd cf       	rjmp	.-6      	; 0x1e8 <I2C_Repeated_Start+0x18>
	status = TWSR & 0xF8;									/* Read TWI status register with masking lower three bits */
     1ee:	81 b1       	in	r24, 0x01	; 1
     1f0:	88 7f       	andi	r24, 0xF8	; 248
	if (status == 0x40)										/* Check weather SLA+R transmitted & ack received or not? */
     1f2:	80 34       	cpi	r24, 0x40	; 64
     1f4:	31 f0       	breq	.+12     	; 0x202 <I2C_Repeated_Start+0x32>
	return 1;												/* If yes then return 1 to indicate ack received */ 
	if (status == 0x20)										/* Check weather SLA+R transmitted & nack received or not? */
     1f6:	80 32       	cpi	r24, 0x20	; 32
     1f8:	31 f4       	brne	.+12     	; 0x206 <I2C_Repeated_Start+0x36>
	return 2;												/* If yes then return 2 to indicate nack received i.e. device is busy */
     1fa:	82 e0       	ldi	r24, 0x02	; 2
     1fc:	08 95       	ret
	uint8_t status;											/* Declare variable */
	TWCR = (1<<TWSTA)|(1<<TWEN)|(1<<TWINT);					/* Enable TWI, generate start condition and clear interrupt flag */
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (start condition) */
	status = TWSR & 0xF8;									/* Read TWI status register with masking lower three bits */
	if (status != 0x10)										/* Check weather repeated start condition transmitted successfully or not? */
	return 0;												/* If no then return 0 to indicate repeated start condition fail */
     1fe:	80 e0       	ldi	r24, 0x00	; 0
     200:	08 95       	ret
	TWDR = slave_read_address;								/* If yes then write SLA+R in TWI data register */
	TWCR = (1<<TWEN)|(1<<TWINT);							/* Enable TWI and clear interrupt flag */
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (Write operation) */
	status = TWSR & 0xF8;									/* Read TWI status register with masking lower three bits */
	if (status == 0x40)										/* Check weather SLA+R transmitted & ack received or not? */
	return 1;												/* If yes then return 1 to indicate ack received */ 
     202:	81 e0       	ldi	r24, 0x01	; 1
     204:	08 95       	ret
	if (status == 0x20)										/* Check weather SLA+R transmitted & nack received or not? */
	return 2;												/* If yes then return 2 to indicate nack received i.e. device is busy */
	else
	return 3;												/* Else return 3 to indicate SLA+W failed */
     206:	83 e0       	ldi	r24, 0x03	; 3
}
     208:	08 95       	ret

0000020a <I2C_Stop>:

void I2C_Stop()												/* I2C stop function */
{
	TWCR=(1<<TWSTO)|(1<<TWINT)|(1<<TWEN);					/* Enable TWI, generate stop condition and clear interrupt flag */
     20a:	84 e9       	ldi	r24, 0x94	; 148
     20c:	86 bf       	out	0x36, r24	; 54
	while(TWCR & (1<<TWSTO));								/* Wait until stop condition execution */ 
     20e:	06 b6       	in	r0, 0x36	; 54
     210:	04 fc       	sbrc	r0, 4
     212:	fd cf       	rjmp	.-6      	; 0x20e <I2C_Stop+0x4>
}
     214:	08 95       	ret

00000216 <I2C_Start_Wait>:

void I2C_Start_Wait(char slave_write_address)				/* I2C start wait function */
{
     216:	cf 93       	push	r28
     218:	c8 2f       	mov	r28, r24
	uint8_t status;											/* Declare variable */
	while (1)
	{
		TWCR = (1<<TWSTA)|(1<<TWEN)|(1<<TWINT);				/* Enable TWI, generate start condition and clear interrupt flag */
     21a:	84 ea       	ldi	r24, 0xA4	; 164
     21c:	86 bf       	out	0x36, r24	; 54
		while (!(TWCR & (1<<TWINT)));						/* Wait until TWI finish its current job (start condition) */
     21e:	06 b6       	in	r0, 0x36	; 54
     220:	07 fe       	sbrs	r0, 7
     222:	fd cf       	rjmp	.-6      	; 0x21e <I2C_Start_Wait+0x8>
		status = TWSR & 0xF8;								/* Read TWI status register with masking lower three bits */
     224:	81 b1       	in	r24, 0x01	; 1
     226:	88 7f       	andi	r24, 0xF8	; 248
		if (status != 0x08)									/* Check weather start condition transmitted successfully or not? */
     228:	88 30       	cpi	r24, 0x08	; 8
     22a:	b9 f7       	brne	.-18     	; 0x21a <I2C_Start_Wait+0x4>
		continue;											/* If no then continue with start loop again */
		TWDR = slave_write_address;							/* If yes then write SLA+W in TWI data register */
     22c:	c3 b9       	out	0x03, r28	; 3
		TWCR = (1<<TWEN)|(1<<TWINT);						/* Enable TWI and clear interrupt flag */
     22e:	84 e8       	ldi	r24, 0x84	; 132
     230:	86 bf       	out	0x36, r24	; 54
		while (!(TWCR & (1<<TWINT)));						/* Wait until TWI finish its current job (Write operation) */
     232:	06 b6       	in	r0, 0x36	; 54
     234:	07 fe       	sbrs	r0, 7
     236:	fd cf       	rjmp	.-6      	; 0x232 <I2C_Start_Wait+0x1c>
		status = TWSR & 0xF8;								/* Read TWI status register with masking lower three bits */
     238:	81 b1       	in	r24, 0x01	; 1
     23a:	88 7f       	andi	r24, 0xF8	; 248
		if (status != 0x18 )								/* Check weather SLA+W transmitted & ack received or not? */
     23c:	88 31       	cpi	r24, 0x18	; 24
     23e:	19 f0       	breq	.+6      	; 0x246 <I2C_Start_Wait+0x30>
		{
			I2C_Stop();										/* If not then generate stop condition */
     240:	0e 94 05 01 	call	0x20a	; 0x20a <I2C_Stop>
			continue;										/* continue with start loop again */
     244:	ea cf       	rjmp	.-44     	; 0x21a <I2C_Start_Wait+0x4>
		}
		break;												/* If yes then break loop */
	}
}
     246:	cf 91       	pop	r28
     248:	08 95       	ret

0000024a <I2C_Write>:

uint8_t I2C_Write(char data)								/* I2C write function */
{
	uint8_t status;											/* Declare variable */
	TWDR = data;											/* Copy data in TWI data register */
     24a:	83 b9       	out	0x03, r24	; 3
	TWCR = (1<<TWEN)|(1<<TWINT);							/* Enable TWI and clear interrupt flag */
     24c:	84 e8       	ldi	r24, 0x84	; 132
     24e:	86 bf       	out	0x36, r24	; 54
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (Write operation) */
     250:	06 b6       	in	r0, 0x36	; 54
     252:	07 fe       	sbrs	r0, 7
     254:	fd cf       	rjmp	.-6      	; 0x250 <I2C_Write+0x6>
	status = TWSR & 0xF8;									/* Read TWI status register with masking lower three bits */
     256:	81 b1       	in	r24, 0x01	; 1
     258:	88 7f       	andi	r24, 0xF8	; 248
	if (status == 0x28)										/* Check weather data transmitted & ack received or not? */
     25a:	88 32       	cpi	r24, 0x28	; 40
     25c:	21 f0       	breq	.+8      	; 0x266 <I2C_Write+0x1c>
	return 0;												/* If yes then return 0 to indicate ack received */
	if (status == 0x30)										/* Check weather data transmitted & nack received or not? */
     25e:	80 33       	cpi	r24, 0x30	; 48
     260:	21 f4       	brne	.+8      	; 0x26a <I2C_Write+0x20>
	return 1;												/* If yes then return 1 to indicate nack received */
     262:	81 e0       	ldi	r24, 0x01	; 1
     264:	08 95       	ret
	TWDR = data;											/* Copy data in TWI data register */
	TWCR = (1<<TWEN)|(1<<TWINT);							/* Enable TWI and clear interrupt flag */
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (Write operation) */
	status = TWSR & 0xF8;									/* Read TWI status register with masking lower three bits */
	if (status == 0x28)										/* Check weather data transmitted & ack received or not? */
	return 0;												/* If yes then return 0 to indicate ack received */
     266:	80 e0       	ldi	r24, 0x00	; 0
     268:	08 95       	ret
	if (status == 0x30)										/* Check weather data transmitted & nack received or not? */
	return 1;												/* If yes then return 1 to indicate nack received */
	else
	return 2;												/* Else return 2 to indicate data transmission failed */
     26a:	82 e0       	ldi	r24, 0x02	; 2
}
     26c:	08 95       	ret

0000026e <I2C_Read_Ack>:

char I2C_Read_Ack()										/* I2C read ack function */
{
	TWCR=(1<<TWEN)|(1<<TWINT)|(1<<TWEA);					/* Enable TWI, generation of ack and clear interrupt flag */
     26e:	84 ec       	ldi	r24, 0xC4	; 196
     270:	86 bf       	out	0x36, r24	; 54
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (read operation) */
     272:	06 b6       	in	r0, 0x36	; 54
     274:	07 fe       	sbrs	r0, 7
     276:	fd cf       	rjmp	.-6      	; 0x272 <I2C_Read_Ack+0x4>
	return TWDR;											/* Return received data */
     278:	83 b1       	in	r24, 0x03	; 3
}	
     27a:	08 95       	ret

0000027c <I2C_Read_Nack>:

char I2C_Read_Nack()										/* I2C read nack function */
{
	TWCR=(1<<TWEN)|(1<<TWINT);								/* Enable TWI and clear interrupt flag */
     27c:	84 e8       	ldi	r24, 0x84	; 132
     27e:	86 bf       	out	0x36, r24	; 54
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (read operation) */
     280:	06 b6       	in	r0, 0x36	; 54
     282:	07 fe       	sbrs	r0, 7
     284:	fd cf       	rjmp	.-6      	; 0x280 <I2C_Read_Nack+0x4>
	return TWDR;											/* Return received data */
     286:	83 b1       	in	r24, 0x03	; 3
}	
     288:	08 95       	ret

0000028a <LCD_Command>:
	while (str[i]!='\0')		/* Send string till null */
	{
		USART_TxChar(str[i]);
		i++;
	}
     28a:	98 b3       	in	r25, 0x18	; 24
     28c:	9f 70       	andi	r25, 0x0F	; 15
     28e:	28 2f       	mov	r18, r24
     290:	20 7f       	andi	r18, 0xF0	; 240
     292:	92 2b       	or	r25, r18
     294:	98 bb       	out	0x18, r25	; 24
     296:	98 b3       	in	r25, 0x18	; 24
     298:	9e 7f       	andi	r25, 0xFE	; 254
     29a:	98 bb       	out	0x18, r25	; 24
     29c:	98 b3       	in	r25, 0x18	; 24
     29e:	92 60       	ori	r25, 0x02	; 2
     2a0:	98 bb       	out	0x18, r25	; 24
     2a2:	32 e0       	ldi	r19, 0x02	; 2
     2a4:	3a 95       	dec	r19
     2a6:	f1 f7       	brne	.-4      	; 0x2a4 <LCD_Command+0x1a>
     2a8:	00 c0       	rjmp	.+0      	; 0x2aa <LCD_Command+0x20>
     2aa:	98 b3       	in	r25, 0x18	; 24
     2ac:	9d 7f       	andi	r25, 0xFD	; 253
     2ae:	98 bb       	out	0x18, r25	; 24
     2b0:	ef e8       	ldi	r30, 0x8F	; 143
     2b2:	f1 e0       	ldi	r31, 0x01	; 1
     2b4:	31 97       	sbiw	r30, 0x01	; 1
     2b6:	f1 f7       	brne	.-4      	; 0x2b4 <LCD_Command+0x2a>
     2b8:	00 c0       	rjmp	.+0      	; 0x2ba <LCD_Command+0x30>
     2ba:	00 00       	nop
     2bc:	28 b3       	in	r18, 0x18	; 24
     2be:	f0 e1       	ldi	r31, 0x10	; 16
     2c0:	8f 9f       	mul	r24, r31
     2c2:	c0 01       	movw	r24, r0
     2c4:	11 24       	eor	r1, r1
     2c6:	92 2f       	mov	r25, r18
     2c8:	9f 70       	andi	r25, 0x0F	; 15
     2ca:	89 2b       	or	r24, r25
     2cc:	88 bb       	out	0x18, r24	; 24
     2ce:	88 b3       	in	r24, 0x18	; 24
     2d0:	82 60       	ori	r24, 0x02	; 2
     2d2:	88 bb       	out	0x18, r24	; 24
     2d4:	32 e0       	ldi	r19, 0x02	; 2
     2d6:	3a 95       	dec	r19
     2d8:	f1 f7       	brne	.-4      	; 0x2d6 <LCD_Command+0x4c>
     2da:	00 c0       	rjmp	.+0      	; 0x2dc <LCD_Command+0x52>
     2dc:	88 b3       	in	r24, 0x18	; 24
     2de:	8d 7f       	andi	r24, 0xFD	; 253
     2e0:	88 bb       	out	0x18, r24	; 24
     2e2:	8f e9       	ldi	r24, 0x9F	; 159
     2e4:	9f e0       	ldi	r25, 0x0F	; 15
     2e6:	01 97       	sbiw	r24, 0x01	; 1
     2e8:	f1 f7       	brne	.-4      	; 0x2e6 <LCD_Command+0x5c>
     2ea:	00 c0       	rjmp	.+0      	; 0x2ec <LCD_Command+0x62>
     2ec:	00 00       	nop
     2ee:	08 95       	ret

000002f0 <LCD_Char>:
     2f0:	98 b3       	in	r25, 0x18	; 24
     2f2:	9f 70       	andi	r25, 0x0F	; 15
     2f4:	28 2f       	mov	r18, r24
     2f6:	20 7f       	andi	r18, 0xF0	; 240
     2f8:	92 2b       	or	r25, r18
     2fa:	98 bb       	out	0x18, r25	; 24
     2fc:	98 b3       	in	r25, 0x18	; 24
     2fe:	91 60       	ori	r25, 0x01	; 1
     300:	98 bb       	out	0x18, r25	; 24
     302:	98 b3       	in	r25, 0x18	; 24
     304:	92 60       	ori	r25, 0x02	; 2
     306:	98 bb       	out	0x18, r25	; 24
     308:	32 e0       	ldi	r19, 0x02	; 2
     30a:	3a 95       	dec	r19
     30c:	f1 f7       	brne	.-4      	; 0x30a <LCD_Char+0x1a>
     30e:	00 c0       	rjmp	.+0      	; 0x310 <LCD_Char+0x20>
     310:	98 b3       	in	r25, 0x18	; 24
     312:	9d 7f       	andi	r25, 0xFD	; 253
     314:	98 bb       	out	0x18, r25	; 24
     316:	ef e8       	ldi	r30, 0x8F	; 143
     318:	f1 e0       	ldi	r31, 0x01	; 1
     31a:	31 97       	sbiw	r30, 0x01	; 1
     31c:	f1 f7       	brne	.-4      	; 0x31a <LCD_Char+0x2a>
     31e:	00 c0       	rjmp	.+0      	; 0x320 <LCD_Char+0x30>
     320:	00 00       	nop
     322:	28 b3       	in	r18, 0x18	; 24
     324:	f0 e1       	ldi	r31, 0x10	; 16
     326:	8f 9f       	mul	r24, r31
     328:	c0 01       	movw	r24, r0
     32a:	11 24       	eor	r1, r1
     32c:	92 2f       	mov	r25, r18
     32e:	9f 70       	andi	r25, 0x0F	; 15
     330:	89 2b       	or	r24, r25
     332:	88 bb       	out	0x18, r24	; 24
     334:	88 b3       	in	r24, 0x18	; 24
     336:	82 60       	ori	r24, 0x02	; 2
     338:	88 bb       	out	0x18, r24	; 24
     33a:	32 e0       	ldi	r19, 0x02	; 2
     33c:	3a 95       	dec	r19
     33e:	f1 f7       	brne	.-4      	; 0x33c <LCD_Char+0x4c>
     340:	00 c0       	rjmp	.+0      	; 0x342 <LCD_Char+0x52>
     342:	88 b3       	in	r24, 0x18	; 24
     344:	8d 7f       	andi	r24, 0xFD	; 253
     346:	88 bb       	out	0x18, r24	; 24
     348:	8f e9       	ldi	r24, 0x9F	; 159
     34a:	9f e0       	ldi	r25, 0x0F	; 15
     34c:	01 97       	sbiw	r24, 0x01	; 1
     34e:	f1 f7       	brne	.-4      	; 0x34c <LCD_Char+0x5c>
     350:	00 c0       	rjmp	.+0      	; 0x352 <LCD_Char+0x62>
     352:	00 00       	nop
     354:	08 95       	ret

00000356 <LCD_Init>:
     356:	8f ef       	ldi	r24, 0xFF	; 255
     358:	87 bb       	out	0x17, r24	; 23
     35a:	8f e3       	ldi	r24, 0x3F	; 63
     35c:	9c e9       	ldi	r25, 0x9C	; 156
     35e:	01 97       	sbiw	r24, 0x01	; 1
     360:	f1 f7       	brne	.-4      	; 0x35e <LCD_Init+0x8>
     362:	00 c0       	rjmp	.+0      	; 0x364 <LCD_Init+0xe>
     364:	00 00       	nop
     366:	83 e3       	ldi	r24, 0x33	; 51
     368:	0e 94 45 01 	call	0x28a	; 0x28a <LCD_Command>
     36c:	82 e3       	ldi	r24, 0x32	; 50
     36e:	0e 94 45 01 	call	0x28a	; 0x28a <LCD_Command>
     372:	88 e2       	ldi	r24, 0x28	; 40
     374:	0e 94 45 01 	call	0x28a	; 0x28a <LCD_Command>
     378:	8c e0       	ldi	r24, 0x0C	; 12
     37a:	0e 94 45 01 	call	0x28a	; 0x28a <LCD_Command>
     37e:	86 e0       	ldi	r24, 0x06	; 6
     380:	0e 94 45 01 	call	0x28a	; 0x28a <LCD_Command>
     384:	81 e0       	ldi	r24, 0x01	; 1
     386:	0e 94 45 01 	call	0x28a	; 0x28a <LCD_Command>
     38a:	8f e9       	ldi	r24, 0x9F	; 159
     38c:	9f e0       	ldi	r25, 0x0F	; 15
     38e:	01 97       	sbiw	r24, 0x01	; 1
     390:	f1 f7       	brne	.-4      	; 0x38e <LCD_Init+0x38>
     392:	00 c0       	rjmp	.+0      	; 0x394 <LCD_Init+0x3e>
     394:	00 00       	nop
     396:	80 e8       	ldi	r24, 0x80	; 128
     398:	0e 94 45 01 	call	0x28a	; 0x28a <LCD_Command>
     39c:	08 95       	ret

0000039e <LCD_String>:
     39e:	0f 93       	push	r16
     3a0:	1f 93       	push	r17
     3a2:	cf 93       	push	r28
     3a4:	df 93       	push	r29
     3a6:	8c 01       	movw	r16, r24
     3a8:	c0 e0       	ldi	r28, 0x00	; 0
     3aa:	d0 e0       	ldi	r29, 0x00	; 0
     3ac:	03 c0       	rjmp	.+6      	; 0x3b4 <LCD_String+0x16>
     3ae:	0e 94 78 01 	call	0x2f0	; 0x2f0 <LCD_Char>
     3b2:	21 96       	adiw	r28, 0x01	; 1
     3b4:	f8 01       	movw	r30, r16
     3b6:	ec 0f       	add	r30, r28
     3b8:	fd 1f       	adc	r31, r29
     3ba:	80 81       	ld	r24, Z
     3bc:	81 11       	cpse	r24, r1
     3be:	f7 cf       	rjmp	.-18     	; 0x3ae <LCD_String+0x10>
     3c0:	df 91       	pop	r29
     3c2:	cf 91       	pop	r28
     3c4:	1f 91       	pop	r17
     3c6:	0f 91       	pop	r16
     3c8:	08 95       	ret

000003ca <LCD_String_xy>:
     3ca:	cf 93       	push	r28
     3cc:	df 93       	push	r29
     3ce:	ea 01       	movw	r28, r20
     3d0:	81 11       	cpse	r24, r1
     3d2:	08 c0       	rjmp	.+16     	; 0x3e4 <LCD_String_xy+0x1a>
     3d4:	60 31       	cpi	r22, 0x10	; 16
     3d6:	30 f4       	brcc	.+12     	; 0x3e4 <LCD_String_xy+0x1a>
     3d8:	86 2f       	mov	r24, r22
     3da:	8f 70       	andi	r24, 0x0F	; 15
     3dc:	80 68       	ori	r24, 0x80	; 128
     3de:	0e 94 45 01 	call	0x28a	; 0x28a <LCD_Command>
     3e2:	09 c0       	rjmp	.+18     	; 0x3f6 <LCD_String_xy+0x2c>
     3e4:	81 30       	cpi	r24, 0x01	; 1
     3e6:	39 f4       	brne	.+14     	; 0x3f6 <LCD_String_xy+0x2c>
     3e8:	60 31       	cpi	r22, 0x10	; 16
     3ea:	28 f4       	brcc	.+10     	; 0x3f6 <LCD_String_xy+0x2c>
     3ec:	86 2f       	mov	r24, r22
     3ee:	8f 70       	andi	r24, 0x0F	; 15
     3f0:	80 6c       	ori	r24, 0xC0	; 192
     3f2:	0e 94 45 01 	call	0x28a	; 0x28a <LCD_Command>
     3f6:	ce 01       	movw	r24, r28
     3f8:	0e 94 cf 01 	call	0x39e	; 0x39e <LCD_String>
     3fc:	df 91       	pop	r29
     3fe:	cf 91       	pop	r28
     400:	08 95       	ret

00000402 <LCD_Clear>:
     402:	81 e0       	ldi	r24, 0x01	; 1
     404:	0e 94 45 01 	call	0x28a	; 0x28a <LCD_Command>
     408:	8f e9       	ldi	r24, 0x9F	; 159
     40a:	9f e0       	ldi	r25, 0x0F	; 15
     40c:	01 97       	sbiw	r24, 0x01	; 1
     40e:	f1 f7       	brne	.-4      	; 0x40c <LCD_Clear+0xa>
     410:	00 c0       	rjmp	.+0      	; 0x412 <LCD_Clear+0x10>
     412:	00 00       	nop
     414:	80 e8       	ldi	r24, 0x80	; 128
     416:	0e 94 45 01 	call	0x28a	; 0x28a <LCD_Command>
     41a:	08 95       	ret

0000041c <USART_Init>:
     41c:	2a b1       	in	r18, 0x0a	; 10
     41e:	28 69       	ori	r18, 0x98	; 152
     420:	2a b9       	out	0x0a, r18	; 10
     422:	20 b5       	in	r18, 0x20	; 32
     424:	26 68       	ori	r18, 0x86	; 134
     426:	20 bd       	out	0x20, r18	; 32
     428:	dc 01       	movw	r26, r24
     42a:	cb 01       	movw	r24, r22
     42c:	88 0f       	add	r24, r24
     42e:	99 1f       	adc	r25, r25
     430:	aa 1f       	adc	r26, r26
     432:	bb 1f       	adc	r27, r27
     434:	88 0f       	add	r24, r24
     436:	99 1f       	adc	r25, r25
     438:	aa 1f       	adc	r26, r26
     43a:	bb 1f       	adc	r27, r27
     43c:	9c 01       	movw	r18, r24
     43e:	ad 01       	movw	r20, r26
     440:	22 0f       	add	r18, r18
     442:	33 1f       	adc	r19, r19
     444:	44 1f       	adc	r20, r20
     446:	55 1f       	adc	r21, r21
     448:	22 0f       	add	r18, r18
     44a:	33 1f       	adc	r19, r19
     44c:	44 1f       	adc	r20, r20
     44e:	55 1f       	adc	r21, r21
     450:	60 e0       	ldi	r22, 0x00	; 0
     452:	72 e1       	ldi	r23, 0x12	; 18
     454:	8a e7       	ldi	r24, 0x7A	; 122
     456:	90 e0       	ldi	r25, 0x00	; 0
     458:	0e 94 6e 0a 	call	0x14dc	; 0x14dc <__udivmodsi4>
     45c:	8f ef       	ldi	r24, 0xFF	; 255
     45e:	82 0f       	add	r24, r18
     460:	89 b9       	out	0x09, r24	; 9
     462:	da 01       	movw	r26, r20
     464:	c9 01       	movw	r24, r18
     466:	01 97       	sbiw	r24, 0x01	; 1
     468:	a1 09       	sbc	r26, r1
     46a:	b1 09       	sbc	r27, r1
     46c:	89 2f       	mov	r24, r25
     46e:	9a 2f       	mov	r25, r26
     470:	ab 2f       	mov	r26, r27
     472:	bb 27       	eor	r27, r27
     474:	80 bd       	out	0x20, r24	; 32
     476:	08 95       	ret

00000478 <USART_TxChar>:
     478:	5d 9b       	sbis	0x0b, 5	; 11
     47a:	fe cf       	rjmp	.-4      	; 0x478 <USART_TxChar>
     47c:	8c b9       	out	0x0c, r24	; 12
     47e:	08 95       	ret

00000480 <ADC_Init>:
void ADC_Init()
{
	DDRA=0x00;			/* Make ADC port as input */
     480:	1a ba       	out	0x1a, r1	; 26
	ADCSRA = 0x87;			/* Enable ADC, fr/128  */
     482:	87 e8       	ldi	r24, 0x87	; 135
     484:	86 b9       	out	0x06, r24	; 6
	ADMUX = 0x40;			/* Vref: Avcc, ADC channel: 0 */
     486:	80 e4       	ldi	r24, 0x40	; 64
     488:	87 b9       	out	0x07, r24	; 7
     48a:	08 95       	ret

0000048c <ADC_Read>:

int ADC_Read(char channel)
{
	int Ain,AinLow;
	
	ADMUX=ADMUX|(channel & 0x0f);	/* Set input channel to read */
     48c:	97 b1       	in	r25, 0x07	; 7
     48e:	8f 70       	andi	r24, 0x0F	; 15
     490:	98 2b       	or	r25, r24
     492:	97 b9       	out	0x07, r25	; 7

	ADCSRA |= (1<<ADSC);		/* Start conversion */
     494:	86 b1       	in	r24, 0x06	; 6
     496:	80 64       	ori	r24, 0x40	; 64
     498:	86 b9       	out	0x06, r24	; 6
	while((ADCSRA&(1<<ADIF))==0);	/* Monitor end of conversion interrupt */
     49a:	34 9b       	sbis	0x06, 4	; 6
     49c:	fe cf       	rjmp	.-4      	; 0x49a <ADC_Read+0xe>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     49e:	8a e1       	ldi	r24, 0x1A	; 26
     4a0:	8a 95       	dec	r24
     4a2:	f1 f7       	brne	.-4      	; 0x4a0 <ADC_Read+0x14>
     4a4:	00 c0       	rjmp	.+0      	; 0x4a6 <ADC_Read+0x1a>
	
	_delay_us(10);
	AinLow = (int)ADCL;		/* Read lower byte*/
     4a6:	24 b1       	in	r18, 0x04	; 4
	Ain = (int)ADCH*256;		/* Read higher 2 bits and Multiply with weight */
     4a8:	85 b1       	in	r24, 0x05	; 5
     4aa:	90 e0       	ldi	r25, 0x00	; 0
     4ac:	98 2f       	mov	r25, r24
     4ae:	88 27       	eor	r24, r24
	Ain = Ain + AinLow;				
	return(Ain);			/* Return digital value*/
}
     4b0:	82 0f       	add	r24, r18
     4b2:	91 1d       	adc	r25, r1
     4b4:	08 95       	ret

000004b6 <get_altitude>:
	sei(); //It is a macro that executes an assembler instruction to enable interrupts.

}

void get_altitude(uint16_t alt_pointer){  //unsigned 16-bit integer - integers between 0 and 65,535
	cli(); //Command Line Interface - CLIs accept as input commands that are entered by keyboard
     4b6:	f8 94       	cli
	uint8_t alt_index;  //unsigned 8-bit integer- integer has a range of 0 to 255
	uint8_t index = alt_pointer+1;
     4b8:	8f 5f       	subi	r24, 0xFF	; 255
	alt_index=0;
     4ba:	90 e0       	ldi	r25, 0x00	; 0
	/* parse Altitude in GGA string stored in buffer */
	for( ; GGA_Buffer[index]!=','; index++){
     4bc:	07 c0       	rjmp	.+14     	; 0x4cc <get_altitude+0x16>
		Altitude_Buffer[alt_index]= GGA_Buffer[index];
     4be:	e9 2f       	mov	r30, r25
     4c0:	f0 e0       	ldi	r31, 0x00	; 0
     4c2:	e6 54       	subi	r30, 0x46	; 70
     4c4:	fd 4f       	sbci	r31, 0xFD	; 253
     4c6:	20 83       	st	Z, r18
		alt_index++;
     4c8:	9f 5f       	subi	r25, 0xFF	; 255
	cli(); //Command Line Interface - CLIs accept as input commands that are entered by keyboard
	uint8_t alt_index;  //unsigned 8-bit integer- integer has a range of 0 to 255
	uint8_t index = alt_pointer+1;
	alt_index=0;
	/* parse Altitude in GGA string stored in buffer */
	for( ; GGA_Buffer[index]!=','; index++){
     4ca:	8f 5f       	subi	r24, 0xFF	; 255
     4cc:	48 2f       	mov	r20, r24
     4ce:	50 e0       	ldi	r21, 0x00	; 0
     4d0:	fa 01       	movw	r30, r20
     4d2:	e5 55       	subi	r30, 0x55	; 85
     4d4:	fe 4f       	sbci	r31, 0xFE	; 254
     4d6:	20 81       	ld	r18, Z
     4d8:	2c 32       	cpi	r18, 0x2C	; 44
     4da:	89 f7       	brne	.-30     	; 0x4be <get_altitude+0x8>
		Altitude_Buffer[alt_index]= GGA_Buffer[index];
		alt_index++;
	}
	
	Altitude_Buffer[alt_index]   = GGA_Buffer[index+1];
     4dc:	e9 2f       	mov	r30, r25
     4de:	f0 e0       	ldi	r31, 0x00	; 0
     4e0:	da 01       	movw	r26, r20
     4e2:	a4 55       	subi	r26, 0x54	; 84
     4e4:	be 4f       	sbci	r27, 0xFE	; 254
     4e6:	8c 91       	ld	r24, X
     4e8:	e6 54       	subi	r30, 0x46	; 70
     4ea:	fd 4f       	sbci	r31, 0xFD	; 253
     4ec:	80 83       	st	Z, r24
	sei();//It is a macro that executes an assembler instruction to enable interrupts.
     4ee:	78 94       	sei
     4f0:	08 95       	ret

000004f2 <convert_to_degrees_lat>:
}


void convert_to_degrees_lat(char *raw){
     4f2:	8f 92       	push	r8
     4f4:	9f 92       	push	r9
     4f6:	af 92       	push	r10
     4f8:	bf 92       	push	r11
     4fa:	cf 92       	push	r12
     4fc:	df 92       	push	r13
     4fe:	ef 92       	push	r14
     500:	ff 92       	push	r15
     502:	0f 93       	push	r16
     504:	1f 93       	push	r17
	float decimal_value,temp;
	
	int32_t degrees;
	
	float position;
	value = atof(raw); /* convert string into float for conversion */
     506:	0e 94 b0 0a 	call	0x1560	; 0x1560 <atof>
	
	/* convert raw latitude/longitude into degree format */
	decimal_value = (value/100);
     50a:	20 e0       	ldi	r18, 0x00	; 0
     50c:	30 e0       	ldi	r19, 0x00	; 0
     50e:	48 ec       	ldi	r20, 0xC8	; 200
     510:	52 e4       	ldi	r21, 0x42	; 66
     512:	0e 94 a2 08 	call	0x1144	; 0x1144 <__divsf3>
     516:	6b 01       	movw	r12, r22
     518:	7c 01       	movw	r14, r24
	degrees = (int)(decimal_value);
     51a:	0e 94 14 09 	call	0x1228	; 0x1228 <__fixsfsi>
	temp = (decimal_value - (int)decimal_value)/0.6;
     51e:	07 2e       	mov	r0, r23
     520:	00 0c       	add	r0, r0
     522:	88 0b       	sbc	r24, r24
     524:	99 0b       	sbc	r25, r25
     526:	0e 94 4c 09 	call	0x1298	; 0x1298 <__floatsisf>
     52a:	4b 01       	movw	r8, r22
     52c:	5c 01       	movw	r10, r24
     52e:	9b 01       	movw	r18, r22
     530:	ac 01       	movw	r20, r24
     532:	c7 01       	movw	r24, r14
     534:	b6 01       	movw	r22, r12
     536:	0e 94 30 08 	call	0x1060	; 0x1060 <__subsf3>
     53a:	2a e9       	ldi	r18, 0x9A	; 154
     53c:	39 e9       	ldi	r19, 0x99	; 153
     53e:	49 e1       	ldi	r20, 0x19	; 25
     540:	5f e3       	ldi	r21, 0x3F	; 63
     542:	0e 94 a2 08 	call	0x1144	; 0x1144 <__divsf3>
     546:	9b 01       	movw	r18, r22
     548:	ac 01       	movw	r20, r24
	position = (float)degrees + temp;
     54a:	c5 01       	movw	r24, r10
     54c:	b4 01       	movw	r22, r8
     54e:	0e 94 31 08 	call	0x1062	; 0x1062 <__addsf3>
	
	dtostrf(position, 6, 4, lat_degrees_buffer); /* dtostrf is a function that convert float value into string.Here the position is a float value and it convert as a string degree buffer variable*/
     552:	06 ea       	ldi	r16, 0xA6	; 166
     554:	12 e0       	ldi	r17, 0x02	; 2
     556:	24 e0       	ldi	r18, 0x04	; 4
     558:	46 e0       	ldi	r20, 0x06	; 6
     55a:	0e 94 90 0a 	call	0x1520	; 0x1520 <dtostrf>
}
     55e:	1f 91       	pop	r17
     560:	0f 91       	pop	r16
     562:	ff 90       	pop	r15
     564:	ef 90       	pop	r14
     566:	df 90       	pop	r13
     568:	cf 90       	pop	r12
     56a:	bf 90       	pop	r11
     56c:	af 90       	pop	r10
     56e:	9f 90       	pop	r9
     570:	8f 90       	pop	r8
     572:	08 95       	ret

00000574 <get_latitude>:




void get_latitude(uint16_t lat_pointer){  //unsigned 16-bit integer - integers between 0 and 65,535
	cli(); //Command Line Interface - CLIs accept as input commands that are entered by keyboard
     574:	f8 94       	cli
	uint8_t lat_index; //unsigned 8-bit integer- integer has a range of 0 to 255
	uint8_t index = lat_pointer+1;//unsigned 8-bit integer- integer has a range of 0 to 255
     576:	8f 5f       	subi	r24, 0xFF	; 255
	lat_index=0;
     578:	90 e0       	ldi	r25, 0x00	; 0
	
	/* parse Latitude in GGA string stored in buffer */
	for(;GGA_Buffer[index]!=',';index++){
     57a:	07 c0       	rjmp	.+14     	; 0x58a <get_latitude+0x16>
		Latitude_Buffer[lat_index]= GGA_Buffer[index];
     57c:	e9 2f       	mov	r30, r25
     57e:	f0 e0       	ldi	r31, 0x00	; 0
     580:	e1 58       	subi	r30, 0x81	; 129
     582:	fd 4f       	sbci	r31, 0xFD	; 253
     584:	20 83       	st	Z, r18
		lat_index++;
     586:	9f 5f       	subi	r25, 0xFF	; 255
	uint8_t lat_index; //unsigned 8-bit integer- integer has a range of 0 to 255
	uint8_t index = lat_pointer+1;//unsigned 8-bit integer- integer has a range of 0 to 255
	lat_index=0;
	
	/* parse Latitude in GGA string stored in buffer */
	for(;GGA_Buffer[index]!=',';index++){
     588:	8f 5f       	subi	r24, 0xFF	; 255
     58a:	e8 2f       	mov	r30, r24
     58c:	f0 e0       	ldi	r31, 0x00	; 0
     58e:	e5 55       	subi	r30, 0x55	; 85
     590:	fe 4f       	sbci	r31, 0xFE	; 254
     592:	20 81       	ld	r18, Z
     594:	2c 32       	cpi	r18, 0x2C	; 44
     596:	91 f7       	brne	.-28     	; 0x57c <get_latitude+0x8>
		Latitude_Buffer[lat_index]= GGA_Buffer[index];
		lat_index++;
	}
	
	Latitude_Buffer[lat_index++] = GGA_Buffer[index++];
     598:	31 e0       	ldi	r19, 0x01	; 1
     59a:	39 0f       	add	r19, r25
     59c:	e9 2f       	mov	r30, r25
     59e:	f0 e0       	ldi	r31, 0x00	; 0
     5a0:	8f 5f       	subi	r24, 0xFF	; 255
     5a2:	e1 58       	subi	r30, 0x81	; 129
     5a4:	fd 4f       	sbci	r31, 0xFD	; 253
     5a6:	20 83       	st	Z, r18
	Latitude_Buffer[lat_index]= GGA_Buffer[index];		/* get direction */
     5a8:	23 2f       	mov	r18, r19
     5aa:	30 e0       	ldi	r19, 0x00	; 0
     5ac:	e8 2f       	mov	r30, r24
     5ae:	f0 e0       	ldi	r31, 0x00	; 0
     5b0:	e5 55       	subi	r30, 0x55	; 85
     5b2:	fe 4f       	sbci	r31, 0xFE	; 254
     5b4:	80 81       	ld	r24, Z
     5b6:	f9 01       	movw	r30, r18
     5b8:	e1 58       	subi	r30, 0x81	; 129
     5ba:	fd 4f       	sbci	r31, 0xFD	; 253
     5bc:	80 83       	st	Z, r24
	convert_to_degrees_lat(Latitude_Buffer);   // convert raw latitude into degree format and pass that value as string
     5be:	8f e7       	ldi	r24, 0x7F	; 127
     5c0:	92 e0       	ldi	r25, 0x02	; 2
     5c2:	0e 94 79 02 	call	0x4f2	; 0x4f2 <convert_to_degrees_lat>
	sei(); //It is a macro that executes an assembler instruction to enable interrupts.
     5c6:	78 94       	sei
     5c8:	08 95       	ret

000005ca <convert_to_degrees_long>:
	position = (float)degrees + temp;
	
	dtostrf(position, 6, 4, lat_degrees_buffer); /* dtostrf is a function that convert float value into string.Here the position is a float value and it convert as a string degree buffer variable*/
}

void convert_to_degrees_long(char *raw){
     5ca:	8f 92       	push	r8
     5cc:	9f 92       	push	r9
     5ce:	af 92       	push	r10
     5d0:	bf 92       	push	r11
     5d2:	cf 92       	push	r12
     5d4:	df 92       	push	r13
     5d6:	ef 92       	push	r14
     5d8:	ff 92       	push	r15
     5da:	0f 93       	push	r16
     5dc:	1f 93       	push	r17
	float decimal_value,temp;
	
	int32_t degrees;
	
	float position;
	value = atof(raw); /* convert string into float for conversion */
     5de:	0e 94 b0 0a 	call	0x1560	; 0x1560 <atof>
	
	/* convert raw latitude/longitude into degree format */
	decimal_value = (value/100);
     5e2:	20 e0       	ldi	r18, 0x00	; 0
     5e4:	30 e0       	ldi	r19, 0x00	; 0
     5e6:	48 ec       	ldi	r20, 0xC8	; 200
     5e8:	52 e4       	ldi	r21, 0x42	; 66
     5ea:	0e 94 a2 08 	call	0x1144	; 0x1144 <__divsf3>
     5ee:	6b 01       	movw	r12, r22
     5f0:	7c 01       	movw	r14, r24
	degrees = (int)(decimal_value);
     5f2:	0e 94 14 09 	call	0x1228	; 0x1228 <__fixsfsi>
	temp = (decimal_value - (int)decimal_value)/0.6;
     5f6:	07 2e       	mov	r0, r23
     5f8:	00 0c       	add	r0, r0
     5fa:	88 0b       	sbc	r24, r24
     5fc:	99 0b       	sbc	r25, r25
     5fe:	0e 94 4c 09 	call	0x1298	; 0x1298 <__floatsisf>
     602:	4b 01       	movw	r8, r22
     604:	5c 01       	movw	r10, r24
     606:	9b 01       	movw	r18, r22
     608:	ac 01       	movw	r20, r24
     60a:	c7 01       	movw	r24, r14
     60c:	b6 01       	movw	r22, r12
     60e:	0e 94 30 08 	call	0x1060	; 0x1060 <__subsf3>
     612:	2a e9       	ldi	r18, 0x9A	; 154
     614:	39 e9       	ldi	r19, 0x99	; 153
     616:	49 e1       	ldi	r20, 0x19	; 25
     618:	5f e3       	ldi	r21, 0x3F	; 63
     61a:	0e 94 a2 08 	call	0x1144	; 0x1144 <__divsf3>
     61e:	9b 01       	movw	r18, r22
     620:	ac 01       	movw	r20, r24
	position = (float)degrees + temp;
     622:	c5 01       	movw	r24, r10
     624:	b4 01       	movw	r22, r8
     626:	0e 94 31 08 	call	0x1062	; 0x1062 <__addsf3>
	
	dtostrf(position, 6, 4, long_degrees_buffer); /* dtostrf is a function that convert float value into string.Here the position is a float value and it convert as a string degree buffer variable*/
     62a:	0d e4       	ldi	r16, 0x4D	; 77
     62c:	12 e0       	ldi	r17, 0x02	; 2
     62e:	24 e0       	ldi	r18, 0x04	; 4
     630:	46 e0       	ldi	r20, 0x06	; 6
     632:	0e 94 90 0a 	call	0x1520	; 0x1520 <dtostrf>
}
     636:	1f 91       	pop	r17
     638:	0f 91       	pop	r16
     63a:	ff 90       	pop	r15
     63c:	ef 90       	pop	r14
     63e:	df 90       	pop	r13
     640:	cf 90       	pop	r12
     642:	bf 90       	pop	r11
     644:	af 90       	pop	r10
     646:	9f 90       	pop	r9
     648:	8f 90       	pop	r8
     64a:	08 95       	ret

0000064c <get_longitude>:
	convert_to_degrees_lat(Latitude_Buffer);   // convert raw latitude into degree format and pass that value as string
	sei(); //It is a macro that executes an assembler instruction to enable interrupts.
}

void get_longitude(uint16_t long_pointer){
	cli(); //Command Line Interface - CLIs accept as input commands that are entered by keyboard
     64c:	f8 94       	cli
	uint8_t long_index;  //unsigned 8-bit integer- integer has a range of 0 to 255
	uint8_t index = long_pointer+1;
     64e:	8f 5f       	subi	r24, 0xFF	; 255
	long_index=0;
     650:	90 e0       	ldi	r25, 0x00	; 0
	
	/* parse Longitude in GGA string stored in buffer */
	for( ; GGA_Buffer[index]!=','; index++){
     652:	07 c0       	rjmp	.+14     	; 0x662 <get_longitude+0x16>
		Longitude_Buffer[long_index]= GGA_Buffer[index];
     654:	e9 2f       	mov	r30, r25
     656:	f0 e0       	ldi	r31, 0x00	; 0
     658:	ef 59       	subi	r30, 0x9F	; 159
     65a:	fd 4f       	sbci	r31, 0xFD	; 253
     65c:	20 83       	st	Z, r18
		long_index++;
     65e:	9f 5f       	subi	r25, 0xFF	; 255
	uint8_t long_index;  //unsigned 8-bit integer- integer has a range of 0 to 255
	uint8_t index = long_pointer+1;
	long_index=0;
	
	/* parse Longitude in GGA string stored in buffer */
	for( ; GGA_Buffer[index]!=','; index++){
     660:	8f 5f       	subi	r24, 0xFF	; 255
     662:	e8 2f       	mov	r30, r24
     664:	f0 e0       	ldi	r31, 0x00	; 0
     666:	e5 55       	subi	r30, 0x55	; 85
     668:	fe 4f       	sbci	r31, 0xFE	; 254
     66a:	20 81       	ld	r18, Z
     66c:	2c 32       	cpi	r18, 0x2C	; 44
     66e:	91 f7       	brne	.-28     	; 0x654 <get_longitude+0x8>
		Longitude_Buffer[long_index]= GGA_Buffer[index];
		long_index++;
	}
	
	Longitude_Buffer[long_index++] = GGA_Buffer[index++];
     670:	31 e0       	ldi	r19, 0x01	; 1
     672:	39 0f       	add	r19, r25
     674:	e9 2f       	mov	r30, r25
     676:	f0 e0       	ldi	r31, 0x00	; 0
     678:	8f 5f       	subi	r24, 0xFF	; 255
     67a:	ef 59       	subi	r30, 0x9F	; 159
     67c:	fd 4f       	sbci	r31, 0xFD	; 253
     67e:	20 83       	st	Z, r18
	Longitude_Buffer[long_index]   = GGA_Buffer[index]; /* get direction */
     680:	23 2f       	mov	r18, r19
     682:	30 e0       	ldi	r19, 0x00	; 0
     684:	e8 2f       	mov	r30, r24
     686:	f0 e0       	ldi	r31, 0x00	; 0
     688:	e5 55       	subi	r30, 0x55	; 85
     68a:	fe 4f       	sbci	r31, 0xFE	; 254
     68c:	80 81       	ld	r24, Z
     68e:	f9 01       	movw	r30, r18
     690:	ef 59       	subi	r30, 0x9F	; 159
     692:	fd 4f       	sbci	r31, 0xFD	; 253
     694:	80 83       	st	Z, r24
	convert_to_degrees_long(Longitude_Buffer); // convert raw longitude into degree format and pass that value as string
     696:	81 e6       	ldi	r24, 0x61	; 97
     698:	92 e0       	ldi	r25, 0x02	; 2
     69a:	0e 94 e5 02 	call	0x5ca	; 0x5ca <convert_to_degrees_long>
	sei(); //It is a macro that executes an assembler instruction to enable interrupts.
     69e:	78 94       	sei
     6a0:	08 95       	ret

000006a2 <__vector_13>:
	
	dtostrf(position, 6, 4, long_degrees_buffer); /* dtostrf is a function that convert float value into string.Here the position is a float value and it convert as a string degree buffer variable*/
}

ISR (USART_RXC_vect)
{
     6a2:	1f 92       	push	r1
     6a4:	0f 92       	push	r0
     6a6:	0f b6       	in	r0, 0x3f	; 63
     6a8:	0f 92       	push	r0
     6aa:	11 24       	eor	r1, r1
     6ac:	2f 93       	push	r18
     6ae:	3f 93       	push	r19
     6b0:	4f 93       	push	r20
     6b2:	5f 93       	push	r21
     6b4:	8f 93       	push	r24
     6b6:	9f 93       	push	r25
     6b8:	ef 93       	push	r30
     6ba:	ff 93       	push	r31
	uint8_t oldsrg = SREG;  //unsigned 8-bit integer- integer has a range of 0 to 255
     6bc:	9f b7       	in	r25, 0x3f	; 63
	cli();					//Command Line Interface - CLIs accept as input commands that are entered by keyboard
     6be:	f8 94       	cli
	char received_char = UDR;
     6c0:	8c b1       	in	r24, 0x0c	; 12
	
	if(received_char =='$'){                                                    /* check for '$' */
     6c2:	84 32       	cpi	r24, 0x24	; 36
     6c4:	59 f4       	brne	.+22     	; 0x6dc <__vector_13+0x3a>
		GGA_Index = 0;
     6c6:	10 92 7b 02 	sts	0x027B, r1	; 0x80027b <GGA_Index+0x1>
     6ca:	10 92 7a 02 	sts	0x027A, r1	; 0x80027a <GGA_Index>
		CommaCounter = 0;
     6ce:	10 92 79 02 	sts	0x0279, r1	; 0x800279 <CommaCounter+0x1>
     6d2:	10 92 78 02 	sts	0x0278, r1	; 0x800278 <CommaCounter>
		IsItGGAString = false;
     6d6:	10 92 a6 01 	sts	0x01A6, r1	; 0x8001a6 <__data_end>
     6da:	45 c0       	rjmp	.+138    	; 0x766 <__vector_13+0xc4>
	}
	else if(IsItGGAString == true){                                             /* if true save GGA info. into buffer */
     6dc:	20 91 a6 01 	lds	r18, 0x01A6	; 0x8001a6 <__data_end>
     6e0:	22 23       	and	r18, r18
     6e2:	29 f1       	breq	.+74     	; 0x72e <__vector_13+0x8c>
		if(received_char == ',' ) GGA_Pointers[CommaCounter++] = GGA_Index;     /* store instances of ',' in buffer */
     6e4:	8c 32       	cpi	r24, 0x2C	; 44
     6e6:	99 f4       	brne	.+38     	; 0x70e <__vector_13+0x6c>
     6e8:	20 91 78 02 	lds	r18, 0x0278	; 0x800278 <CommaCounter>
     6ec:	30 91 79 02 	lds	r19, 0x0279	; 0x800279 <CommaCounter+0x1>
     6f0:	a9 01       	movw	r20, r18
     6f2:	4f 5f       	subi	r20, 0xFF	; 255
     6f4:	5f 4f       	sbci	r21, 0xFF	; 255
     6f6:	50 93 79 02 	sts	0x0279, r21	; 0x800279 <CommaCounter+0x1>
     6fa:	40 93 78 02 	sts	0x0278, r20	; 0x800278 <CommaCounter>
     6fe:	40 91 7a 02 	lds	r20, 0x027A	; 0x80027a <GGA_Index>
     702:	50 91 7b 02 	lds	r21, 0x027B	; 0x80027b <GGA_Index+0x1>
     706:	f9 01       	movw	r30, r18
     708:	ee 56       	subi	r30, 0x6E	; 110
     70a:	fd 4f       	sbci	r31, 0xFD	; 253
     70c:	40 83       	st	Z, r20
		GGA_Buffer[GGA_Index++] = received_char;
     70e:	20 91 7a 02 	lds	r18, 0x027A	; 0x80027a <GGA_Index>
     712:	30 91 7b 02 	lds	r19, 0x027B	; 0x80027b <GGA_Index+0x1>
     716:	a9 01       	movw	r20, r18
     718:	4f 5f       	subi	r20, 0xFF	; 255
     71a:	5f 4f       	sbci	r21, 0xFF	; 255
     71c:	50 93 7b 02 	sts	0x027B, r21	; 0x80027b <GGA_Index+0x1>
     720:	40 93 7a 02 	sts	0x027A, r20	; 0x80027a <GGA_Index>
     724:	f9 01       	movw	r30, r18
     726:	e5 55       	subi	r30, 0x55	; 85
     728:	fe 4f       	sbci	r31, 0xFE	; 254
     72a:	80 83       	st	Z, r24
     72c:	1c c0       	rjmp	.+56     	; 0x766 <__vector_13+0xc4>
	}
	else if(GGA_CODE[0] == 'G' && GGA_CODE[1] == 'G' && GGA_CODE[2] == 'A'){    /* check for GGA string */
     72e:	20 91 7c 02 	lds	r18, 0x027C	; 0x80027c <GGA_CODE>
     732:	27 34       	cpi	r18, 0x47	; 71
     734:	89 f4       	brne	.+34     	; 0x758 <__vector_13+0xb6>
     736:	20 91 7d 02 	lds	r18, 0x027D	; 0x80027d <GGA_CODE+0x1>
     73a:	27 34       	cpi	r18, 0x47	; 71
     73c:	69 f4       	brne	.+26     	; 0x758 <__vector_13+0xb6>
     73e:	20 91 7e 02 	lds	r18, 0x027E	; 0x80027e <GGA_CODE+0x2>
     742:	21 34       	cpi	r18, 0x41	; 65
     744:	49 f4       	brne	.+18     	; 0x758 <__vector_13+0xb6>
		IsItGGAString = true;
     746:	81 e0       	ldi	r24, 0x01	; 1
     748:	80 93 a6 01 	sts	0x01A6, r24	; 0x8001a6 <__data_end>
		GGA_CODE[0] = 0; GGA_CODE[1] = 0; GGA_CODE[2] = 0;
     74c:	ec e7       	ldi	r30, 0x7C	; 124
     74e:	f2 e0       	ldi	r31, 0x02	; 2
     750:	10 82       	st	Z, r1
     752:	11 82       	std	Z+1, r1	; 0x01
     754:	12 82       	std	Z+2, r1	; 0x02
     756:	07 c0       	rjmp	.+14     	; 0x766 <__vector_13+0xc4>
	}
	else{
		GGA_CODE[0] = GGA_CODE[1];  GGA_CODE[1] = GGA_CODE[2]; GGA_CODE[2] = received_char;
     758:	ec e7       	ldi	r30, 0x7C	; 124
     75a:	f2 e0       	ldi	r31, 0x02	; 2
     75c:	21 81       	ldd	r18, Z+1	; 0x01
     75e:	20 83       	st	Z, r18
     760:	22 81       	ldd	r18, Z+2	; 0x02
     762:	21 83       	std	Z+1, r18	; 0x01
     764:	82 83       	std	Z+2, r24	; 0x02
	}
	SREG = oldsrg;
     766:	9f bf       	out	0x3f, r25	; 63
}
     768:	ff 91       	pop	r31
     76a:	ef 91       	pop	r30
     76c:	9f 91       	pop	r25
     76e:	8f 91       	pop	r24
     770:	5f 91       	pop	r21
     772:	4f 91       	pop	r20
     774:	3f 91       	pop	r19
     776:	2f 91       	pop	r18
     778:	0f 90       	pop	r0
     77a:	0f be       	out	0x3f, r0	; 63
     77c:	0f 90       	pop	r0
     77e:	1f 90       	pop	r1
     780:	18 95       	reti

00000782 <MPU6050_Init>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     782:	2f e7       	ldi	r18, 0x7F	; 127
     784:	89 ea       	ldi	r24, 0xA9	; 169
     786:	93 e0       	ldi	r25, 0x03	; 3
     788:	21 50       	subi	r18, 0x01	; 1
     78a:	80 40       	sbci	r24, 0x00	; 0
     78c:	90 40       	sbci	r25, 0x00	; 0
     78e:	e1 f7       	brne	.-8      	; 0x788 <MPU6050_Init+0x6>
     790:	00 c0       	rjmp	.+0      	; 0x792 <MPU6050_Init+0x10>
     792:	00 00       	nop
float Acc_x,Acc_y,Acc_z,Temperature,Gyro_x,Gyro_y,Gyro_z;
void MPU6050_Init()										/* Gyro initialization function */
{
	_delay_ms(150);										/* Power up time >100ms */
	I2C_Start_Wait(0xD0);								/* Start with device write address */
     794:	80 ed       	ldi	r24, 0xD0	; 208
     796:	0e 94 0b 01 	call	0x216	; 0x216 <I2C_Start_Wait>
	I2C_Write(SMPLRT_DIV);								/* Write to sample rate register */
     79a:	89 e1       	ldi	r24, 0x19	; 25
     79c:	0e 94 25 01 	call	0x24a	; 0x24a <I2C_Write>
	I2C_Write(0x07);									/* 1KHz sample rate */
     7a0:	87 e0       	ldi	r24, 0x07	; 7
     7a2:	0e 94 25 01 	call	0x24a	; 0x24a <I2C_Write>
	I2C_Stop();
     7a6:	0e 94 05 01 	call	0x20a	; 0x20a <I2C_Stop>

	I2C_Start_Wait(0xD0);
     7aa:	80 ed       	ldi	r24, 0xD0	; 208
     7ac:	0e 94 0b 01 	call	0x216	; 0x216 <I2C_Start_Wait>
	I2C_Write(PWR_MGMT_1);								/* Write to power management register */
     7b0:	8b e6       	ldi	r24, 0x6B	; 107
     7b2:	0e 94 25 01 	call	0x24a	; 0x24a <I2C_Write>
	I2C_Write(0x01);									/* X axis gyroscope reference frequency */
     7b6:	81 e0       	ldi	r24, 0x01	; 1
     7b8:	0e 94 25 01 	call	0x24a	; 0x24a <I2C_Write>
	I2C_Stop();
     7bc:	0e 94 05 01 	call	0x20a	; 0x20a <I2C_Stop>

	I2C_Start_Wait(0xD0);
     7c0:	80 ed       	ldi	r24, 0xD0	; 208
     7c2:	0e 94 0b 01 	call	0x216	; 0x216 <I2C_Start_Wait>
	I2C_Write(CONFIG);									/* Write to Configuration register */
     7c6:	8a e1       	ldi	r24, 0x1A	; 26
     7c8:	0e 94 25 01 	call	0x24a	; 0x24a <I2C_Write>
	I2C_Write(0x00);									/* Fs = 8KHz */
     7cc:	80 e0       	ldi	r24, 0x00	; 0
     7ce:	0e 94 25 01 	call	0x24a	; 0x24a <I2C_Write>
	I2C_Stop();
     7d2:	0e 94 05 01 	call	0x20a	; 0x20a <I2C_Stop>

	I2C_Start_Wait(0xD0);
     7d6:	80 ed       	ldi	r24, 0xD0	; 208
     7d8:	0e 94 0b 01 	call	0x216	; 0x216 <I2C_Start_Wait>
	I2C_Write(GYRO_CONFIG);								/* Write to Gyro configuration register */
     7dc:	8b e1       	ldi	r24, 0x1B	; 27
     7de:	0e 94 25 01 	call	0x24a	; 0x24a <I2C_Write>
	I2C_Write(0x18);									/* Full scale range +/- 2000 degree/C */
     7e2:	88 e1       	ldi	r24, 0x18	; 24
     7e4:	0e 94 25 01 	call	0x24a	; 0x24a <I2C_Write>
	I2C_Stop();
     7e8:	0e 94 05 01 	call	0x20a	; 0x20a <I2C_Stop>

	I2C_Start_Wait(0xD0);
     7ec:	80 ed       	ldi	r24, 0xD0	; 208
     7ee:	0e 94 0b 01 	call	0x216	; 0x216 <I2C_Start_Wait>
	I2C_Write(INT_ENABLE);								/* Write to interrupt enable register */
     7f2:	88 e3       	ldi	r24, 0x38	; 56
     7f4:	0e 94 25 01 	call	0x24a	; 0x24a <I2C_Write>
	I2C_Write(0x01);
     7f8:	81 e0       	ldi	r24, 0x01	; 1
     7fa:	0e 94 25 01 	call	0x24a	; 0x24a <I2C_Write>
	I2C_Stop();
     7fe:	0e 94 05 01 	call	0x20a	; 0x20a <I2C_Stop>
     802:	08 95       	ret

00000804 <MPU_Start_Loc>:
}

void MPU_Start_Loc()
{
	I2C_Start_Wait(0xD0);								/* I2C start with device write address */
     804:	80 ed       	ldi	r24, 0xD0	; 208
     806:	0e 94 0b 01 	call	0x216	; 0x216 <I2C_Start_Wait>
	I2C_Write(ACCEL_XOUT_H);							/* Write start location address from where to read */
     80a:	8b e3       	ldi	r24, 0x3B	; 59
     80c:	0e 94 25 01 	call	0x24a	; 0x24a <I2C_Write>
	I2C_Repeated_Start(0xD1);							/* I2C start with device read address */
     810:	81 ed       	ldi	r24, 0xD1	; 209
     812:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <I2C_Repeated_Start>
     816:	08 95       	ret

00000818 <Read_RawValue>:
}

void Read_RawValue()
{
     818:	cf 93       	push	r28
     81a:	df 93       	push	r29
	MPU_Start_Loc();									/* Read Gyro values */
     81c:	0e 94 02 04 	call	0x804	; 0x804 <MPU_Start_Loc>
	Acc_x = (((int)I2C_Read_Ack()<<8) | (int)I2C_Read_Ack());
     820:	0e 94 37 01 	call	0x26e	; 0x26e <I2C_Read_Ack>
     824:	c8 2f       	mov	r28, r24
     826:	d0 e0       	ldi	r29, 0x00	; 0
     828:	dc 2f       	mov	r29, r28
     82a:	cc 27       	eor	r28, r28
     82c:	0e 94 37 01 	call	0x26e	; 0x26e <I2C_Read_Ack>
     830:	be 01       	movw	r22, r28
     832:	68 2b       	or	r22, r24
     834:	07 2e       	mov	r0, r23
     836:	00 0c       	add	r0, r0
     838:	88 0b       	sbc	r24, r24
     83a:	99 0b       	sbc	r25, r25
     83c:	0e 94 4c 09 	call	0x1298	; 0x1298 <__floatsisf>
     840:	60 93 74 02 	sts	0x0274, r22	; 0x800274 <Acc_x>
     844:	70 93 75 02 	sts	0x0275, r23	; 0x800275 <Acc_x+0x1>
     848:	80 93 76 02 	sts	0x0276, r24	; 0x800276 <Acc_x+0x2>
     84c:	90 93 77 02 	sts	0x0277, r25	; 0x800277 <Acc_x+0x3>
	Acc_y = (((int)I2C_Read_Ack()<<8) | (int)I2C_Read_Ack());
     850:	0e 94 37 01 	call	0x26e	; 0x26e <I2C_Read_Ack>
     854:	c8 2f       	mov	r28, r24
     856:	d0 e0       	ldi	r29, 0x00	; 0
     858:	dc 2f       	mov	r29, r28
     85a:	cc 27       	eor	r28, r28
     85c:	0e 94 37 01 	call	0x26e	; 0x26e <I2C_Read_Ack>
     860:	be 01       	movw	r22, r28
     862:	68 2b       	or	r22, r24
     864:	07 2e       	mov	r0, r23
     866:	00 0c       	add	r0, r0
     868:	88 0b       	sbc	r24, r24
     86a:	99 0b       	sbc	r25, r25
     86c:	0e 94 4c 09 	call	0x1298	; 0x1298 <__floatsisf>
     870:	60 93 49 02 	sts	0x0249, r22	; 0x800249 <Acc_y>
     874:	70 93 4a 02 	sts	0x024A, r23	; 0x80024a <Acc_y+0x1>
     878:	80 93 4b 02 	sts	0x024B, r24	; 0x80024b <Acc_y+0x2>
     87c:	90 93 4c 02 	sts	0x024C, r25	; 0x80024c <Acc_y+0x3>
	Acc_z = (((int)I2C_Read_Ack()<<8) | (int)I2C_Read_Ack());
     880:	0e 94 37 01 	call	0x26e	; 0x26e <I2C_Read_Ack>
     884:	c8 2f       	mov	r28, r24
     886:	d0 e0       	ldi	r29, 0x00	; 0
     888:	dc 2f       	mov	r29, r28
     88a:	cc 27       	eor	r28, r28
     88c:	0e 94 37 01 	call	0x26e	; 0x26e <I2C_Read_Ack>
     890:	be 01       	movw	r22, r28
     892:	68 2b       	or	r22, r24
     894:	07 2e       	mov	r0, r23
     896:	00 0c       	add	r0, r0
     898:	88 0b       	sbc	r24, r24
     89a:	99 0b       	sbc	r25, r25
     89c:	0e 94 4c 09 	call	0x1298	; 0x1298 <__floatsisf>
     8a0:	60 93 a7 01 	sts	0x01A7, r22	; 0x8001a7 <Acc_z>
     8a4:	70 93 a8 01 	sts	0x01A8, r23	; 0x8001a8 <Acc_z+0x1>
     8a8:	80 93 a9 01 	sts	0x01A9, r24	; 0x8001a9 <Acc_z+0x2>
     8ac:	90 93 aa 01 	sts	0x01AA, r25	; 0x8001aa <Acc_z+0x3>
	Temperature = (((int)I2C_Read_Ack()<<8) | (int)I2C_Read_Ack());
     8b0:	0e 94 37 01 	call	0x26e	; 0x26e <I2C_Read_Ack>
     8b4:	c8 2f       	mov	r28, r24
     8b6:	d0 e0       	ldi	r29, 0x00	; 0
     8b8:	dc 2f       	mov	r29, r28
     8ba:	cc 27       	eor	r28, r28
     8bc:	0e 94 37 01 	call	0x26e	; 0x26e <I2C_Read_Ack>
     8c0:	be 01       	movw	r22, r28
     8c2:	68 2b       	or	r22, r24
     8c4:	07 2e       	mov	r0, r23
     8c6:	00 0c       	add	r0, r0
     8c8:	88 0b       	sbc	r24, r24
     8ca:	99 0b       	sbc	r25, r25
     8cc:	0e 94 4c 09 	call	0x1298	; 0x1298 <__floatsisf>
     8d0:	60 93 45 02 	sts	0x0245, r22	; 0x800245 <Temperature>
     8d4:	70 93 46 02 	sts	0x0246, r23	; 0x800246 <Temperature+0x1>
     8d8:	80 93 47 02 	sts	0x0247, r24	; 0x800247 <Temperature+0x2>
     8dc:	90 93 48 02 	sts	0x0248, r25	; 0x800248 <Temperature+0x3>
	Gyro_x = (((int)I2C_Read_Ack()<<8) | (int)I2C_Read_Ack());
     8e0:	0e 94 37 01 	call	0x26e	; 0x26e <I2C_Read_Ack>
     8e4:	c8 2f       	mov	r28, r24
     8e6:	d0 e0       	ldi	r29, 0x00	; 0
     8e8:	dc 2f       	mov	r29, r28
     8ea:	cc 27       	eor	r28, r28
     8ec:	0e 94 37 01 	call	0x26e	; 0x26e <I2C_Read_Ack>
     8f0:	be 01       	movw	r22, r28
     8f2:	68 2b       	or	r22, r24
     8f4:	07 2e       	mov	r0, r23
     8f6:	00 0c       	add	r0, r0
     8f8:	88 0b       	sbc	r24, r24
     8fa:	99 0b       	sbc	r25, r25
     8fc:	0e 94 4c 09 	call	0x1298	; 0x1298 <__floatsisf>
     900:	60 93 41 02 	sts	0x0241, r22	; 0x800241 <Gyro_x>
     904:	70 93 42 02 	sts	0x0242, r23	; 0x800242 <Gyro_x+0x1>
     908:	80 93 43 02 	sts	0x0243, r24	; 0x800243 <Gyro_x+0x2>
     90c:	90 93 44 02 	sts	0x0244, r25	; 0x800244 <Gyro_x+0x3>
	Gyro_y = (((int)I2C_Read_Ack()<<8) | (int)I2C_Read_Ack());
     910:	0e 94 37 01 	call	0x26e	; 0x26e <I2C_Read_Ack>
     914:	c8 2f       	mov	r28, r24
     916:	d0 e0       	ldi	r29, 0x00	; 0
     918:	dc 2f       	mov	r29, r28
     91a:	cc 27       	eor	r28, r28
     91c:	0e 94 37 01 	call	0x26e	; 0x26e <I2C_Read_Ack>
     920:	be 01       	movw	r22, r28
     922:	68 2b       	or	r22, r24
     924:	07 2e       	mov	r0, r23
     926:	00 0c       	add	r0, r0
     928:	88 0b       	sbc	r24, r24
     92a:	99 0b       	sbc	r25, r25
     92c:	0e 94 4c 09 	call	0x1298	; 0x1298 <__floatsisf>
     930:	60 93 8e 02 	sts	0x028E, r22	; 0x80028e <Gyro_y>
     934:	70 93 8f 02 	sts	0x028F, r23	; 0x80028f <Gyro_y+0x1>
     938:	80 93 90 02 	sts	0x0290, r24	; 0x800290 <Gyro_y+0x2>
     93c:	90 93 91 02 	sts	0x0291, r25	; 0x800291 <Gyro_y+0x3>
	Gyro_z = (((int)I2C_Read_Ack()<<8) | (int)I2C_Read_Nack());
     940:	0e 94 37 01 	call	0x26e	; 0x26e <I2C_Read_Ack>
     944:	c8 2f       	mov	r28, r24
     946:	d0 e0       	ldi	r29, 0x00	; 0
     948:	dc 2f       	mov	r29, r28
     94a:	cc 27       	eor	r28, r28
     94c:	0e 94 3e 01 	call	0x27c	; 0x27c <I2C_Read_Nack>
     950:	be 01       	movw	r22, r28
     952:	68 2b       	or	r22, r24
     954:	07 2e       	mov	r0, r23
     956:	00 0c       	add	r0, r0
     958:	88 0b       	sbc	r24, r24
     95a:	99 0b       	sbc	r25, r25
     95c:	0e 94 4c 09 	call	0x1298	; 0x1298 <__floatsisf>
     960:	60 93 70 02 	sts	0x0270, r22	; 0x800270 <Gyro_z>
     964:	70 93 71 02 	sts	0x0271, r23	; 0x800271 <Gyro_z+0x1>
     968:	80 93 72 02 	sts	0x0272, r24	; 0x800272 <Gyro_z+0x2>
     96c:	90 93 73 02 	sts	0x0273, r25	; 0x800273 <Gyro_z+0x3>
	I2C_Stop();
     970:	0e 94 05 01 	call	0x20a	; 0x20a <I2C_Stop>
}
     974:	df 91       	pop	r29
     976:	cf 91       	pop	r28
     978:	08 95       	ret

0000097a <isDriverSleepingGyro>:

int isDriverSleepingGyro(float Xa,float Ya,float Za){
     97a:	4f 92       	push	r4
     97c:	5f 92       	push	r5
     97e:	6f 92       	push	r6
     980:	7f 92       	push	r7
     982:	8f 92       	push	r8
     984:	9f 92       	push	r9
     986:	af 92       	push	r10
     988:	bf 92       	push	r11
     98a:	cf 92       	push	r12
     98c:	df 92       	push	r13
     98e:	ef 92       	push	r14
     990:	ff 92       	push	r15
     992:	0f 93       	push	r16
     994:	1f 93       	push	r17
     996:	4b 01       	movw	r8, r22
     998:	5c 01       	movw	r10, r24
     99a:	29 01       	movw	r4, r18
     99c:	3a 01       	movw	r6, r20
     99e:	67 01       	movw	r12, r14
     9a0:	78 01       	movw	r14, r16
	if((Za>-2.0 && Za<2.0) && (Xa>-3.0 && Xa<3.0) && (Ya>=8.0 && Ya<=9.0)){
     9a2:	20 e0       	ldi	r18, 0x00	; 0
     9a4:	30 e0       	ldi	r19, 0x00	; 0
     9a6:	40 e0       	ldi	r20, 0x00	; 0
     9a8:	50 ec       	ldi	r21, 0xC0	; 192
     9aa:	c7 01       	movw	r24, r14
     9ac:	b6 01       	movw	r22, r12
     9ae:	0e 94 fc 09 	call	0x13f8	; 0x13f8 <__gesf2>
     9b2:	18 16       	cp	r1, r24
     9b4:	ac f5       	brge	.+106    	; 0xa20 <isDriverSleepingGyro+0xa6>
     9b6:	20 e0       	ldi	r18, 0x00	; 0
     9b8:	30 e0       	ldi	r19, 0x00	; 0
     9ba:	40 e0       	ldi	r20, 0x00	; 0
     9bc:	50 e4       	ldi	r21, 0x40	; 64
     9be:	c7 01       	movw	r24, r14
     9c0:	b6 01       	movw	r22, r12
     9c2:	0e 94 9d 08 	call	0x113a	; 0x113a <__cmpsf2>
     9c6:	88 23       	and	r24, r24
     9c8:	74 f5       	brge	.+92     	; 0xa26 <isDriverSleepingGyro+0xac>
     9ca:	20 e0       	ldi	r18, 0x00	; 0
     9cc:	30 e0       	ldi	r19, 0x00	; 0
     9ce:	40 e4       	ldi	r20, 0x40	; 64
     9d0:	50 ec       	ldi	r21, 0xC0	; 192
     9d2:	c5 01       	movw	r24, r10
     9d4:	b4 01       	movw	r22, r8
     9d6:	0e 94 fc 09 	call	0x13f8	; 0x13f8 <__gesf2>
     9da:	18 16       	cp	r1, r24
     9dc:	3c f5       	brge	.+78     	; 0xa2c <isDriverSleepingGyro+0xb2>
     9de:	20 e0       	ldi	r18, 0x00	; 0
     9e0:	30 e0       	ldi	r19, 0x00	; 0
     9e2:	40 e4       	ldi	r20, 0x40	; 64
     9e4:	50 e4       	ldi	r21, 0x40	; 64
     9e6:	c5 01       	movw	r24, r10
     9e8:	b4 01       	movw	r22, r8
     9ea:	0e 94 9d 08 	call	0x113a	; 0x113a <__cmpsf2>
     9ee:	88 23       	and	r24, r24
     9f0:	04 f5       	brge	.+64     	; 0xa32 <isDriverSleepingGyro+0xb8>
     9f2:	20 e0       	ldi	r18, 0x00	; 0
     9f4:	30 e0       	ldi	r19, 0x00	; 0
     9f6:	40 e0       	ldi	r20, 0x00	; 0
     9f8:	51 e4       	ldi	r21, 0x41	; 65
     9fa:	c3 01       	movw	r24, r6
     9fc:	b2 01       	movw	r22, r4
     9fe:	0e 94 fc 09 	call	0x13f8	; 0x13f8 <__gesf2>
     a02:	88 23       	and	r24, r24
     a04:	cc f0       	brlt	.+50     	; 0xa38 <isDriverSleepingGyro+0xbe>
     a06:	20 e0       	ldi	r18, 0x00	; 0
     a08:	30 e0       	ldi	r19, 0x00	; 0
     a0a:	40 e1       	ldi	r20, 0x10	; 16
     a0c:	51 e4       	ldi	r21, 0x41	; 65
     a0e:	c3 01       	movw	r24, r6
     a10:	b2 01       	movw	r22, r4
     a12:	0e 94 9d 08 	call	0x113a	; 0x113a <__cmpsf2>
     a16:	18 16       	cp	r1, r24
     a18:	94 f4       	brge	.+36     	; 0xa3e <isDriverSleepingGyro+0xc4>
		return 0;//driver is not sleeping
	}else{
		return 1;//driver is sleeping
     a1a:	81 e0       	ldi	r24, 0x01	; 1
     a1c:	90 e0       	ldi	r25, 0x00	; 0
     a1e:	11 c0       	rjmp	.+34     	; 0xa42 <isDriverSleepingGyro+0xc8>
     a20:	81 e0       	ldi	r24, 0x01	; 1
     a22:	90 e0       	ldi	r25, 0x00	; 0
     a24:	0e c0       	rjmp	.+28     	; 0xa42 <isDriverSleepingGyro+0xc8>
     a26:	81 e0       	ldi	r24, 0x01	; 1
     a28:	90 e0       	ldi	r25, 0x00	; 0
     a2a:	0b c0       	rjmp	.+22     	; 0xa42 <isDriverSleepingGyro+0xc8>
     a2c:	81 e0       	ldi	r24, 0x01	; 1
     a2e:	90 e0       	ldi	r25, 0x00	; 0
     a30:	08 c0       	rjmp	.+16     	; 0xa42 <isDriverSleepingGyro+0xc8>
     a32:	81 e0       	ldi	r24, 0x01	; 1
     a34:	90 e0       	ldi	r25, 0x00	; 0
     a36:	05 c0       	rjmp	.+10     	; 0xa42 <isDriverSleepingGyro+0xc8>
     a38:	81 e0       	ldi	r24, 0x01	; 1
     a3a:	90 e0       	ldi	r25, 0x00	; 0
     a3c:	02 c0       	rjmp	.+4      	; 0xa42 <isDriverSleepingGyro+0xc8>
	I2C_Stop();
}

int isDriverSleepingGyro(float Xa,float Ya,float Za){
	if((Za>-2.0 && Za<2.0) && (Xa>-3.0 && Xa<3.0) && (Ya>=8.0 && Ya<=9.0)){
		return 0;//driver is not sleeping
     a3e:	80 e0       	ldi	r24, 0x00	; 0
     a40:	90 e0       	ldi	r25, 0x00	; 0
	}else{
		return 1;//driver is sleeping
	}
     a42:	1f 91       	pop	r17
     a44:	0f 91       	pop	r16
     a46:	ff 90       	pop	r15
     a48:	ef 90       	pop	r14
     a4a:	df 90       	pop	r13
     a4c:	cf 90       	pop	r12
     a4e:	bf 90       	pop	r11
     a50:	af 90       	pop	r10
     a52:	9f 90       	pop	r9
     a54:	8f 90       	pop	r8
     a56:	7f 90       	pop	r7
     a58:	6f 90       	pop	r6
     a5a:	5f 90       	pop	r5
     a5c:	4f 90       	pop	r4
     a5e:	08 95       	ret

00000a60 <PWM_init>:

//fast pwm mode
void PWM_init(){
	/*set fast PWM mode with non-inverted output*/
	TCCR0 = (1<<WGM00) | (1<<WGM01) | (1<<COM01) | (1<<CS00);
     a60:	89 e6       	ldi	r24, 0x69	; 105
     a62:	83 bf       	out	0x33, r24	; 51
	DDRB|=(1<<PB3);  /*set OC0 pin as output*/
     a64:	87 b3       	in	r24, 0x17	; 23
     a66:	88 60       	ori	r24, 0x08	; 8
     a68:	87 bb       	out	0x17, r24	; 23
     a6a:	08 95       	ret

00000a6c <sendMessage>:

void sendMessage(char* msg,char* lat,char* lngtd,char* altitude){
     a6c:	cf 92       	push	r12
     a6e:	df 92       	push	r13
     a70:	ef 92       	push	r14
     a72:	ff 92       	push	r15
     a74:	0f 93       	push	r16
     a76:	1f 93       	push	r17
     a78:	cf 93       	push	r28
     a7a:	df 93       	push	r29
     a7c:	cd b7       	in	r28, 0x3d	; 61
     a7e:	de b7       	in	r29, 0x3e	; 62
     a80:	a3 97       	sbiw	r28, 0x23	; 35
     a82:	0f b6       	in	r0, 0x3f	; 63
     a84:	f8 94       	cli
     a86:	de bf       	out	0x3e, r29	; 62
     a88:	0f be       	out	0x3f, r0	; 63
     a8a:	cd bf       	out	0x3d, r28	; 61
     a8c:	7c 01       	movw	r14, r24
     a8e:	6a 01       	movw	r12, r20
     a90:	89 01       	movw	r16, r18
	unsigned char cmd_1[4]="AT";
     a92:	81 e4       	ldi	r24, 0x41	; 65
     a94:	94 e5       	ldi	r25, 0x54	; 84
     a96:	9a 83       	std	Y+2, r25	; 0x02
     a98:	89 83       	std	Y+1, r24	; 0x01
     a9a:	1c 82       	std	Y+4, r1	; 0x04
     a9c:	1b 82       	std	Y+3, r1	; 0x03
	unsigned char cmd_2[10]="AT+CMGF=1";
     a9e:	8a e0       	ldi	r24, 0x0A	; 10
     aa0:	e7 ec       	ldi	r30, 0xC7	; 199
     aa2:	f0 e0       	ldi	r31, 0x00	; 0
     aa4:	de 01       	movw	r26, r28
     aa6:	15 96       	adiw	r26, 0x05	; 5
     aa8:	01 90       	ld	r0, Z+
     aaa:	0d 92       	st	X+, r0
     aac:	8a 95       	dec	r24
     aae:	e1 f7       	brne	.-8      	; 0xaa8 <sendMessage+0x3c>
	unsigned char cmd_3[10]="AT+CMGS=";
     ab0:	89 e0       	ldi	r24, 0x09	; 9
     ab2:	e0 e6       	ldi	r30, 0x60	; 96
     ab4:	f0 e0       	ldi	r31, 0x00	; 0
     ab6:	de 01       	movw	r26, r28
     ab8:	1f 96       	adiw	r26, 0x0f	; 15
     aba:	01 90       	ld	r0, Z+
     abc:	0d 92       	st	X+, r0
     abe:	8a 95       	dec	r24
     ac0:	e1 f7       	brne	.-8      	; 0xaba <sendMessage+0x4e>
     ac2:	18 8e       	std	Y+24, r1	; 0x18
	char* cmd_4 = msg;
	strcat(cmd_4,"\r   Location\r   Latitude : ");
     ac4:	d7 01       	movw	r26, r14
     ac6:	0d 90       	ld	r0, X+
     ac8:	00 20       	and	r0, r0
     aca:	e9 f7       	brne	.-6      	; 0xac6 <sendMessage+0x5a>
     acc:	11 97       	sbiw	r26, 0x01	; 1
     ace:	8c e1       	ldi	r24, 0x1C	; 28
     ad0:	ea e6       	ldi	r30, 0x6A	; 106
     ad2:	f0 e0       	ldi	r31, 0x00	; 0
     ad4:	01 90       	ld	r0, Z+
     ad6:	0d 92       	st	X+, r0
     ad8:	8a 95       	dec	r24
     ada:	e1 f7       	brne	.-8      	; 0xad4 <sendMessage+0x68>
	strcat(cmd_4,lat);
     adc:	c7 01       	movw	r24, r14
     ade:	0e 94 b4 0a 	call	0x1568	; 0x1568 <strcat>
	strcat(cmd_4,"\r   Longitude : ");
     ae2:	d7 01       	movw	r26, r14
     ae4:	0d 90       	ld	r0, X+
     ae6:	00 20       	and	r0, r0
     ae8:	e9 f7       	brne	.-6      	; 0xae4 <sendMessage+0x78>
     aea:	11 97       	sbiw	r26, 0x01	; 1
     aec:	81 e1       	ldi	r24, 0x11	; 17
     aee:	e6 e8       	ldi	r30, 0x86	; 134
     af0:	f0 e0       	ldi	r31, 0x00	; 0
     af2:	01 90       	ld	r0, Z+
     af4:	0d 92       	st	X+, r0
     af6:	8a 95       	dec	r24
     af8:	e1 f7       	brne	.-8      	; 0xaf2 <sendMessage+0x86>
	strcat(cmd_4,lngtd);
     afa:	b6 01       	movw	r22, r12
     afc:	c7 01       	movw	r24, r14
     afe:	0e 94 b4 0a 	call	0x1568	; 0x1568 <strcat>
	strcat(cmd_4,"\r   Altitude : ");
     b02:	d7 01       	movw	r26, r14
     b04:	0d 90       	ld	r0, X+
     b06:	00 20       	and	r0, r0
     b08:	e9 f7       	brne	.-6      	; 0xb04 <sendMessage+0x98>
     b0a:	11 97       	sbiw	r26, 0x01	; 1
     b0c:	80 e1       	ldi	r24, 0x10	; 16
     b0e:	e7 e9       	ldi	r30, 0x97	; 151
     b10:	f0 e0       	ldi	r31, 0x00	; 0
     b12:	01 90       	ld	r0, Z+
     b14:	0d 92       	st	X+, r0
     b16:	8a 95       	dec	r24
     b18:	e1 f7       	brne	.-8      	; 0xb12 <sendMessage+0xa6>
	strcat(cmd_4,altitude);
     b1a:	b8 01       	movw	r22, r16
     b1c:	c7 01       	movw	r24, r14
     b1e:	0e 94 b4 0a 	call	0x1568	; 0x1568 <strcat>
	unsigned char num[11] = "0771234567";
     b22:	8b e0       	ldi	r24, 0x0B	; 11
     b24:	e1 ed       	ldi	r30, 0xD1	; 209
     b26:	f0 e0       	ldi	r31, 0x00	; 0
     b28:	de 01       	movw	r26, r28
     b2a:	59 96       	adiw	r26, 0x19	; 25
     b2c:	01 90       	ld	r0, Z+
     b2e:	0d 92       	st	X+, r0
     b30:	8a 95       	dec	r24
     b32:	e1 f7       	brne	.-8      	; 0xb2c <sendMessage+0xc0>
	LCD_Clear();
     b34:	0e 94 01 02 	call	0x402	; 0x402 <LCD_Clear>
	LCD_String_xy(1,0,"Message");
     b38:	47 ea       	ldi	r20, 0xA7	; 167
     b3a:	50 e0       	ldi	r21, 0x00	; 0
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	81 e0       	ldi	r24, 0x01	; 1
     b40:	0e 94 e5 01 	call	0x3ca	; 0x3ca <LCD_String_xy>
	LCD_Command(0xc0);
     b44:	80 ec       	ldi	r24, 0xC0	; 192
     b46:	0e 94 45 01 	call	0x28a	; 0x28a <LCD_Command>
	LCD_String_xy(2,3,"Forwarding");
     b4a:	4f ea       	ldi	r20, 0xAF	; 175
     b4c:	50 e0       	ldi	r21, 0x00	; 0
     b4e:	63 e0       	ldi	r22, 0x03	; 3
     b50:	82 e0       	ldi	r24, 0x02	; 2
     b52:	0e 94 e5 01 	call	0x3ca	; 0x3ca <LCD_String_xy>
     b56:	2f ef       	ldi	r18, 0xFF	; 255
     b58:	84 e3       	ldi	r24, 0x34	; 52
     b5a:	9c e0       	ldi	r25, 0x0C	; 12
     b5c:	21 50       	subi	r18, 0x01	; 1
     b5e:	80 40       	sbci	r24, 0x00	; 0
     b60:	90 40       	sbci	r25, 0x00	; 0
     b62:	e1 f7       	brne	.-8      	; 0xb5c <sendMessage+0xf0>
     b64:	00 c0       	rjmp	.+0      	; 0xb66 <sendMessage+0xfa>
     b66:	00 00       	nop
	_delay_ms(500);
	for (int i=0;cmd_1[i]!='\0';i++) /*checking communication*/
     b68:	00 e0       	ldi	r16, 0x00	; 0
     b6a:	10 e0       	ldi	r17, 0x00	; 0
     b6c:	0a c0       	rjmp	.+20     	; 0xb82 <sendMessage+0x116>
	{
		USART_TxChar(cmd_1[i]);
     b6e:	0e 94 3c 02 	call	0x478	; 0x478 <USART_TxChar>
     b72:	8f e0       	ldi	r24, 0x0F	; 15
     b74:	97 e2       	ldi	r25, 0x27	; 39
     b76:	01 97       	sbiw	r24, 0x01	; 1
     b78:	f1 f7       	brne	.-4      	; 0xb76 <sendMessage+0x10a>
     b7a:	00 c0       	rjmp	.+0      	; 0xb7c <sendMessage+0x110>
     b7c:	00 00       	nop
	LCD_Clear();
	LCD_String_xy(1,0,"Message");
	LCD_Command(0xc0);
	LCD_String_xy(2,3,"Forwarding");
	_delay_ms(500);
	for (int i=0;cmd_1[i]!='\0';i++) /*checking communication*/
     b7e:	0f 5f       	subi	r16, 0xFF	; 255
     b80:	1f 4f       	sbci	r17, 0xFF	; 255
     b82:	e1 e0       	ldi	r30, 0x01	; 1
     b84:	f0 e0       	ldi	r31, 0x00	; 0
     b86:	ec 0f       	add	r30, r28
     b88:	fd 1f       	adc	r31, r29
     b8a:	e0 0f       	add	r30, r16
     b8c:	f1 1f       	adc	r31, r17
     b8e:	80 81       	ld	r24, Z
     b90:	81 11       	cpse	r24, r1
     b92:	ed cf       	rjmp	.-38     	; 0xb6e <sendMessage+0x102>
	{
		USART_TxChar(cmd_1[i]);
		_delay_ms(5);
	}
	USART_TxChar('\r'); /*carriage return ---> begining from the first line without going to next line*/
     b94:	8d e0       	ldi	r24, 0x0D	; 13
     b96:	0e 94 3c 02 	call	0x478	; 0x478 <USART_TxChar>
     b9a:	8f e0       	ldi	r24, 0x0F	; 15
     b9c:	97 e2       	ldi	r25, 0x27	; 39
     b9e:	01 97       	sbiw	r24, 0x01	; 1
     ba0:	f1 f7       	brne	.-4      	; 0xb9e <sendMessage+0x132>
     ba2:	00 c0       	rjmp	.+0      	; 0xba4 <sendMessage+0x138>
     ba4:	00 00       	nop
	_delay_ms(5);
	
	for (int i=0;cmd_2[i]!='\0';i++) /* set the operating mode to SMS text mode*/
     ba6:	00 e0       	ldi	r16, 0x00	; 0
     ba8:	10 e0       	ldi	r17, 0x00	; 0
     baa:	0a c0       	rjmp	.+20     	; 0xbc0 <sendMessage+0x154>
	{
		USART_TxChar(cmd_2[i]);
     bac:	0e 94 3c 02 	call	0x478	; 0x478 <USART_TxChar>
     bb0:	8f e0       	ldi	r24, 0x0F	; 15
     bb2:	97 e2       	ldi	r25, 0x27	; 39
     bb4:	01 97       	sbiw	r24, 0x01	; 1
     bb6:	f1 f7       	brne	.-4      	; 0xbb4 <sendMessage+0x148>
     bb8:	00 c0       	rjmp	.+0      	; 0xbba <sendMessage+0x14e>
     bba:	00 00       	nop
		_delay_ms(5);
	}
	USART_TxChar('\r'); /*carriage return ---> begining from the first line without going to next line*/
	_delay_ms(5);
	
	for (int i=0;cmd_2[i]!='\0';i++) /* set the operating mode to SMS text mode*/
     bbc:	0f 5f       	subi	r16, 0xFF	; 255
     bbe:	1f 4f       	sbci	r17, 0xFF	; 255
     bc0:	e5 e0       	ldi	r30, 0x05	; 5
     bc2:	f0 e0       	ldi	r31, 0x00	; 0
     bc4:	ec 0f       	add	r30, r28
     bc6:	fd 1f       	adc	r31, r29
     bc8:	e0 0f       	add	r30, r16
     bca:	f1 1f       	adc	r31, r17
     bcc:	80 81       	ld	r24, Z
     bce:	81 11       	cpse	r24, r1
     bd0:	ed cf       	rjmp	.-38     	; 0xbac <sendMessage+0x140>
	{
		USART_TxChar(cmd_2[i]);
		_delay_ms(5);
	}
	USART_TxChar('\r');
     bd2:	8d e0       	ldi	r24, 0x0D	; 13
     bd4:	0e 94 3c 02 	call	0x478	; 0x478 <USART_TxChar>
     bd8:	8f e0       	ldi	r24, 0x0F	; 15
     bda:	97 e2       	ldi	r25, 0x27	; 39
     bdc:	01 97       	sbiw	r24, 0x01	; 1
     bde:	f1 f7       	brne	.-4      	; 0xbdc <sendMessage+0x170>
     be0:	00 c0       	rjmp	.+0      	; 0xbe2 <sendMessage+0x176>
     be2:	00 00       	nop
	_delay_ms(5);
	
	for (int i=0;cmd_3[i]!='\0';i++) /* send SMS in text mode*/
     be4:	00 e0       	ldi	r16, 0x00	; 0
     be6:	10 e0       	ldi	r17, 0x00	; 0
     be8:	0a c0       	rjmp	.+20     	; 0xbfe <sendMessage+0x192>
	{
		USART_TxChar(cmd_3[i]);
     bea:	0e 94 3c 02 	call	0x478	; 0x478 <USART_TxChar>
     bee:	8f e0       	ldi	r24, 0x0F	; 15
     bf0:	97 e2       	ldi	r25, 0x27	; 39
     bf2:	01 97       	sbiw	r24, 0x01	; 1
     bf4:	f1 f7       	brne	.-4      	; 0xbf2 <sendMessage+0x186>
     bf6:	00 c0       	rjmp	.+0      	; 0xbf8 <sendMessage+0x18c>
     bf8:	00 00       	nop
		_delay_ms(5);
	}
	USART_TxChar('\r');
	_delay_ms(5);
	
	for (int i=0;cmd_3[i]!='\0';i++) /* send SMS in text mode*/
     bfa:	0f 5f       	subi	r16, 0xFF	; 255
     bfc:	1f 4f       	sbci	r17, 0xFF	; 255
     bfe:	ef e0       	ldi	r30, 0x0F	; 15
     c00:	f0 e0       	ldi	r31, 0x00	; 0
     c02:	ec 0f       	add	r30, r28
     c04:	fd 1f       	adc	r31, r29
     c06:	e0 0f       	add	r30, r16
     c08:	f1 1f       	adc	r31, r17
     c0a:	80 81       	ld	r24, Z
     c0c:	81 11       	cpse	r24, r1
     c0e:	ed cf       	rjmp	.-38     	; 0xbea <sendMessage+0x17e>
	{
		USART_TxChar(cmd_3[i]);
		_delay_ms(5);
	}
	UDR='"';
     c10:	82 e2       	ldi	r24, 0x22	; 34
     c12:	8c b9       	out	0x0c, r24	; 12
     c14:	9f ef       	ldi	r25, 0xFF	; 255
     c16:	20 e7       	ldi	r18, 0x70	; 112
     c18:	82 e0       	ldi	r24, 0x02	; 2
     c1a:	91 50       	subi	r25, 0x01	; 1
     c1c:	20 40       	sbci	r18, 0x00	; 0
     c1e:	80 40       	sbci	r24, 0x00	; 0
     c20:	e1 f7       	brne	.-8      	; 0xc1a <sendMessage+0x1ae>
     c22:	00 c0       	rjmp	.+0      	; 0xc24 <sendMessage+0x1b8>
     c24:	00 00       	nop
	_delay_ms(100);
	for (int i=0;num[i]!='\0';i++) /* SMS to be sent */
     c26:	00 e0       	ldi	r16, 0x00	; 0
     c28:	10 e0       	ldi	r17, 0x00	; 0
     c2a:	0a c0       	rjmp	.+20     	; 0xc40 <sendMessage+0x1d4>
	{
		USART_TxChar(num[i]);
     c2c:	0e 94 3c 02 	call	0x478	; 0x478 <USART_TxChar>
     c30:	8f e0       	ldi	r24, 0x0F	; 15
     c32:	97 e2       	ldi	r25, 0x27	; 39
     c34:	01 97       	sbiw	r24, 0x01	; 1
     c36:	f1 f7       	brne	.-4      	; 0xc34 <sendMessage+0x1c8>
     c38:	00 c0       	rjmp	.+0      	; 0xc3a <sendMessage+0x1ce>
     c3a:	00 00       	nop
		USART_TxChar(cmd_3[i]);
		_delay_ms(5);
	}
	UDR='"';
	_delay_ms(100);
	for (int i=0;num[i]!='\0';i++) /* SMS to be sent */
     c3c:	0f 5f       	subi	r16, 0xFF	; 255
     c3e:	1f 4f       	sbci	r17, 0xFF	; 255
     c40:	e9 e1       	ldi	r30, 0x19	; 25
     c42:	f0 e0       	ldi	r31, 0x00	; 0
     c44:	ec 0f       	add	r30, r28
     c46:	fd 1f       	adc	r31, r29
     c48:	e0 0f       	add	r30, r16
     c4a:	f1 1f       	adc	r31, r17
     c4c:	80 81       	ld	r24, Z
     c4e:	81 11       	cpse	r24, r1
     c50:	ed cf       	rjmp	.-38     	; 0xc2c <sendMessage+0x1c0>
	{
		USART_TxChar(num[i]);
		_delay_ms(5);
	}
	UDR='"';
     c52:	82 e2       	ldi	r24, 0x22	; 34
     c54:	8c b9       	out	0x0c, r24	; 12
     c56:	8f e0       	ldi	r24, 0x0F	; 15
     c58:	97 e2       	ldi	r25, 0x27	; 39
     c5a:	01 97       	sbiw	r24, 0x01	; 1
     c5c:	f1 f7       	brne	.-4      	; 0xc5a <sendMessage+0x1ee>
     c5e:	00 c0       	rjmp	.+0      	; 0xc60 <sendMessage+0x1f4>
     c60:	00 00       	nop
	_delay_ms(5);
	UDR='\r';
     c62:	8d e0       	ldi	r24, 0x0D	; 13
     c64:	8c b9       	out	0x0c, r24	; 12
     c66:	8f e0       	ldi	r24, 0x0F	; 15
     c68:	97 e2       	ldi	r25, 0x27	; 39
     c6a:	01 97       	sbiw	r24, 0x01	; 1
     c6c:	f1 f7       	brne	.-4      	; 0xc6a <sendMessage+0x1fe>
     c6e:	00 c0       	rjmp	.+0      	; 0xc70 <sendMessage+0x204>
     c70:	00 00       	nop
	_delay_ms(5);

	for (int i=0;cmd_4[i]!='\0';i++) /* message */
     c72:	00 e0       	ldi	r16, 0x00	; 0
     c74:	10 e0       	ldi	r17, 0x00	; 0
     c76:	0a c0       	rjmp	.+20     	; 0xc8c <sendMessage+0x220>
	{
		USART_TxChar(cmd_4[i]);
     c78:	0e 94 3c 02 	call	0x478	; 0x478 <USART_TxChar>
     c7c:	8f e0       	ldi	r24, 0x0F	; 15
     c7e:	97 e2       	ldi	r25, 0x27	; 39
     c80:	01 97       	sbiw	r24, 0x01	; 1
     c82:	f1 f7       	brne	.-4      	; 0xc80 <sendMessage+0x214>
     c84:	00 c0       	rjmp	.+0      	; 0xc86 <sendMessage+0x21a>
     c86:	00 00       	nop
	UDR='"';
	_delay_ms(5);
	UDR='\r';
	_delay_ms(5);

	for (int i=0;cmd_4[i]!='\0';i++) /* message */
     c88:	0f 5f       	subi	r16, 0xFF	; 255
     c8a:	1f 4f       	sbci	r17, 0xFF	; 255
     c8c:	f7 01       	movw	r30, r14
     c8e:	e0 0f       	add	r30, r16
     c90:	f1 1f       	adc	r31, r17
     c92:	80 81       	ld	r24, Z
     c94:	81 11       	cpse	r24, r1
     c96:	f0 cf       	rjmp	.-32     	; 0xc78 <sendMessage+0x20c>
     c98:	9f ef       	ldi	r25, 0xFF	; 255
     c9a:	21 ee       	ldi	r18, 0xE1	; 225
     c9c:	84 e0       	ldi	r24, 0x04	; 4
     c9e:	91 50       	subi	r25, 0x01	; 1
     ca0:	20 40       	sbci	r18, 0x00	; 0
     ca2:	80 40       	sbci	r24, 0x00	; 0
     ca4:	e1 f7       	brne	.-8      	; 0xc9e <sendMessage+0x232>
     ca6:	00 c0       	rjmp	.+0      	; 0xca8 <sendMessage+0x23c>
     ca8:	00 00       	nop
	{
		USART_TxChar(cmd_4[i]);
		_delay_ms(5);
	}
	_delay_ms(200);
	LCD_Clear();
     caa:	0e 94 01 02 	call	0x402	; 0x402 <LCD_Clear>
	LCD_String_xy(1,0,"Message sent");
     cae:	4a eb       	ldi	r20, 0xBA	; 186
     cb0:	50 e0       	ldi	r21, 0x00	; 0
     cb2:	60 e0       	ldi	r22, 0x00	; 0
     cb4:	81 e0       	ldi	r24, 0x01	; 1
     cb6:	0e 94 e5 01 	call	0x3ca	; 0x3ca <LCD_String_xy>
     cba:	9f ef       	ldi	r25, 0xFF	; 255
     cbc:	22 e5       	ldi	r18, 0x52	; 82
     cbe:	87 e0       	ldi	r24, 0x07	; 7
     cc0:	91 50       	subi	r25, 0x01	; 1
     cc2:	20 40       	sbci	r18, 0x00	; 0
     cc4:	80 40       	sbci	r24, 0x00	; 0
     cc6:	e1 f7       	brne	.-8      	; 0xcc0 <sendMessage+0x254>
     cc8:	00 c0       	rjmp	.+0      	; 0xcca <sendMessage+0x25e>
     cca:	00 00       	nop
	_delay_ms(300);
	LCD_Clear();
     ccc:	0e 94 01 02 	call	0x402	; 0x402 <LCD_Clear>
     cd0:	a3 96       	adiw	r28, 0x23	; 35
     cd2:	0f b6       	in	r0, 0x3f	; 63
     cd4:	f8 94       	cli
     cd6:	de bf       	out	0x3e, r29	; 62
     cd8:	0f be       	out	0x3f, r0	; 63
     cda:	cd bf       	out	0x3d, r28	; 61
     cdc:	df 91       	pop	r29
     cde:	cf 91       	pop	r28
     ce0:	1f 91       	pop	r17
     ce2:	0f 91       	pop	r16
     ce4:	ff 90       	pop	r15
     ce6:	ef 90       	pop	r14
     ce8:	df 90       	pop	r13
     cea:	cf 90       	pop	r12
     cec:	08 95       	ret

00000cee <ringAlarm>:
		}
	}
}

void ringAlarm(){
	portHigh(PORTD,buzzer);//buzzer
     cee:	82 b3       	in	r24, 0x12	; 18
     cf0:	80 68       	ori	r24, 0x80	; 128
     cf2:	82 bb       	out	0x12, r24	; 18
     cf4:	08 95       	ret

00000cf6 <stopAlarm>:
}
void stopAlarm(){
	portLow(PORTD,buzzer);
     cf6:	82 b3       	in	r24, 0x12	; 18
     cf8:	8f 77       	andi	r24, 0x7F	; 127
     cfa:	82 bb       	out	0x12, r24	; 18
     cfc:	08 95       	ret

00000cfe <onHazardLight>:
}
void onHazardLight(){
	portHigh(PORTD,led);
     cfe:	82 b3       	in	r24, 0x12	; 18
     d00:	80 64       	ori	r24, 0x40	; 64
     d02:	82 bb       	out	0x12, r24	; 18
     d04:	08 95       	ret

00000d06 <offHazardLight>:
}
void offHazardLight(){
	portLow(PORTD,led);
     d06:	82 b3       	in	r24, 0x12	; 18
     d08:	8f 7b       	andi	r24, 0xBF	; 191
     d0a:	82 bb       	out	0x12, r24	; 18
     d0c:	08 95       	ret

00000d0e <playRadio>:
}
void playRadio(){
	portHigh(PORTD,musicSystem);
     d0e:	82 b3       	in	r24, 0x12	; 18
     d10:	80 62       	ori	r24, 0x20	; 32
     d12:	82 bb       	out	0x12, r24	; 18
     d14:	08 95       	ret

00000d16 <isDriverSleepingIR>:
}

int isDriverSleepingIR(){
     d16:	cf 93       	push	r28
     d18:	df 93       	push	r29
	LCD_Clear();
     d1a:	0e 94 01 02 	call	0x402	; 0x402 <LCD_Clear>
	LCD_String("Checking Eyes");
     d1e:	8c ed       	ldi	r24, 0xDC	; 220
     d20:	90 e0       	ldi	r25, 0x00	; 0
     d22:	0e 94 cf 01 	call	0x39e	; 0x39e <LCD_String>
	//wait for 2seconds on 40ms time interval
	int timeInterval=40;
	int flag=0;
	for(int i=1;i<=timeInterval;i++){
     d26:	81 e0       	ldi	r24, 0x01	; 1
     d28:	90 e0       	ldi	r25, 0x00	; 0
int isDriverSleepingIR(){
	LCD_Clear();
	LCD_String("Checking Eyes");
	//wait for 2seconds on 40ms time interval
	int timeInterval=40;
	int flag=0;
     d2a:	c0 e0       	ldi	r28, 0x00	; 0
     d2c:	d0 e0       	ldi	r29, 0x00	; 0
	for(int i=1;i<=timeInterval;i++){
     d2e:	0f c0       	rjmp	.+30     	; 0xd4e <isDriverSleepingIR+0x38>
		if(pinRead(PINC,irsensor)==0x40){
     d30:	9e 9b       	sbis	0x13, 6	; 19
     d32:	02 c0       	rjmp	.+4      	; 0xd38 <isDriverSleepingIR+0x22>
			flag++;
     d34:	21 96       	adiw	r28, 0x01	; 1
     d36:	01 c0       	rjmp	.+2      	; 0xd3a <isDriverSleepingIR+0x24>
		}else{
			flag--;
     d38:	21 97       	sbiw	r28, 0x01	; 1
     d3a:	2f e7       	ldi	r18, 0x7F	; 127
     d3c:	38 e3       	ldi	r19, 0x38	; 56
     d3e:	41 e0       	ldi	r20, 0x01	; 1
     d40:	21 50       	subi	r18, 0x01	; 1
     d42:	30 40       	sbci	r19, 0x00	; 0
     d44:	40 40       	sbci	r20, 0x00	; 0
     d46:	e1 f7       	brne	.-8      	; 0xd40 <isDriverSleepingIR+0x2a>
     d48:	00 c0       	rjmp	.+0      	; 0xd4a <isDriverSleepingIR+0x34>
     d4a:	00 00       	nop
	LCD_Clear();
	LCD_String("Checking Eyes");
	//wait for 2seconds on 40ms time interval
	int timeInterval=40;
	int flag=0;
	for(int i=1;i<=timeInterval;i++){
     d4c:	01 96       	adiw	r24, 0x01	; 1
     d4e:	89 32       	cpi	r24, 0x29	; 41
     d50:	91 05       	cpc	r25, r1
     d52:	74 f3       	brlt	.-36     	; 0xd30 <isDriverSleepingIR+0x1a>
		}else{
			flag--;
		}
		_delay_ms(50);
	}
	LCD_Command(0xc0);
     d54:	80 ec       	ldi	r24, 0xC0	; 192
     d56:	0e 94 45 01 	call	0x28a	; 0x28a <LCD_Command>
	LCD_String("  -Finished");
     d5a:	8a ee       	ldi	r24, 0xEA	; 234
     d5c:	90 e0       	ldi	r25, 0x00	; 0
     d5e:	0e 94 cf 01 	call	0x39e	; 0x39e <LCD_String>
	if(flag==timeInterval){
     d62:	a8 97       	sbiw	r28, 0x28	; 40
     d64:	19 f4       	brne	.+6      	; 0xd6c <isDriverSleepingIR+0x56>
		return 1;
     d66:	81 e0       	ldi	r24, 0x01	; 1
     d68:	90 e0       	ldi	r25, 0x00	; 0
     d6a:	02 c0       	rjmp	.+4      	; 0xd70 <isDriverSleepingIR+0x5a>
	}else{
		return 0; 
     d6c:	80 e0       	ldi	r24, 0x00	; 0
     d6e:	90 e0       	ldi	r25, 0x00	; 0
	}
}
     d70:	df 91       	pop	r29
     d72:	cf 91       	pop	r28
     d74:	08 95       	ret

00000d76 <sendLocation>:

void sendLocation(char* message){
     d76:	0f 93       	push	r16
     d78:	1f 93       	push	r17
     d7a:	cf 93       	push	r28
     d7c:	df 93       	push	r29
     d7e:	8c 01       	movw	r16, r24
	get_latitude(GGA_Pointers[0]);char* lat=lat_degrees_buffer;
     d80:	c2 e9       	ldi	r28, 0x92	; 146
     d82:	d2 e0       	ldi	r29, 0x02	; 2
     d84:	88 81       	ld	r24, Y
     d86:	90 e0       	ldi	r25, 0x00	; 0
     d88:	0e 94 ba 02 	call	0x574	; 0x574 <get_latitude>
	get_longitude(GGA_Pointers[2]);char* lngtd=long_degrees_buffer;
     d8c:	8a 81       	ldd	r24, Y+2	; 0x02
     d8e:	90 e0       	ldi	r25, 0x00	; 0
     d90:	0e 94 26 03 	call	0x64c	; 0x64c <get_longitude>
	get_altitude(GGA_Pointers[7]);char* altitude=Altitude_Buffer;
     d94:	8f 81       	ldd	r24, Y+7	; 0x07
     d96:	90 e0       	ldi	r25, 0x00	; 0
     d98:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <get_altitude>
	PORTD=0x04;// change signal using mux
     d9c:	84 e0       	ldi	r24, 0x04	; 4
     d9e:	82 bb       	out	0x12, r24	; 18
	sendMessage(message,lat,lngtd,altitude);
     da0:	2a eb       	ldi	r18, 0xBA	; 186
     da2:	32 e0       	ldi	r19, 0x02	; 2
     da4:	4d e4       	ldi	r20, 0x4D	; 77
     da6:	52 e0       	ldi	r21, 0x02	; 2
     da8:	66 ea       	ldi	r22, 0xA6	; 166
     daa:	72 e0       	ldi	r23, 0x02	; 2
     dac:	c8 01       	movw	r24, r16
     dae:	0e 94 36 05 	call	0xa6c	; 0xa6c <sendMessage>
	PORTD=0x00;// turn back to normal
     db2:	12 ba       	out	0x12, r1	; 18
     db4:	df 91       	pop	r29
     db6:	cf 91       	pop	r28
     db8:	1f 91       	pop	r17
     dba:	0f 91       	pop	r16
     dbc:	08 95       	ret

00000dbe <main>:
#define F_CPU 8000000UL
#define SREG   _SFR_IO8(0x3f)
#include "headerfiles.h"
int main(void){
	DDRD=0xE4;
     dbe:	84 ee       	ldi	r24, 0xE4	; 228
     dc0:	81 bb       	out	0x11, r24	; 17
	LCD_Init();LCD_String("Initializing..");_delay_ms(50);LCD_Clear();
     dc2:	0e 94 ab 01 	call	0x356	; 0x356 <LCD_Init>
     dc6:	86 ef       	ldi	r24, 0xF6	; 246
     dc8:	90 e0       	ldi	r25, 0x00	; 0
     dca:	0e 94 cf 01 	call	0x39e	; 0x39e <LCD_String>
     dce:	2f e7       	ldi	r18, 0x7F	; 127
     dd0:	38 e3       	ldi	r19, 0x38	; 56
     dd2:	41 e0       	ldi	r20, 0x01	; 1
     dd4:	21 50       	subi	r18, 0x01	; 1
     dd6:	30 40       	sbci	r19, 0x00	; 0
     dd8:	40 40       	sbci	r20, 0x00	; 0
     dda:	e1 f7       	brne	.-8      	; 0xdd4 <main+0x16>
     ddc:	00 c0       	rjmp	.+0      	; 0xdde <main+0x20>
     dde:	00 00       	nop
     de0:	0e 94 01 02 	call	0x402	; 0x402 <LCD_Clear>
	I2C_Init();
     de4:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <I2C_Init>
	MPU6050_Init();
     de8:	0e 94 c1 03 	call	0x782	; 0x782 <MPU6050_Init>
	PWM_init();
     dec:	0e 94 30 05 	call	0xa60	; 0xa60 <PWM_init>
	GGA_Index=0;
     df0:	10 92 7b 02 	sts	0x027B, r1	; 0x80027b <GGA_Index+0x1>
     df4:	10 92 7a 02 	sts	0x027A, r1	; 0x80027a <GGA_Index>
	USART_Init(9600);
     df8:	60 e8       	ldi	r22, 0x80	; 128
     dfa:	75 e2       	ldi	r23, 0x25	; 37
     dfc:	80 e0       	ldi	r24, 0x00	; 0
     dfe:	90 e0       	ldi	r25, 0x00	; 0
     e00:	0e 94 0e 02 	call	0x41c	; 0x41c <USART_Init>
	sei();
     e04:	78 94       	sei
	start:
	LCD_String("Welcome");_delay_ms(100);LCD_Clear();
     e06:	85 e0       	ldi	r24, 0x05	; 5
     e08:	91 e0       	ldi	r25, 0x01	; 1
     e0a:	0e 94 cf 01 	call	0x39e	; 0x39e <LCD_String>
     e0e:	8f ef       	ldi	r24, 0xFF	; 255
     e10:	90 e7       	ldi	r25, 0x70	; 112
     e12:	22 e0       	ldi	r18, 0x02	; 2
     e14:	81 50       	subi	r24, 0x01	; 1
     e16:	90 40       	sbci	r25, 0x00	; 0
     e18:	20 40       	sbci	r18, 0x00	; 0
     e1a:	e1 f7       	brne	.-8      	; 0xe14 <main+0x56>
     e1c:	00 c0       	rjmp	.+0      	; 0xe1e <main+0x60>
     e1e:	00 00       	nop
     e20:	0e 94 01 02 	call	0x402	; 0x402 <LCD_Clear>
	float Xa,Ya,Za; // for gyroscope
	while (1){
		//flame detection
		if(pinRead(PINC,flame)==0x10){
     e24:	9c 9b       	sbis	0x13, 4	; 19
     e26:	1e c0       	rjmp	.+60     	; 0xe64 <main+0xa6>
			LCD_Clear();
     e28:	0e 94 01 02 	call	0x402	; 0x402 <LCD_Clear>
			LCD_String("Flame Detected !");
     e2c:	8d e0       	ldi	r24, 0x0D	; 13
     e2e:	91 e0       	ldi	r25, 0x01	; 1
     e30:	0e 94 cf 01 	call	0x39e	; 0x39e <LCD_String>
			ringAlarm();
     e34:	0e 94 77 06 	call	0xcee	; 0xcee <ringAlarm>
			onHazardLight();
     e38:	0e 94 7f 06 	call	0xcfe	; 0xcfe <onHazardLight>
     e3c:	3f ef       	ldi	r19, 0xFF	; 255
     e3e:	44 e3       	ldi	r20, 0x34	; 52
     e40:	8c e0       	ldi	r24, 0x0C	; 12
     e42:	31 50       	subi	r19, 0x01	; 1
     e44:	40 40       	sbci	r20, 0x00	; 0
     e46:	80 40       	sbci	r24, 0x00	; 0
     e48:	e1 f7       	brne	.-8      	; 0xe42 <main+0x84>
     e4a:	00 c0       	rjmp	.+0      	; 0xe4c <main+0x8e>
     e4c:	00 00       	nop
			_delay_ms(500);
			stopAlarm();
     e4e:	0e 94 7b 06 	call	0xcf6	; 0xcf6 <stopAlarm>
			offHazardLight();
     e52:	0e 94 83 06 	call	0xd06	; 0xd06 <offHazardLight>
			LCD_Clear();
     e56:	0e 94 01 02 	call	0x402	; 0x402 <LCD_Clear>
			sendLocation("Flame is Detected");
     e5a:	8e e1       	ldi	r24, 0x1E	; 30
     e5c:	91 e0       	ldi	r25, 0x01	; 1
     e5e:	0e 94 bb 06 	call	0xd76	; 0xd76 <sendLocation>
     e62:	e0 cf       	rjmp	.-64     	; 0xe24 <main+0x66>
		}
		else{
			ADC_Init();
     e64:	0e 94 40 02 	call	0x480	; 0x480 <ADC_Init>
			int val=ADC_Read(0);
     e68:	80 e0       	ldi	r24, 0x00	; 0
     e6a:	0e 94 46 02 	call	0x48c	; 0x48c <ADC_Read>
			float speed=(val/1024.0)*255.0;
     e6e:	bc 01       	movw	r22, r24
     e70:	99 0f       	add	r25, r25
     e72:	88 0b       	sbc	r24, r24
     e74:	99 0b       	sbc	r25, r25
     e76:	0e 94 4c 09 	call	0x1298	; 0x1298 <__floatsisf>
     e7a:	20 e0       	ldi	r18, 0x00	; 0
     e7c:	30 e0       	ldi	r19, 0x00	; 0
     e7e:	40 e8       	ldi	r20, 0x80	; 128
     e80:	5a e3       	ldi	r21, 0x3A	; 58
     e82:	0e 94 01 0a 	call	0x1402	; 0x1402 <__mulsf3>
     e86:	20 e0       	ldi	r18, 0x00	; 0
     e88:	30 e0       	ldi	r19, 0x00	; 0
     e8a:	4f e7       	ldi	r20, 0x7F	; 127
     e8c:	53 e4       	ldi	r21, 0x43	; 67
     e8e:	0e 94 01 0a 	call	0x1402	; 0x1402 <__mulsf3>
			OCR0=(int)speed;
     e92:	0e 94 14 09 	call	0x1228	; 0x1228 <__fixsfsi>
     e96:	6c bf       	out	0x3c, r22	; 60
			//get pressure
			int value = ADC_Read(1);
     e98:	81 e0       	ldi	r24, 0x01	; 1
     e9a:	0e 94 46 02 	call	0x48c	; 0x48c <ADC_Read>
			if (value > 109){// if value gt 109 vehicle is moving
     e9e:	8e 36       	cpi	r24, 0x6E	; 110
     ea0:	91 05       	cpc	r25, r1
     ea2:	0c f4       	brge	.+2      	; 0xea6 <main+0xe8>
     ea4:	c6 c0       	rjmp	.+396    	; 0x1032 <main+0x274>
				LCD_Clear();
     ea6:	0e 94 01 02 	call	0x402	; 0x402 <LCD_Clear>
				LCD_String("Driving mode");
     eaa:	80 e3       	ldi	r24, 0x30	; 48
     eac:	91 e0       	ldi	r25, 0x01	; 1
     eae:	0e 94 cf 01 	call	0x39e	; 0x39e <LCD_String>
				if(pinRead(PINC,alcohol)==0x20){
     eb2:	9d 9b       	sbis	0x13, 5	; 19
     eb4:	1a c0       	rjmp	.+52     	; 0xeea <main+0x12c>
					LCD_Clear();
     eb6:	0e 94 01 02 	call	0x402	; 0x402 <LCD_Clear>
					LCD_String("Alcohol Detected");
     eba:	8d e3       	ldi	r24, 0x3D	; 61
     ebc:	91 e0       	ldi	r25, 0x01	; 1
     ebe:	0e 94 cf 01 	call	0x39e	; 0x39e <LCD_String>
					ringAlarm();
     ec2:	0e 94 77 06 	call	0xcee	; 0xcee <ringAlarm>
     ec6:	9f ef       	ldi	r25, 0xFF	; 255
     ec8:	20 e7       	ldi	r18, 0x70	; 112
     eca:	32 e0       	ldi	r19, 0x02	; 2
     ecc:	91 50       	subi	r25, 0x01	; 1
     ece:	20 40       	sbci	r18, 0x00	; 0
     ed0:	30 40       	sbci	r19, 0x00	; 0
     ed2:	e1 f7       	brne	.-8      	; 0xecc <main+0x10e>
     ed4:	00 c0       	rjmp	.+0      	; 0xed6 <main+0x118>
     ed6:	00 00       	nop
					_delay_ms(100);
					stopAlarm();
     ed8:	0e 94 7b 06 	call	0xcf6	; 0xcf6 <stopAlarm>
					LCD_Clear();
     edc:	0e 94 01 02 	call	0x402	; 0x402 <LCD_Clear>
					sendLocation("Alcohol Detected");
     ee0:	8d e3       	ldi	r24, 0x3D	; 61
     ee2:	91 e0       	ldi	r25, 0x01	; 1
     ee4:	0e 94 bb 06 	call	0xd76	; 0xd76 <sendLocation>
     ee8:	9d cf       	rjmp	.-198    	; 0xe24 <main+0x66>
				}
				else{
					Read_RawValue();
     eea:	0e 94 0c 04 	call	0x818	; 0x818 <Read_RawValue>
					Xa = (Acc_x/16384.0)*9.8066;
     eee:	20 e0       	ldi	r18, 0x00	; 0
     ef0:	30 e0       	ldi	r19, 0x00	; 0
     ef2:	40 e8       	ldi	r20, 0x80	; 128
     ef4:	58 e3       	ldi	r21, 0x38	; 56
     ef6:	60 91 74 02 	lds	r22, 0x0274	; 0x800274 <Acc_x>
     efa:	70 91 75 02 	lds	r23, 0x0275	; 0x800275 <Acc_x+0x1>
     efe:	80 91 76 02 	lds	r24, 0x0276	; 0x800276 <Acc_x+0x2>
     f02:	90 91 77 02 	lds	r25, 0x0277	; 0x800277 <Acc_x+0x3>
     f06:	0e 94 01 0a 	call	0x1402	; 0x1402 <__mulsf3>
     f0a:	25 ed       	ldi	r18, 0xD5	; 213
     f0c:	37 ee       	ldi	r19, 0xE7	; 231
     f0e:	4c e1       	ldi	r20, 0x1C	; 28
     f10:	51 e4       	ldi	r21, 0x41	; 65
     f12:	0e 94 01 0a 	call	0x1402	; 0x1402 <__mulsf3>
     f16:	4b 01       	movw	r8, r22
     f18:	5c 01       	movw	r10, r24
					Ya = (Acc_y/16384.0)*9.8066;
     f1a:	20 e0       	ldi	r18, 0x00	; 0
     f1c:	30 e0       	ldi	r19, 0x00	; 0
     f1e:	40 e8       	ldi	r20, 0x80	; 128
     f20:	58 e3       	ldi	r21, 0x38	; 56
     f22:	60 91 49 02 	lds	r22, 0x0249	; 0x800249 <Acc_y>
     f26:	70 91 4a 02 	lds	r23, 0x024A	; 0x80024a <Acc_y+0x1>
     f2a:	80 91 4b 02 	lds	r24, 0x024B	; 0x80024b <Acc_y+0x2>
     f2e:	90 91 4c 02 	lds	r25, 0x024C	; 0x80024c <Acc_y+0x3>
     f32:	0e 94 01 0a 	call	0x1402	; 0x1402 <__mulsf3>
     f36:	25 ed       	ldi	r18, 0xD5	; 213
     f38:	37 ee       	ldi	r19, 0xE7	; 231
     f3a:	4c e1       	ldi	r20, 0x1C	; 28
     f3c:	51 e4       	ldi	r21, 0x41	; 65
     f3e:	0e 94 01 0a 	call	0x1402	; 0x1402 <__mulsf3>
     f42:	2b 01       	movw	r4, r22
     f44:	3c 01       	movw	r6, r24
					Za = (Acc_z/16384.0)*9.8066;
     f46:	20 e0       	ldi	r18, 0x00	; 0
     f48:	30 e0       	ldi	r19, 0x00	; 0
     f4a:	40 e8       	ldi	r20, 0x80	; 128
     f4c:	58 e3       	ldi	r21, 0x38	; 56
     f4e:	60 91 a7 01 	lds	r22, 0x01A7	; 0x8001a7 <Acc_z>
     f52:	70 91 a8 01 	lds	r23, 0x01A8	; 0x8001a8 <Acc_z+0x1>
     f56:	80 91 a9 01 	lds	r24, 0x01A9	; 0x8001a9 <Acc_z+0x2>
     f5a:	90 91 aa 01 	lds	r25, 0x01AA	; 0x8001aa <Acc_z+0x3>
     f5e:	0e 94 01 0a 	call	0x1402	; 0x1402 <__mulsf3>
     f62:	25 ed       	ldi	r18, 0xD5	; 213
     f64:	37 ee       	ldi	r19, 0xE7	; 231
     f66:	4c e1       	ldi	r20, 0x1C	; 28
     f68:	51 e4       	ldi	r21, 0x41	; 65
     f6a:	0e 94 01 0a 	call	0x1402	; 0x1402 <__mulsf3>
     f6e:	6b 01       	movw	r12, r22
     f70:	7c 01       	movw	r14, r24
					if(isDriverSleepingIR() && isDriverSleepingGyro(Xa,Ya,Za)){
     f72:	0e 94 8b 06 	call	0xd16	; 0xd16 <isDriverSleepingIR>
     f76:	89 2b       	or	r24, r25
     f78:	09 f4       	brne	.+2      	; 0xf7c <main+0x1be>
     f7a:	54 cf       	rjmp	.-344    	; 0xe24 <main+0x66>
     f7c:	87 01       	movw	r16, r14
     f7e:	76 01       	movw	r14, r12
     f80:	a3 01       	movw	r20, r6
     f82:	92 01       	movw	r18, r4
     f84:	c5 01       	movw	r24, r10
     f86:	b4 01       	movw	r22, r8
     f88:	0e 94 bd 04 	call	0x97a	; 0x97a <isDriverSleepingGyro>
     f8c:	89 2b       	or	r24, r25
     f8e:	09 f4       	brne	.+2      	; 0xf92 <main+0x1d4>
     f90:	49 cf       	rjmp	.-366    	; 0xe24 <main+0x66>
						LCD_Clear();
     f92:	0e 94 01 02 	call	0x402	; 0x402 <LCD_Clear>
						LCD_String("Sleeping");
     f96:	87 e8       	ldi	r24, 0x87	; 135
     f98:	91 e0       	ldi	r25, 0x01	; 1
     f9a:	0e 94 cf 01 	call	0x39e	; 0x39e <LCD_String>
						ringAlarm();
     f9e:	0e 94 77 06 	call	0xcee	; 0xcee <ringAlarm>
						onHazardLight();
     fa2:	0e 94 7f 06 	call	0xcfe	; 0xcfe <onHazardLight>
						LCD_Command(0xc0);
     fa6:	80 ec       	ldi	r24, 0xC0	; 192
     fa8:	0e 94 45 01 	call	0x28a	; 0x28a <LCD_Command>
						LCD_String("Waiting..");
     fac:	8e e4       	ldi	r24, 0x4E	; 78
     fae:	91 e0       	ldi	r25, 0x01	; 1
     fb0:	0e 94 cf 01 	call	0x39e	; 0x39e <LCD_String>
						int x;
						//wait for 5 seconds on 20ms time interval
						for(x=1;x<=20;x++){
     fb4:	81 e0       	ldi	r24, 0x01	; 1
     fb6:	90 e0       	ldi	r25, 0x00	; 0
     fb8:	13 c0       	rjmp	.+38     	; 0xfe0 <main+0x222>
							if(pinRead(PINC,3)==0x08){
     fba:	9b 9b       	sbis	0x13, 3	; 19
     fbc:	07 c0       	rjmp	.+14     	; 0xfcc <main+0x20e>
								stopAlarm();
     fbe:	0e 94 7b 06 	call	0xcf6	; 0xcf6 <stopAlarm>
								offHazardLight();
     fc2:	0e 94 83 06 	call	0xd06	; 0xd06 <offHazardLight>
								LCD_Clear();
     fc6:	0e 94 01 02 	call	0x402	; 0x402 <LCD_Clear>
								goto start;
     fca:	1d cf       	rjmp	.-454    	; 0xe06 <main+0x48>
     fcc:	4f e7       	ldi	r20, 0x7F	; 127
     fce:	2a e1       	ldi	r18, 0x1A	; 26
     fd0:	36 e0       	ldi	r19, 0x06	; 6
     fd2:	41 50       	subi	r20, 0x01	; 1
     fd4:	20 40       	sbci	r18, 0x00	; 0
     fd6:	30 40       	sbci	r19, 0x00	; 0
     fd8:	e1 f7       	brne	.-8      	; 0xfd2 <main+0x214>
     fda:	00 c0       	rjmp	.+0      	; 0xfdc <main+0x21e>
     fdc:	00 00       	nop
						onHazardLight();
						LCD_Command(0xc0);
						LCD_String("Waiting..");
						int x;
						//wait for 5 seconds on 20ms time interval
						for(x=1;x<=20;x++){
     fde:	01 96       	adiw	r24, 0x01	; 1
     fe0:	85 31       	cpi	r24, 0x15	; 21
     fe2:	91 05       	cpc	r25, r1
     fe4:	54 f3       	brlt	.-44     	; 0xfba <main+0x1fc>
								LCD_Clear();
								goto start;
							}
							_delay_ms(250);
						}
						LCD_Clear();
     fe6:	0e 94 01 02 	call	0x402	; 0x402 <LCD_Clear>
						LCD_String("Waiting");
     fea:	88 e5       	ldi	r24, 0x58	; 88
     fec:	91 e0       	ldi	r25, 0x01	; 1
     fee:	0e 94 cf 01 	call	0x39e	; 0x39e <LCD_String>
						LCD_Command(0xc0);
     ff2:	80 ec       	ldi	r24, 0xC0	; 192
     ff4:	0e 94 45 01 	call	0x28a	; 0x28a <LCD_Command>
						LCD_String("Complete");
     ff8:	80 e6       	ldi	r24, 0x60	; 96
     ffa:	91 e0       	ldi	r25, 0x01	; 1
     ffc:	0e 94 cf 01 	call	0x39e	; 0x39e <LCD_String>
						offHazardLight();
    1000:	0e 94 83 06 	call	0xd06	; 0xd06 <offHazardLight>
						stopAlarm();
    1004:	0e 94 7b 06 	call	0xcf6	; 0xcf6 <stopAlarm>
						OCR0=0;
    1008:	1c be       	out	0x3c, r1	; 60
						LCD_Clear();
    100a:	0e 94 01 02 	call	0x402	; 0x402 <LCD_Clear>
						LCD_String("Speed is");
    100e:	89 e6       	ldi	r24, 0x69	; 105
    1010:	91 e0       	ldi	r25, 0x01	; 1
    1012:	0e 94 cf 01 	call	0x39e	; 0x39e <LCD_String>
						LCD_Command(0xc0);
    1016:	80 ec       	ldi	r24, 0xC0	; 192
    1018:	0e 94 45 01 	call	0x28a	; 0x28a <LCD_Command>
						LCD_String("Reducing..");
    101c:	82 e7       	ldi	r24, 0x72	; 114
    101e:	91 e0       	ldi	r25, 0x01	; 1
    1020:	0e 94 cf 01 	call	0x39e	; 0x39e <LCD_String>
						sendLocation("Driver is Sleeping");
    1024:	8d e7       	ldi	r24, 0x7D	; 125
    1026:	91 e0       	ldi	r25, 0x01	; 1
    1028:	0e 94 bb 06 	call	0xd76	; 0xd76 <sendLocation>
						playRadio();
    102c:	0e 94 87 06 	call	0xd0e	; 0xd0e <playRadio>
    1030:	ff cf       	rjmp	.-2      	; 0x1030 <main+0x272>
						while(1){}//let motor to slowdown fully
					}
				}
			}else{
				LCD_String("Vehicle is");
    1032:	80 e9       	ldi	r24, 0x90	; 144
    1034:	91 e0       	ldi	r25, 0x01	; 1
    1036:	0e 94 cf 01 	call	0x39e	; 0x39e <LCD_String>
				LCD_Command(0xc0);
    103a:	80 ec       	ldi	r24, 0xC0	; 192
    103c:	0e 94 45 01 	call	0x28a	; 0x28a <LCD_Command>
				LCD_String("not moving");
    1040:	8b e9       	ldi	r24, 0x9B	; 155
    1042:	91 e0       	ldi	r25, 0x01	; 1
    1044:	0e 94 cf 01 	call	0x39e	; 0x39e <LCD_String>
    1048:	4f e7       	ldi	r20, 0x7F	; 127
    104a:	88 e3       	ldi	r24, 0x38	; 56
    104c:	91 e0       	ldi	r25, 0x01	; 1
    104e:	41 50       	subi	r20, 0x01	; 1
    1050:	80 40       	sbci	r24, 0x00	; 0
    1052:	90 40       	sbci	r25, 0x00	; 0
    1054:	e1 f7       	brne	.-8      	; 0x104e <main+0x290>
    1056:	00 c0       	rjmp	.+0      	; 0x1058 <main+0x29a>
    1058:	00 00       	nop
				_delay_ms(50);
				LCD_Clear();
    105a:	0e 94 01 02 	call	0x402	; 0x402 <LCD_Clear>
    105e:	e2 ce       	rjmp	.-572    	; 0xe24 <main+0x66>

00001060 <__subsf3>:
    1060:	50 58       	subi	r21, 0x80	; 128

00001062 <__addsf3>:
    1062:	bb 27       	eor	r27, r27
    1064:	aa 27       	eor	r26, r26
    1066:	0e 94 48 08 	call	0x1090	; 0x1090 <__addsf3x>
    106a:	0c 94 c2 09 	jmp	0x1384	; 0x1384 <__fp_round>
    106e:	0e 94 b4 09 	call	0x1368	; 0x1368 <__fp_pscA>
    1072:	38 f0       	brcs	.+14     	; 0x1082 <__addsf3+0x20>
    1074:	0e 94 bb 09 	call	0x1376	; 0x1376 <__fp_pscB>
    1078:	20 f0       	brcs	.+8      	; 0x1082 <__addsf3+0x20>
    107a:	39 f4       	brne	.+14     	; 0x108a <__addsf3+0x28>
    107c:	9f 3f       	cpi	r25, 0xFF	; 255
    107e:	19 f4       	brne	.+6      	; 0x1086 <__addsf3+0x24>
    1080:	26 f4       	brtc	.+8      	; 0x108a <__addsf3+0x28>
    1082:	0c 94 b1 09 	jmp	0x1362	; 0x1362 <__fp_nan>
    1086:	0e f4       	brtc	.+2      	; 0x108a <__addsf3+0x28>
    1088:	e0 95       	com	r30
    108a:	e7 fb       	bst	r30, 7
    108c:	0c 94 ab 09 	jmp	0x1356	; 0x1356 <__fp_inf>

00001090 <__addsf3x>:
    1090:	e9 2f       	mov	r30, r25
    1092:	0e 94 d3 09 	call	0x13a6	; 0x13a6 <__fp_split3>
    1096:	58 f3       	brcs	.-42     	; 0x106e <__addsf3+0xc>
    1098:	ba 17       	cp	r27, r26
    109a:	62 07       	cpc	r22, r18
    109c:	73 07       	cpc	r23, r19
    109e:	84 07       	cpc	r24, r20
    10a0:	95 07       	cpc	r25, r21
    10a2:	20 f0       	brcs	.+8      	; 0x10ac <__addsf3x+0x1c>
    10a4:	79 f4       	brne	.+30     	; 0x10c4 <__addsf3x+0x34>
    10a6:	a6 f5       	brtc	.+104    	; 0x1110 <__addsf3x+0x80>
    10a8:	0c 94 f5 09 	jmp	0x13ea	; 0x13ea <__fp_zero>
    10ac:	0e f4       	brtc	.+2      	; 0x10b0 <__addsf3x+0x20>
    10ae:	e0 95       	com	r30
    10b0:	0b 2e       	mov	r0, r27
    10b2:	ba 2f       	mov	r27, r26
    10b4:	a0 2d       	mov	r26, r0
    10b6:	0b 01       	movw	r0, r22
    10b8:	b9 01       	movw	r22, r18
    10ba:	90 01       	movw	r18, r0
    10bc:	0c 01       	movw	r0, r24
    10be:	ca 01       	movw	r24, r20
    10c0:	a0 01       	movw	r20, r0
    10c2:	11 24       	eor	r1, r1
    10c4:	ff 27       	eor	r31, r31
    10c6:	59 1b       	sub	r21, r25
    10c8:	99 f0       	breq	.+38     	; 0x10f0 <__addsf3x+0x60>
    10ca:	59 3f       	cpi	r21, 0xF9	; 249
    10cc:	50 f4       	brcc	.+20     	; 0x10e2 <__addsf3x+0x52>
    10ce:	50 3e       	cpi	r21, 0xE0	; 224
    10d0:	68 f1       	brcs	.+90     	; 0x112c <__addsf3x+0x9c>
    10d2:	1a 16       	cp	r1, r26
    10d4:	f0 40       	sbci	r31, 0x00	; 0
    10d6:	a2 2f       	mov	r26, r18
    10d8:	23 2f       	mov	r18, r19
    10da:	34 2f       	mov	r19, r20
    10dc:	44 27       	eor	r20, r20
    10de:	58 5f       	subi	r21, 0xF8	; 248
    10e0:	f3 cf       	rjmp	.-26     	; 0x10c8 <__addsf3x+0x38>
    10e2:	46 95       	lsr	r20
    10e4:	37 95       	ror	r19
    10e6:	27 95       	ror	r18
    10e8:	a7 95       	ror	r26
    10ea:	f0 40       	sbci	r31, 0x00	; 0
    10ec:	53 95       	inc	r21
    10ee:	c9 f7       	brne	.-14     	; 0x10e2 <__addsf3x+0x52>
    10f0:	7e f4       	brtc	.+30     	; 0x1110 <__addsf3x+0x80>
    10f2:	1f 16       	cp	r1, r31
    10f4:	ba 0b       	sbc	r27, r26
    10f6:	62 0b       	sbc	r22, r18
    10f8:	73 0b       	sbc	r23, r19
    10fa:	84 0b       	sbc	r24, r20
    10fc:	ba f0       	brmi	.+46     	; 0x112c <__addsf3x+0x9c>
    10fe:	91 50       	subi	r25, 0x01	; 1
    1100:	a1 f0       	breq	.+40     	; 0x112a <__addsf3x+0x9a>
    1102:	ff 0f       	add	r31, r31
    1104:	bb 1f       	adc	r27, r27
    1106:	66 1f       	adc	r22, r22
    1108:	77 1f       	adc	r23, r23
    110a:	88 1f       	adc	r24, r24
    110c:	c2 f7       	brpl	.-16     	; 0x10fe <__addsf3x+0x6e>
    110e:	0e c0       	rjmp	.+28     	; 0x112c <__addsf3x+0x9c>
    1110:	ba 0f       	add	r27, r26
    1112:	62 1f       	adc	r22, r18
    1114:	73 1f       	adc	r23, r19
    1116:	84 1f       	adc	r24, r20
    1118:	48 f4       	brcc	.+18     	; 0x112c <__addsf3x+0x9c>
    111a:	87 95       	ror	r24
    111c:	77 95       	ror	r23
    111e:	67 95       	ror	r22
    1120:	b7 95       	ror	r27
    1122:	f7 95       	ror	r31
    1124:	9e 3f       	cpi	r25, 0xFE	; 254
    1126:	08 f0       	brcs	.+2      	; 0x112a <__addsf3x+0x9a>
    1128:	b0 cf       	rjmp	.-160    	; 0x108a <__addsf3+0x28>
    112a:	93 95       	inc	r25
    112c:	88 0f       	add	r24, r24
    112e:	08 f0       	brcs	.+2      	; 0x1132 <__addsf3x+0xa2>
    1130:	99 27       	eor	r25, r25
    1132:	ee 0f       	add	r30, r30
    1134:	97 95       	ror	r25
    1136:	87 95       	ror	r24
    1138:	08 95       	ret

0000113a <__cmpsf2>:
    113a:	0e 94 87 09 	call	0x130e	; 0x130e <__fp_cmp>
    113e:	08 f4       	brcc	.+2      	; 0x1142 <__cmpsf2+0x8>
    1140:	81 e0       	ldi	r24, 0x01	; 1
    1142:	08 95       	ret

00001144 <__divsf3>:
    1144:	0e 94 b6 08 	call	0x116c	; 0x116c <__divsf3x>
    1148:	0c 94 c2 09 	jmp	0x1384	; 0x1384 <__fp_round>
    114c:	0e 94 bb 09 	call	0x1376	; 0x1376 <__fp_pscB>
    1150:	58 f0       	brcs	.+22     	; 0x1168 <__divsf3+0x24>
    1152:	0e 94 b4 09 	call	0x1368	; 0x1368 <__fp_pscA>
    1156:	40 f0       	brcs	.+16     	; 0x1168 <__divsf3+0x24>
    1158:	29 f4       	brne	.+10     	; 0x1164 <__divsf3+0x20>
    115a:	5f 3f       	cpi	r21, 0xFF	; 255
    115c:	29 f0       	breq	.+10     	; 0x1168 <__divsf3+0x24>
    115e:	0c 94 ab 09 	jmp	0x1356	; 0x1356 <__fp_inf>
    1162:	51 11       	cpse	r21, r1
    1164:	0c 94 f6 09 	jmp	0x13ec	; 0x13ec <__fp_szero>
    1168:	0c 94 b1 09 	jmp	0x1362	; 0x1362 <__fp_nan>

0000116c <__divsf3x>:
    116c:	0e 94 d3 09 	call	0x13a6	; 0x13a6 <__fp_split3>
    1170:	68 f3       	brcs	.-38     	; 0x114c <__divsf3+0x8>

00001172 <__divsf3_pse>:
    1172:	99 23       	and	r25, r25
    1174:	b1 f3       	breq	.-20     	; 0x1162 <__divsf3+0x1e>
    1176:	55 23       	and	r21, r21
    1178:	91 f3       	breq	.-28     	; 0x115e <__divsf3+0x1a>
    117a:	95 1b       	sub	r25, r21
    117c:	55 0b       	sbc	r21, r21
    117e:	bb 27       	eor	r27, r27
    1180:	aa 27       	eor	r26, r26
    1182:	62 17       	cp	r22, r18
    1184:	73 07       	cpc	r23, r19
    1186:	84 07       	cpc	r24, r20
    1188:	38 f0       	brcs	.+14     	; 0x1198 <__divsf3_pse+0x26>
    118a:	9f 5f       	subi	r25, 0xFF	; 255
    118c:	5f 4f       	sbci	r21, 0xFF	; 255
    118e:	22 0f       	add	r18, r18
    1190:	33 1f       	adc	r19, r19
    1192:	44 1f       	adc	r20, r20
    1194:	aa 1f       	adc	r26, r26
    1196:	a9 f3       	breq	.-22     	; 0x1182 <__divsf3_pse+0x10>
    1198:	35 d0       	rcall	.+106    	; 0x1204 <__divsf3_pse+0x92>
    119a:	0e 2e       	mov	r0, r30
    119c:	3a f0       	brmi	.+14     	; 0x11ac <__divsf3_pse+0x3a>
    119e:	e0 e8       	ldi	r30, 0x80	; 128
    11a0:	32 d0       	rcall	.+100    	; 0x1206 <__divsf3_pse+0x94>
    11a2:	91 50       	subi	r25, 0x01	; 1
    11a4:	50 40       	sbci	r21, 0x00	; 0
    11a6:	e6 95       	lsr	r30
    11a8:	00 1c       	adc	r0, r0
    11aa:	ca f7       	brpl	.-14     	; 0x119e <__divsf3_pse+0x2c>
    11ac:	2b d0       	rcall	.+86     	; 0x1204 <__divsf3_pse+0x92>
    11ae:	fe 2f       	mov	r31, r30
    11b0:	29 d0       	rcall	.+82     	; 0x1204 <__divsf3_pse+0x92>
    11b2:	66 0f       	add	r22, r22
    11b4:	77 1f       	adc	r23, r23
    11b6:	88 1f       	adc	r24, r24
    11b8:	bb 1f       	adc	r27, r27
    11ba:	26 17       	cp	r18, r22
    11bc:	37 07       	cpc	r19, r23
    11be:	48 07       	cpc	r20, r24
    11c0:	ab 07       	cpc	r26, r27
    11c2:	b0 e8       	ldi	r27, 0x80	; 128
    11c4:	09 f0       	breq	.+2      	; 0x11c8 <__divsf3_pse+0x56>
    11c6:	bb 0b       	sbc	r27, r27
    11c8:	80 2d       	mov	r24, r0
    11ca:	bf 01       	movw	r22, r30
    11cc:	ff 27       	eor	r31, r31
    11ce:	93 58       	subi	r25, 0x83	; 131
    11d0:	5f 4f       	sbci	r21, 0xFF	; 255
    11d2:	3a f0       	brmi	.+14     	; 0x11e2 <__divsf3_pse+0x70>
    11d4:	9e 3f       	cpi	r25, 0xFE	; 254
    11d6:	51 05       	cpc	r21, r1
    11d8:	78 f0       	brcs	.+30     	; 0x11f8 <__divsf3_pse+0x86>
    11da:	0c 94 ab 09 	jmp	0x1356	; 0x1356 <__fp_inf>
    11de:	0c 94 f6 09 	jmp	0x13ec	; 0x13ec <__fp_szero>
    11e2:	5f 3f       	cpi	r21, 0xFF	; 255
    11e4:	e4 f3       	brlt	.-8      	; 0x11de <__divsf3_pse+0x6c>
    11e6:	98 3e       	cpi	r25, 0xE8	; 232
    11e8:	d4 f3       	brlt	.-12     	; 0x11de <__divsf3_pse+0x6c>
    11ea:	86 95       	lsr	r24
    11ec:	77 95       	ror	r23
    11ee:	67 95       	ror	r22
    11f0:	b7 95       	ror	r27
    11f2:	f7 95       	ror	r31
    11f4:	9f 5f       	subi	r25, 0xFF	; 255
    11f6:	c9 f7       	brne	.-14     	; 0x11ea <__divsf3_pse+0x78>
    11f8:	88 0f       	add	r24, r24
    11fa:	91 1d       	adc	r25, r1
    11fc:	96 95       	lsr	r25
    11fe:	87 95       	ror	r24
    1200:	97 f9       	bld	r25, 7
    1202:	08 95       	ret
    1204:	e1 e0       	ldi	r30, 0x01	; 1
    1206:	66 0f       	add	r22, r22
    1208:	77 1f       	adc	r23, r23
    120a:	88 1f       	adc	r24, r24
    120c:	bb 1f       	adc	r27, r27
    120e:	62 17       	cp	r22, r18
    1210:	73 07       	cpc	r23, r19
    1212:	84 07       	cpc	r24, r20
    1214:	ba 07       	cpc	r27, r26
    1216:	20 f0       	brcs	.+8      	; 0x1220 <__divsf3_pse+0xae>
    1218:	62 1b       	sub	r22, r18
    121a:	73 0b       	sbc	r23, r19
    121c:	84 0b       	sbc	r24, r20
    121e:	ba 0b       	sbc	r27, r26
    1220:	ee 1f       	adc	r30, r30
    1222:	88 f7       	brcc	.-30     	; 0x1206 <__divsf3_pse+0x94>
    1224:	e0 95       	com	r30
    1226:	08 95       	ret

00001228 <__fixsfsi>:
    1228:	0e 94 1b 09 	call	0x1236	; 0x1236 <__fixunssfsi>
    122c:	68 94       	set
    122e:	b1 11       	cpse	r27, r1
    1230:	0c 94 f6 09 	jmp	0x13ec	; 0x13ec <__fp_szero>
    1234:	08 95       	ret

00001236 <__fixunssfsi>:
    1236:	0e 94 db 09 	call	0x13b6	; 0x13b6 <__fp_splitA>
    123a:	88 f0       	brcs	.+34     	; 0x125e <__fixunssfsi+0x28>
    123c:	9f 57       	subi	r25, 0x7F	; 127
    123e:	98 f0       	brcs	.+38     	; 0x1266 <__fixunssfsi+0x30>
    1240:	b9 2f       	mov	r27, r25
    1242:	99 27       	eor	r25, r25
    1244:	b7 51       	subi	r27, 0x17	; 23
    1246:	b0 f0       	brcs	.+44     	; 0x1274 <__fixunssfsi+0x3e>
    1248:	e1 f0       	breq	.+56     	; 0x1282 <__fixunssfsi+0x4c>
    124a:	66 0f       	add	r22, r22
    124c:	77 1f       	adc	r23, r23
    124e:	88 1f       	adc	r24, r24
    1250:	99 1f       	adc	r25, r25
    1252:	1a f0       	brmi	.+6      	; 0x125a <__fixunssfsi+0x24>
    1254:	ba 95       	dec	r27
    1256:	c9 f7       	brne	.-14     	; 0x124a <__fixunssfsi+0x14>
    1258:	14 c0       	rjmp	.+40     	; 0x1282 <__fixunssfsi+0x4c>
    125a:	b1 30       	cpi	r27, 0x01	; 1
    125c:	91 f0       	breq	.+36     	; 0x1282 <__fixunssfsi+0x4c>
    125e:	0e 94 f5 09 	call	0x13ea	; 0x13ea <__fp_zero>
    1262:	b1 e0       	ldi	r27, 0x01	; 1
    1264:	08 95       	ret
    1266:	0c 94 f5 09 	jmp	0x13ea	; 0x13ea <__fp_zero>
    126a:	67 2f       	mov	r22, r23
    126c:	78 2f       	mov	r23, r24
    126e:	88 27       	eor	r24, r24
    1270:	b8 5f       	subi	r27, 0xF8	; 248
    1272:	39 f0       	breq	.+14     	; 0x1282 <__fixunssfsi+0x4c>
    1274:	b9 3f       	cpi	r27, 0xF9	; 249
    1276:	cc f3       	brlt	.-14     	; 0x126a <__fixunssfsi+0x34>
    1278:	86 95       	lsr	r24
    127a:	77 95       	ror	r23
    127c:	67 95       	ror	r22
    127e:	b3 95       	inc	r27
    1280:	d9 f7       	brne	.-10     	; 0x1278 <__fixunssfsi+0x42>
    1282:	3e f4       	brtc	.+14     	; 0x1292 <__fixunssfsi+0x5c>
    1284:	90 95       	com	r25
    1286:	80 95       	com	r24
    1288:	70 95       	com	r23
    128a:	61 95       	neg	r22
    128c:	7f 4f       	sbci	r23, 0xFF	; 255
    128e:	8f 4f       	sbci	r24, 0xFF	; 255
    1290:	9f 4f       	sbci	r25, 0xFF	; 255
    1292:	08 95       	ret

00001294 <__floatunsisf>:
    1294:	e8 94       	clt
    1296:	09 c0       	rjmp	.+18     	; 0x12aa <__floatsisf+0x12>

00001298 <__floatsisf>:
    1298:	97 fb       	bst	r25, 7
    129a:	3e f4       	brtc	.+14     	; 0x12aa <__floatsisf+0x12>
    129c:	90 95       	com	r25
    129e:	80 95       	com	r24
    12a0:	70 95       	com	r23
    12a2:	61 95       	neg	r22
    12a4:	7f 4f       	sbci	r23, 0xFF	; 255
    12a6:	8f 4f       	sbci	r24, 0xFF	; 255
    12a8:	9f 4f       	sbci	r25, 0xFF	; 255
    12aa:	99 23       	and	r25, r25
    12ac:	a9 f0       	breq	.+42     	; 0x12d8 <__floatsisf+0x40>
    12ae:	f9 2f       	mov	r31, r25
    12b0:	96 e9       	ldi	r25, 0x96	; 150
    12b2:	bb 27       	eor	r27, r27
    12b4:	93 95       	inc	r25
    12b6:	f6 95       	lsr	r31
    12b8:	87 95       	ror	r24
    12ba:	77 95       	ror	r23
    12bc:	67 95       	ror	r22
    12be:	b7 95       	ror	r27
    12c0:	f1 11       	cpse	r31, r1
    12c2:	f8 cf       	rjmp	.-16     	; 0x12b4 <__floatsisf+0x1c>
    12c4:	fa f4       	brpl	.+62     	; 0x1304 <__floatsisf+0x6c>
    12c6:	bb 0f       	add	r27, r27
    12c8:	11 f4       	brne	.+4      	; 0x12ce <__floatsisf+0x36>
    12ca:	60 ff       	sbrs	r22, 0
    12cc:	1b c0       	rjmp	.+54     	; 0x1304 <__floatsisf+0x6c>
    12ce:	6f 5f       	subi	r22, 0xFF	; 255
    12d0:	7f 4f       	sbci	r23, 0xFF	; 255
    12d2:	8f 4f       	sbci	r24, 0xFF	; 255
    12d4:	9f 4f       	sbci	r25, 0xFF	; 255
    12d6:	16 c0       	rjmp	.+44     	; 0x1304 <__floatsisf+0x6c>
    12d8:	88 23       	and	r24, r24
    12da:	11 f0       	breq	.+4      	; 0x12e0 <__floatsisf+0x48>
    12dc:	96 e9       	ldi	r25, 0x96	; 150
    12de:	11 c0       	rjmp	.+34     	; 0x1302 <__floatsisf+0x6a>
    12e0:	77 23       	and	r23, r23
    12e2:	21 f0       	breq	.+8      	; 0x12ec <__floatsisf+0x54>
    12e4:	9e e8       	ldi	r25, 0x8E	; 142
    12e6:	87 2f       	mov	r24, r23
    12e8:	76 2f       	mov	r23, r22
    12ea:	05 c0       	rjmp	.+10     	; 0x12f6 <__floatsisf+0x5e>
    12ec:	66 23       	and	r22, r22
    12ee:	71 f0       	breq	.+28     	; 0x130c <__floatsisf+0x74>
    12f0:	96 e8       	ldi	r25, 0x86	; 134
    12f2:	86 2f       	mov	r24, r22
    12f4:	70 e0       	ldi	r23, 0x00	; 0
    12f6:	60 e0       	ldi	r22, 0x00	; 0
    12f8:	2a f0       	brmi	.+10     	; 0x1304 <__floatsisf+0x6c>
    12fa:	9a 95       	dec	r25
    12fc:	66 0f       	add	r22, r22
    12fe:	77 1f       	adc	r23, r23
    1300:	88 1f       	adc	r24, r24
    1302:	da f7       	brpl	.-10     	; 0x12fa <__floatsisf+0x62>
    1304:	88 0f       	add	r24, r24
    1306:	96 95       	lsr	r25
    1308:	87 95       	ror	r24
    130a:	97 f9       	bld	r25, 7
    130c:	08 95       	ret

0000130e <__fp_cmp>:
    130e:	99 0f       	add	r25, r25
    1310:	00 08       	sbc	r0, r0
    1312:	55 0f       	add	r21, r21
    1314:	aa 0b       	sbc	r26, r26
    1316:	e0 e8       	ldi	r30, 0x80	; 128
    1318:	fe ef       	ldi	r31, 0xFE	; 254
    131a:	16 16       	cp	r1, r22
    131c:	17 06       	cpc	r1, r23
    131e:	e8 07       	cpc	r30, r24
    1320:	f9 07       	cpc	r31, r25
    1322:	c0 f0       	brcs	.+48     	; 0x1354 <__fp_cmp+0x46>
    1324:	12 16       	cp	r1, r18
    1326:	13 06       	cpc	r1, r19
    1328:	e4 07       	cpc	r30, r20
    132a:	f5 07       	cpc	r31, r21
    132c:	98 f0       	brcs	.+38     	; 0x1354 <__fp_cmp+0x46>
    132e:	62 1b       	sub	r22, r18
    1330:	73 0b       	sbc	r23, r19
    1332:	84 0b       	sbc	r24, r20
    1334:	95 0b       	sbc	r25, r21
    1336:	39 f4       	brne	.+14     	; 0x1346 <__fp_cmp+0x38>
    1338:	0a 26       	eor	r0, r26
    133a:	61 f0       	breq	.+24     	; 0x1354 <__fp_cmp+0x46>
    133c:	23 2b       	or	r18, r19
    133e:	24 2b       	or	r18, r20
    1340:	25 2b       	or	r18, r21
    1342:	21 f4       	brne	.+8      	; 0x134c <__fp_cmp+0x3e>
    1344:	08 95       	ret
    1346:	0a 26       	eor	r0, r26
    1348:	09 f4       	brne	.+2      	; 0x134c <__fp_cmp+0x3e>
    134a:	a1 40       	sbci	r26, 0x01	; 1
    134c:	a6 95       	lsr	r26
    134e:	8f ef       	ldi	r24, 0xFF	; 255
    1350:	81 1d       	adc	r24, r1
    1352:	81 1d       	adc	r24, r1
    1354:	08 95       	ret

00001356 <__fp_inf>:
    1356:	97 f9       	bld	r25, 7
    1358:	9f 67       	ori	r25, 0x7F	; 127
    135a:	80 e8       	ldi	r24, 0x80	; 128
    135c:	70 e0       	ldi	r23, 0x00	; 0
    135e:	60 e0       	ldi	r22, 0x00	; 0
    1360:	08 95       	ret

00001362 <__fp_nan>:
    1362:	9f ef       	ldi	r25, 0xFF	; 255
    1364:	80 ec       	ldi	r24, 0xC0	; 192
    1366:	08 95       	ret

00001368 <__fp_pscA>:
    1368:	00 24       	eor	r0, r0
    136a:	0a 94       	dec	r0
    136c:	16 16       	cp	r1, r22
    136e:	17 06       	cpc	r1, r23
    1370:	18 06       	cpc	r1, r24
    1372:	09 06       	cpc	r0, r25
    1374:	08 95       	ret

00001376 <__fp_pscB>:
    1376:	00 24       	eor	r0, r0
    1378:	0a 94       	dec	r0
    137a:	12 16       	cp	r1, r18
    137c:	13 06       	cpc	r1, r19
    137e:	14 06       	cpc	r1, r20
    1380:	05 06       	cpc	r0, r21
    1382:	08 95       	ret

00001384 <__fp_round>:
    1384:	09 2e       	mov	r0, r25
    1386:	03 94       	inc	r0
    1388:	00 0c       	add	r0, r0
    138a:	11 f4       	brne	.+4      	; 0x1390 <__fp_round+0xc>
    138c:	88 23       	and	r24, r24
    138e:	52 f0       	brmi	.+20     	; 0x13a4 <__fp_round+0x20>
    1390:	bb 0f       	add	r27, r27
    1392:	40 f4       	brcc	.+16     	; 0x13a4 <__fp_round+0x20>
    1394:	bf 2b       	or	r27, r31
    1396:	11 f4       	brne	.+4      	; 0x139c <__fp_round+0x18>
    1398:	60 ff       	sbrs	r22, 0
    139a:	04 c0       	rjmp	.+8      	; 0x13a4 <__fp_round+0x20>
    139c:	6f 5f       	subi	r22, 0xFF	; 255
    139e:	7f 4f       	sbci	r23, 0xFF	; 255
    13a0:	8f 4f       	sbci	r24, 0xFF	; 255
    13a2:	9f 4f       	sbci	r25, 0xFF	; 255
    13a4:	08 95       	ret

000013a6 <__fp_split3>:
    13a6:	57 fd       	sbrc	r21, 7
    13a8:	90 58       	subi	r25, 0x80	; 128
    13aa:	44 0f       	add	r20, r20
    13ac:	55 1f       	adc	r21, r21
    13ae:	59 f0       	breq	.+22     	; 0x13c6 <__fp_splitA+0x10>
    13b0:	5f 3f       	cpi	r21, 0xFF	; 255
    13b2:	71 f0       	breq	.+28     	; 0x13d0 <__fp_splitA+0x1a>
    13b4:	47 95       	ror	r20

000013b6 <__fp_splitA>:
    13b6:	88 0f       	add	r24, r24
    13b8:	97 fb       	bst	r25, 7
    13ba:	99 1f       	adc	r25, r25
    13bc:	61 f0       	breq	.+24     	; 0x13d6 <__fp_splitA+0x20>
    13be:	9f 3f       	cpi	r25, 0xFF	; 255
    13c0:	79 f0       	breq	.+30     	; 0x13e0 <__fp_splitA+0x2a>
    13c2:	87 95       	ror	r24
    13c4:	08 95       	ret
    13c6:	12 16       	cp	r1, r18
    13c8:	13 06       	cpc	r1, r19
    13ca:	14 06       	cpc	r1, r20
    13cc:	55 1f       	adc	r21, r21
    13ce:	f2 cf       	rjmp	.-28     	; 0x13b4 <__fp_split3+0xe>
    13d0:	46 95       	lsr	r20
    13d2:	f1 df       	rcall	.-30     	; 0x13b6 <__fp_splitA>
    13d4:	08 c0       	rjmp	.+16     	; 0x13e6 <__fp_splitA+0x30>
    13d6:	16 16       	cp	r1, r22
    13d8:	17 06       	cpc	r1, r23
    13da:	18 06       	cpc	r1, r24
    13dc:	99 1f       	adc	r25, r25
    13de:	f1 cf       	rjmp	.-30     	; 0x13c2 <__fp_splitA+0xc>
    13e0:	86 95       	lsr	r24
    13e2:	71 05       	cpc	r23, r1
    13e4:	61 05       	cpc	r22, r1
    13e6:	08 94       	sec
    13e8:	08 95       	ret

000013ea <__fp_zero>:
    13ea:	e8 94       	clt

000013ec <__fp_szero>:
    13ec:	bb 27       	eor	r27, r27
    13ee:	66 27       	eor	r22, r22
    13f0:	77 27       	eor	r23, r23
    13f2:	cb 01       	movw	r24, r22
    13f4:	97 f9       	bld	r25, 7
    13f6:	08 95       	ret

000013f8 <__gesf2>:
    13f8:	0e 94 87 09 	call	0x130e	; 0x130e <__fp_cmp>
    13fc:	08 f4       	brcc	.+2      	; 0x1400 <__gesf2+0x8>
    13fe:	8f ef       	ldi	r24, 0xFF	; 255
    1400:	08 95       	ret

00001402 <__mulsf3>:
    1402:	0e 94 14 0a 	call	0x1428	; 0x1428 <__mulsf3x>
    1406:	0c 94 c2 09 	jmp	0x1384	; 0x1384 <__fp_round>
    140a:	0e 94 b4 09 	call	0x1368	; 0x1368 <__fp_pscA>
    140e:	38 f0       	brcs	.+14     	; 0x141e <__mulsf3+0x1c>
    1410:	0e 94 bb 09 	call	0x1376	; 0x1376 <__fp_pscB>
    1414:	20 f0       	brcs	.+8      	; 0x141e <__mulsf3+0x1c>
    1416:	95 23       	and	r25, r21
    1418:	11 f0       	breq	.+4      	; 0x141e <__mulsf3+0x1c>
    141a:	0c 94 ab 09 	jmp	0x1356	; 0x1356 <__fp_inf>
    141e:	0c 94 b1 09 	jmp	0x1362	; 0x1362 <__fp_nan>
    1422:	11 24       	eor	r1, r1
    1424:	0c 94 f6 09 	jmp	0x13ec	; 0x13ec <__fp_szero>

00001428 <__mulsf3x>:
    1428:	0e 94 d3 09 	call	0x13a6	; 0x13a6 <__fp_split3>
    142c:	70 f3       	brcs	.-36     	; 0x140a <__mulsf3+0x8>

0000142e <__mulsf3_pse>:
    142e:	95 9f       	mul	r25, r21
    1430:	c1 f3       	breq	.-16     	; 0x1422 <__mulsf3+0x20>
    1432:	95 0f       	add	r25, r21
    1434:	50 e0       	ldi	r21, 0x00	; 0
    1436:	55 1f       	adc	r21, r21
    1438:	62 9f       	mul	r22, r18
    143a:	f0 01       	movw	r30, r0
    143c:	72 9f       	mul	r23, r18
    143e:	bb 27       	eor	r27, r27
    1440:	f0 0d       	add	r31, r0
    1442:	b1 1d       	adc	r27, r1
    1444:	63 9f       	mul	r22, r19
    1446:	aa 27       	eor	r26, r26
    1448:	f0 0d       	add	r31, r0
    144a:	b1 1d       	adc	r27, r1
    144c:	aa 1f       	adc	r26, r26
    144e:	64 9f       	mul	r22, r20
    1450:	66 27       	eor	r22, r22
    1452:	b0 0d       	add	r27, r0
    1454:	a1 1d       	adc	r26, r1
    1456:	66 1f       	adc	r22, r22
    1458:	82 9f       	mul	r24, r18
    145a:	22 27       	eor	r18, r18
    145c:	b0 0d       	add	r27, r0
    145e:	a1 1d       	adc	r26, r1
    1460:	62 1f       	adc	r22, r18
    1462:	73 9f       	mul	r23, r19
    1464:	b0 0d       	add	r27, r0
    1466:	a1 1d       	adc	r26, r1
    1468:	62 1f       	adc	r22, r18
    146a:	83 9f       	mul	r24, r19
    146c:	a0 0d       	add	r26, r0
    146e:	61 1d       	adc	r22, r1
    1470:	22 1f       	adc	r18, r18
    1472:	74 9f       	mul	r23, r20
    1474:	33 27       	eor	r19, r19
    1476:	a0 0d       	add	r26, r0
    1478:	61 1d       	adc	r22, r1
    147a:	23 1f       	adc	r18, r19
    147c:	84 9f       	mul	r24, r20
    147e:	60 0d       	add	r22, r0
    1480:	21 1d       	adc	r18, r1
    1482:	82 2f       	mov	r24, r18
    1484:	76 2f       	mov	r23, r22
    1486:	6a 2f       	mov	r22, r26
    1488:	11 24       	eor	r1, r1
    148a:	9f 57       	subi	r25, 0x7F	; 127
    148c:	50 40       	sbci	r21, 0x00	; 0
    148e:	9a f0       	brmi	.+38     	; 0x14b6 <__mulsf3_pse+0x88>
    1490:	f1 f0       	breq	.+60     	; 0x14ce <__mulsf3_pse+0xa0>
    1492:	88 23       	and	r24, r24
    1494:	4a f0       	brmi	.+18     	; 0x14a8 <__mulsf3_pse+0x7a>
    1496:	ee 0f       	add	r30, r30
    1498:	ff 1f       	adc	r31, r31
    149a:	bb 1f       	adc	r27, r27
    149c:	66 1f       	adc	r22, r22
    149e:	77 1f       	adc	r23, r23
    14a0:	88 1f       	adc	r24, r24
    14a2:	91 50       	subi	r25, 0x01	; 1
    14a4:	50 40       	sbci	r21, 0x00	; 0
    14a6:	a9 f7       	brne	.-22     	; 0x1492 <__mulsf3_pse+0x64>
    14a8:	9e 3f       	cpi	r25, 0xFE	; 254
    14aa:	51 05       	cpc	r21, r1
    14ac:	80 f0       	brcs	.+32     	; 0x14ce <__mulsf3_pse+0xa0>
    14ae:	0c 94 ab 09 	jmp	0x1356	; 0x1356 <__fp_inf>
    14b2:	0c 94 f6 09 	jmp	0x13ec	; 0x13ec <__fp_szero>
    14b6:	5f 3f       	cpi	r21, 0xFF	; 255
    14b8:	e4 f3       	brlt	.-8      	; 0x14b2 <__mulsf3_pse+0x84>
    14ba:	98 3e       	cpi	r25, 0xE8	; 232
    14bc:	d4 f3       	brlt	.-12     	; 0x14b2 <__mulsf3_pse+0x84>
    14be:	86 95       	lsr	r24
    14c0:	77 95       	ror	r23
    14c2:	67 95       	ror	r22
    14c4:	b7 95       	ror	r27
    14c6:	f7 95       	ror	r31
    14c8:	e7 95       	ror	r30
    14ca:	9f 5f       	subi	r25, 0xFF	; 255
    14cc:	c1 f7       	brne	.-16     	; 0x14be <__mulsf3_pse+0x90>
    14ce:	fe 2b       	or	r31, r30
    14d0:	88 0f       	add	r24, r24
    14d2:	91 1d       	adc	r25, r1
    14d4:	96 95       	lsr	r25
    14d6:	87 95       	ror	r24
    14d8:	97 f9       	bld	r25, 7
    14da:	08 95       	ret

000014dc <__udivmodsi4>:
    14dc:	a1 e2       	ldi	r26, 0x21	; 33
    14de:	1a 2e       	mov	r1, r26
    14e0:	aa 1b       	sub	r26, r26
    14e2:	bb 1b       	sub	r27, r27
    14e4:	fd 01       	movw	r30, r26
    14e6:	0d c0       	rjmp	.+26     	; 0x1502 <__udivmodsi4_ep>

000014e8 <__udivmodsi4_loop>:
    14e8:	aa 1f       	adc	r26, r26
    14ea:	bb 1f       	adc	r27, r27
    14ec:	ee 1f       	adc	r30, r30
    14ee:	ff 1f       	adc	r31, r31
    14f0:	a2 17       	cp	r26, r18
    14f2:	b3 07       	cpc	r27, r19
    14f4:	e4 07       	cpc	r30, r20
    14f6:	f5 07       	cpc	r31, r21
    14f8:	20 f0       	brcs	.+8      	; 0x1502 <__udivmodsi4_ep>
    14fa:	a2 1b       	sub	r26, r18
    14fc:	b3 0b       	sbc	r27, r19
    14fe:	e4 0b       	sbc	r30, r20
    1500:	f5 0b       	sbc	r31, r21

00001502 <__udivmodsi4_ep>:
    1502:	66 1f       	adc	r22, r22
    1504:	77 1f       	adc	r23, r23
    1506:	88 1f       	adc	r24, r24
    1508:	99 1f       	adc	r25, r25
    150a:	1a 94       	dec	r1
    150c:	69 f7       	brne	.-38     	; 0x14e8 <__udivmodsi4_loop>
    150e:	60 95       	com	r22
    1510:	70 95       	com	r23
    1512:	80 95       	com	r24
    1514:	90 95       	com	r25
    1516:	9b 01       	movw	r18, r22
    1518:	ac 01       	movw	r20, r24
    151a:	bd 01       	movw	r22, r26
    151c:	cf 01       	movw	r24, r30
    151e:	08 95       	ret

00001520 <dtostrf>:
    1520:	ef 92       	push	r14
    1522:	0f 93       	push	r16
    1524:	1f 93       	push	r17
    1526:	cf 93       	push	r28
    1528:	df 93       	push	r29
    152a:	e8 01       	movw	r28, r16
    152c:	47 fd       	sbrc	r20, 7
    152e:	02 c0       	rjmp	.+4      	; 0x1534 <dtostrf+0x14>
    1530:	34 e0       	ldi	r19, 0x04	; 4
    1532:	01 c0       	rjmp	.+2      	; 0x1536 <dtostrf+0x16>
    1534:	34 e1       	ldi	r19, 0x14	; 20
    1536:	04 2e       	mov	r0, r20
    1538:	00 0c       	add	r0, r0
    153a:	55 0b       	sbc	r21, r21
    153c:	57 ff       	sbrs	r21, 7
    153e:	03 c0       	rjmp	.+6      	; 0x1546 <dtostrf+0x26>
    1540:	51 95       	neg	r21
    1542:	41 95       	neg	r20
    1544:	51 09       	sbc	r21, r1
    1546:	e3 2e       	mov	r14, r19
    1548:	02 2f       	mov	r16, r18
    154a:	24 2f       	mov	r18, r20
    154c:	ae 01       	movw	r20, r28
    154e:	0e 94 bf 0a 	call	0x157e	; 0x157e <dtoa_prf>
    1552:	ce 01       	movw	r24, r28
    1554:	df 91       	pop	r29
    1556:	cf 91       	pop	r28
    1558:	1f 91       	pop	r17
    155a:	0f 91       	pop	r16
    155c:	ef 90       	pop	r14
    155e:	08 95       	ret

00001560 <atof>:
    1560:	66 27       	eor	r22, r22
    1562:	77 27       	eor	r23, r23
    1564:	0c 94 19 0c 	jmp	0x1832	; 0x1832 <strtod>

00001568 <strcat>:
    1568:	fb 01       	movw	r30, r22
    156a:	dc 01       	movw	r26, r24
    156c:	0d 90       	ld	r0, X+
    156e:	00 20       	and	r0, r0
    1570:	e9 f7       	brne	.-6      	; 0x156c <strcat+0x4>
    1572:	11 97       	sbiw	r26, 0x01	; 1
    1574:	01 90       	ld	r0, Z+
    1576:	0d 92       	st	X+, r0
    1578:	00 20       	and	r0, r0
    157a:	e1 f7       	brne	.-8      	; 0x1574 <strcat+0xc>
    157c:	08 95       	ret

0000157e <dtoa_prf>:
    157e:	a9 e0       	ldi	r26, 0x09	; 9
    1580:	b0 e0       	ldi	r27, 0x00	; 0
    1582:	e5 ec       	ldi	r30, 0xC5	; 197
    1584:	fa e0       	ldi	r31, 0x0A	; 10
    1586:	0c 94 74 0e 	jmp	0x1ce8	; 0x1ce8 <__prologue_saves__+0xc>
    158a:	6a 01       	movw	r12, r20
    158c:	12 2f       	mov	r17, r18
    158e:	b0 2e       	mov	r11, r16
    1590:	2b e3       	ldi	r18, 0x3B	; 59
    1592:	20 17       	cp	r18, r16
    1594:	20 f0       	brcs	.+8      	; 0x159e <dtoa_prf+0x20>
    1596:	ff 24       	eor	r15, r15
    1598:	f3 94       	inc	r15
    159a:	f0 0e       	add	r15, r16
    159c:	02 c0       	rjmp	.+4      	; 0x15a2 <dtoa_prf+0x24>
    159e:	2c e3       	ldi	r18, 0x3C	; 60
    15a0:	f2 2e       	mov	r15, r18
    15a2:	0f 2d       	mov	r16, r15
    15a4:	27 e0       	ldi	r18, 0x07	; 7
    15a6:	ae 01       	movw	r20, r28
    15a8:	4f 5f       	subi	r20, 0xFF	; 255
    15aa:	5f 4f       	sbci	r21, 0xFF	; 255
    15ac:	0e 94 67 0d 	call	0x1ace	; 0x1ace <__ftoa_engine>
    15b0:	bc 01       	movw	r22, r24
    15b2:	49 81       	ldd	r20, Y+1	; 0x01
    15b4:	84 2f       	mov	r24, r20
    15b6:	89 70       	andi	r24, 0x09	; 9
    15b8:	81 30       	cpi	r24, 0x01	; 1
    15ba:	31 f0       	breq	.+12     	; 0x15c8 <dtoa_prf+0x4a>
    15bc:	e1 fc       	sbrc	r14, 1
    15be:	06 c0       	rjmp	.+12     	; 0x15cc <dtoa_prf+0x4e>
    15c0:	e0 fe       	sbrs	r14, 0
    15c2:	06 c0       	rjmp	.+12     	; 0x15d0 <dtoa_prf+0x52>
    15c4:	90 e2       	ldi	r25, 0x20	; 32
    15c6:	05 c0       	rjmp	.+10     	; 0x15d2 <dtoa_prf+0x54>
    15c8:	9d e2       	ldi	r25, 0x2D	; 45
    15ca:	03 c0       	rjmp	.+6      	; 0x15d2 <dtoa_prf+0x54>
    15cc:	9b e2       	ldi	r25, 0x2B	; 43
    15ce:	01 c0       	rjmp	.+2      	; 0x15d2 <dtoa_prf+0x54>
    15d0:	90 e0       	ldi	r25, 0x00	; 0
    15d2:	5e 2d       	mov	r21, r14
    15d4:	50 71       	andi	r21, 0x10	; 16
    15d6:	43 ff       	sbrs	r20, 3
    15d8:	3c c0       	rjmp	.+120    	; 0x1652 <dtoa_prf+0xd4>
    15da:	91 11       	cpse	r25, r1
    15dc:	02 c0       	rjmp	.+4      	; 0x15e2 <dtoa_prf+0x64>
    15de:	83 e0       	ldi	r24, 0x03	; 3
    15e0:	01 c0       	rjmp	.+2      	; 0x15e4 <dtoa_prf+0x66>
    15e2:	84 e0       	ldi	r24, 0x04	; 4
    15e4:	81 17       	cp	r24, r17
    15e6:	18 f4       	brcc	.+6      	; 0x15ee <dtoa_prf+0x70>
    15e8:	21 2f       	mov	r18, r17
    15ea:	28 1b       	sub	r18, r24
    15ec:	01 c0       	rjmp	.+2      	; 0x15f0 <dtoa_prf+0x72>
    15ee:	20 e0       	ldi	r18, 0x00	; 0
    15f0:	51 11       	cpse	r21, r1
    15f2:	0b c0       	rjmp	.+22     	; 0x160a <dtoa_prf+0x8c>
    15f4:	f6 01       	movw	r30, r12
    15f6:	82 2f       	mov	r24, r18
    15f8:	30 e2       	ldi	r19, 0x20	; 32
    15fa:	88 23       	and	r24, r24
    15fc:	19 f0       	breq	.+6      	; 0x1604 <dtoa_prf+0x86>
    15fe:	31 93       	st	Z+, r19
    1600:	81 50       	subi	r24, 0x01	; 1
    1602:	fb cf       	rjmp	.-10     	; 0x15fa <dtoa_prf+0x7c>
    1604:	c2 0e       	add	r12, r18
    1606:	d1 1c       	adc	r13, r1
    1608:	20 e0       	ldi	r18, 0x00	; 0
    160a:	99 23       	and	r25, r25
    160c:	29 f0       	breq	.+10     	; 0x1618 <dtoa_prf+0x9a>
    160e:	d6 01       	movw	r26, r12
    1610:	9c 93       	st	X, r25
    1612:	f6 01       	movw	r30, r12
    1614:	31 96       	adiw	r30, 0x01	; 1
    1616:	6f 01       	movw	r12, r30
    1618:	c6 01       	movw	r24, r12
    161a:	03 96       	adiw	r24, 0x03	; 3
    161c:	e2 fe       	sbrs	r14, 2
    161e:	0a c0       	rjmp	.+20     	; 0x1634 <dtoa_prf+0xb6>
    1620:	3e e4       	ldi	r19, 0x4E	; 78
    1622:	d6 01       	movw	r26, r12
    1624:	3c 93       	st	X, r19
    1626:	41 e4       	ldi	r20, 0x41	; 65
    1628:	11 96       	adiw	r26, 0x01	; 1
    162a:	4c 93       	st	X, r20
    162c:	11 97       	sbiw	r26, 0x01	; 1
    162e:	12 96       	adiw	r26, 0x02	; 2
    1630:	3c 93       	st	X, r19
    1632:	06 c0       	rjmp	.+12     	; 0x1640 <dtoa_prf+0xc2>
    1634:	3e e6       	ldi	r19, 0x6E	; 110
    1636:	f6 01       	movw	r30, r12
    1638:	30 83       	st	Z, r19
    163a:	41 e6       	ldi	r20, 0x61	; 97
    163c:	41 83       	std	Z+1, r20	; 0x01
    163e:	32 83       	std	Z+2, r19	; 0x02
    1640:	fc 01       	movw	r30, r24
    1642:	32 2f       	mov	r19, r18
    1644:	40 e2       	ldi	r20, 0x20	; 32
    1646:	33 23       	and	r19, r19
    1648:	09 f4       	brne	.+2      	; 0x164c <dtoa_prf+0xce>
    164a:	42 c0       	rjmp	.+132    	; 0x16d0 <dtoa_prf+0x152>
    164c:	41 93       	st	Z+, r20
    164e:	31 50       	subi	r19, 0x01	; 1
    1650:	fa cf       	rjmp	.-12     	; 0x1646 <dtoa_prf+0xc8>
    1652:	42 ff       	sbrs	r20, 2
    1654:	44 c0       	rjmp	.+136    	; 0x16de <dtoa_prf+0x160>
    1656:	91 11       	cpse	r25, r1
    1658:	02 c0       	rjmp	.+4      	; 0x165e <dtoa_prf+0xe0>
    165a:	83 e0       	ldi	r24, 0x03	; 3
    165c:	01 c0       	rjmp	.+2      	; 0x1660 <dtoa_prf+0xe2>
    165e:	84 e0       	ldi	r24, 0x04	; 4
    1660:	81 17       	cp	r24, r17
    1662:	18 f4       	brcc	.+6      	; 0x166a <dtoa_prf+0xec>
    1664:	21 2f       	mov	r18, r17
    1666:	28 1b       	sub	r18, r24
    1668:	01 c0       	rjmp	.+2      	; 0x166c <dtoa_prf+0xee>
    166a:	20 e0       	ldi	r18, 0x00	; 0
    166c:	51 11       	cpse	r21, r1
    166e:	0b c0       	rjmp	.+22     	; 0x1686 <dtoa_prf+0x108>
    1670:	f6 01       	movw	r30, r12
    1672:	82 2f       	mov	r24, r18
    1674:	30 e2       	ldi	r19, 0x20	; 32
    1676:	88 23       	and	r24, r24
    1678:	19 f0       	breq	.+6      	; 0x1680 <dtoa_prf+0x102>
    167a:	31 93       	st	Z+, r19
    167c:	81 50       	subi	r24, 0x01	; 1
    167e:	fb cf       	rjmp	.-10     	; 0x1676 <dtoa_prf+0xf8>
    1680:	c2 0e       	add	r12, r18
    1682:	d1 1c       	adc	r13, r1
    1684:	20 e0       	ldi	r18, 0x00	; 0
    1686:	99 23       	and	r25, r25
    1688:	29 f0       	breq	.+10     	; 0x1694 <dtoa_prf+0x116>
    168a:	d6 01       	movw	r26, r12
    168c:	9c 93       	st	X, r25
    168e:	f6 01       	movw	r30, r12
    1690:	31 96       	adiw	r30, 0x01	; 1
    1692:	6f 01       	movw	r12, r30
    1694:	c6 01       	movw	r24, r12
    1696:	03 96       	adiw	r24, 0x03	; 3
    1698:	e2 fe       	sbrs	r14, 2
    169a:	0b c0       	rjmp	.+22     	; 0x16b2 <dtoa_prf+0x134>
    169c:	39 e4       	ldi	r19, 0x49	; 73
    169e:	d6 01       	movw	r26, r12
    16a0:	3c 93       	st	X, r19
    16a2:	3e e4       	ldi	r19, 0x4E	; 78
    16a4:	11 96       	adiw	r26, 0x01	; 1
    16a6:	3c 93       	st	X, r19
    16a8:	11 97       	sbiw	r26, 0x01	; 1
    16aa:	36 e4       	ldi	r19, 0x46	; 70
    16ac:	12 96       	adiw	r26, 0x02	; 2
    16ae:	3c 93       	st	X, r19
    16b0:	07 c0       	rjmp	.+14     	; 0x16c0 <dtoa_prf+0x142>
    16b2:	39 e6       	ldi	r19, 0x69	; 105
    16b4:	f6 01       	movw	r30, r12
    16b6:	30 83       	st	Z, r19
    16b8:	3e e6       	ldi	r19, 0x6E	; 110
    16ba:	31 83       	std	Z+1, r19	; 0x01
    16bc:	36 e6       	ldi	r19, 0x66	; 102
    16be:	32 83       	std	Z+2, r19	; 0x02
    16c0:	fc 01       	movw	r30, r24
    16c2:	32 2f       	mov	r19, r18
    16c4:	40 e2       	ldi	r20, 0x20	; 32
    16c6:	33 23       	and	r19, r19
    16c8:	19 f0       	breq	.+6      	; 0x16d0 <dtoa_prf+0x152>
    16ca:	41 93       	st	Z+, r20
    16cc:	31 50       	subi	r19, 0x01	; 1
    16ce:	fb cf       	rjmp	.-10     	; 0x16c6 <dtoa_prf+0x148>
    16d0:	fc 01       	movw	r30, r24
    16d2:	e2 0f       	add	r30, r18
    16d4:	f1 1d       	adc	r31, r1
    16d6:	10 82       	st	Z, r1
    16d8:	8e ef       	ldi	r24, 0xFE	; 254
    16da:	9f ef       	ldi	r25, 0xFF	; 255
    16dc:	a6 c0       	rjmp	.+332    	; 0x182a <dtoa_prf+0x2ac>
    16de:	21 e0       	ldi	r18, 0x01	; 1
    16e0:	30 e0       	ldi	r19, 0x00	; 0
    16e2:	91 11       	cpse	r25, r1
    16e4:	02 c0       	rjmp	.+4      	; 0x16ea <dtoa_prf+0x16c>
    16e6:	20 e0       	ldi	r18, 0x00	; 0
    16e8:	30 e0       	ldi	r19, 0x00	; 0
    16ea:	16 16       	cp	r1, r22
    16ec:	17 06       	cpc	r1, r23
    16ee:	1c f4       	brge	.+6      	; 0x16f6 <dtoa_prf+0x178>
    16f0:	fb 01       	movw	r30, r22
    16f2:	31 96       	adiw	r30, 0x01	; 1
    16f4:	02 c0       	rjmp	.+4      	; 0x16fa <dtoa_prf+0x17c>
    16f6:	e1 e0       	ldi	r30, 0x01	; 1
    16f8:	f0 e0       	ldi	r31, 0x00	; 0
    16fa:	2e 0f       	add	r18, r30
    16fc:	3f 1f       	adc	r19, r31
    16fe:	bb 20       	and	r11, r11
    1700:	21 f0       	breq	.+8      	; 0x170a <dtoa_prf+0x18c>
    1702:	eb 2d       	mov	r30, r11
    1704:	f0 e0       	ldi	r31, 0x00	; 0
    1706:	31 96       	adiw	r30, 0x01	; 1
    1708:	02 c0       	rjmp	.+4      	; 0x170e <dtoa_prf+0x190>
    170a:	e0 e0       	ldi	r30, 0x00	; 0
    170c:	f0 e0       	ldi	r31, 0x00	; 0
    170e:	2e 0f       	add	r18, r30
    1710:	3f 1f       	adc	r19, r31
    1712:	e1 2f       	mov	r30, r17
    1714:	f0 e0       	ldi	r31, 0x00	; 0
    1716:	2e 17       	cp	r18, r30
    1718:	3f 07       	cpc	r19, r31
    171a:	1c f4       	brge	.+6      	; 0x1722 <dtoa_prf+0x1a4>
    171c:	12 1b       	sub	r17, r18
    171e:	21 2f       	mov	r18, r17
    1720:	01 c0       	rjmp	.+2      	; 0x1724 <dtoa_prf+0x1a6>
    1722:	20 e0       	ldi	r18, 0x00	; 0
    1724:	8e 2d       	mov	r24, r14
    1726:	88 71       	andi	r24, 0x18	; 24
    1728:	59 f4       	brne	.+22     	; 0x1740 <dtoa_prf+0x1c2>
    172a:	f6 01       	movw	r30, r12
    172c:	82 2f       	mov	r24, r18
    172e:	30 e2       	ldi	r19, 0x20	; 32
    1730:	88 23       	and	r24, r24
    1732:	19 f0       	breq	.+6      	; 0x173a <dtoa_prf+0x1bc>
    1734:	31 93       	st	Z+, r19
    1736:	81 50       	subi	r24, 0x01	; 1
    1738:	fb cf       	rjmp	.-10     	; 0x1730 <dtoa_prf+0x1b2>
    173a:	c2 0e       	add	r12, r18
    173c:	d1 1c       	adc	r13, r1
    173e:	20 e0       	ldi	r18, 0x00	; 0
    1740:	99 23       	and	r25, r25
    1742:	29 f0       	breq	.+10     	; 0x174e <dtoa_prf+0x1d0>
    1744:	d6 01       	movw	r26, r12
    1746:	9c 93       	st	X, r25
    1748:	f6 01       	movw	r30, r12
    174a:	31 96       	adiw	r30, 0x01	; 1
    174c:	6f 01       	movw	r12, r30
    174e:	51 11       	cpse	r21, r1
    1750:	0b c0       	rjmp	.+22     	; 0x1768 <dtoa_prf+0x1ea>
    1752:	f6 01       	movw	r30, r12
    1754:	82 2f       	mov	r24, r18
    1756:	90 e3       	ldi	r25, 0x30	; 48
    1758:	88 23       	and	r24, r24
    175a:	19 f0       	breq	.+6      	; 0x1762 <dtoa_prf+0x1e4>
    175c:	91 93       	st	Z+, r25
    175e:	81 50       	subi	r24, 0x01	; 1
    1760:	fb cf       	rjmp	.-10     	; 0x1758 <dtoa_prf+0x1da>
    1762:	c2 0e       	add	r12, r18
    1764:	d1 1c       	adc	r13, r1
    1766:	20 e0       	ldi	r18, 0x00	; 0
    1768:	0f 2d       	mov	r16, r15
    176a:	06 0f       	add	r16, r22
    176c:	9a 81       	ldd	r25, Y+2	; 0x02
    176e:	34 2f       	mov	r19, r20
    1770:	30 71       	andi	r19, 0x10	; 16
    1772:	44 ff       	sbrs	r20, 4
    1774:	03 c0       	rjmp	.+6      	; 0x177c <dtoa_prf+0x1fe>
    1776:	91 33       	cpi	r25, 0x31	; 49
    1778:	09 f4       	brne	.+2      	; 0x177c <dtoa_prf+0x1fe>
    177a:	01 50       	subi	r16, 0x01	; 1
    177c:	10 16       	cp	r1, r16
    177e:	24 f4       	brge	.+8      	; 0x1788 <dtoa_prf+0x20a>
    1780:	09 30       	cpi	r16, 0x09	; 9
    1782:	18 f0       	brcs	.+6      	; 0x178a <dtoa_prf+0x20c>
    1784:	08 e0       	ldi	r16, 0x08	; 8
    1786:	01 c0       	rjmp	.+2      	; 0x178a <dtoa_prf+0x20c>
    1788:	01 e0       	ldi	r16, 0x01	; 1
    178a:	ab 01       	movw	r20, r22
    178c:	77 ff       	sbrs	r23, 7
    178e:	02 c0       	rjmp	.+4      	; 0x1794 <dtoa_prf+0x216>
    1790:	40 e0       	ldi	r20, 0x00	; 0
    1792:	50 e0       	ldi	r21, 0x00	; 0
    1794:	fb 01       	movw	r30, r22
    1796:	e4 1b       	sub	r30, r20
    1798:	f5 0b       	sbc	r31, r21
    179a:	a1 e0       	ldi	r26, 0x01	; 1
    179c:	b0 e0       	ldi	r27, 0x00	; 0
    179e:	ac 0f       	add	r26, r28
    17a0:	bd 1f       	adc	r27, r29
    17a2:	ea 0f       	add	r30, r26
    17a4:	fb 1f       	adc	r31, r27
    17a6:	8e e2       	ldi	r24, 0x2E	; 46
    17a8:	a8 2e       	mov	r10, r24
    17aa:	4b 01       	movw	r8, r22
    17ac:	80 1a       	sub	r8, r16
    17ae:	91 08       	sbc	r9, r1
    17b0:	0b 2d       	mov	r16, r11
    17b2:	10 e0       	ldi	r17, 0x00	; 0
    17b4:	11 95       	neg	r17
    17b6:	01 95       	neg	r16
    17b8:	11 09       	sbc	r17, r1
    17ba:	4f 3f       	cpi	r20, 0xFF	; 255
    17bc:	bf ef       	ldi	r27, 0xFF	; 255
    17be:	5b 07       	cpc	r21, r27
    17c0:	21 f4       	brne	.+8      	; 0x17ca <dtoa_prf+0x24c>
    17c2:	d6 01       	movw	r26, r12
    17c4:	ac 92       	st	X, r10
    17c6:	11 96       	adiw	r26, 0x01	; 1
    17c8:	6d 01       	movw	r12, r26
    17ca:	64 17       	cp	r22, r20
    17cc:	75 07       	cpc	r23, r21
    17ce:	2c f0       	brlt	.+10     	; 0x17da <dtoa_prf+0x25c>
    17d0:	84 16       	cp	r8, r20
    17d2:	95 06       	cpc	r9, r21
    17d4:	14 f4       	brge	.+4      	; 0x17da <dtoa_prf+0x25c>
    17d6:	81 81       	ldd	r24, Z+1	; 0x01
    17d8:	01 c0       	rjmp	.+2      	; 0x17dc <dtoa_prf+0x25e>
    17da:	80 e3       	ldi	r24, 0x30	; 48
    17dc:	41 50       	subi	r20, 0x01	; 1
    17de:	51 09       	sbc	r21, r1
    17e0:	31 96       	adiw	r30, 0x01	; 1
    17e2:	d6 01       	movw	r26, r12
    17e4:	11 96       	adiw	r26, 0x01	; 1
    17e6:	7d 01       	movw	r14, r26
    17e8:	40 17       	cp	r20, r16
    17ea:	51 07       	cpc	r21, r17
    17ec:	24 f0       	brlt	.+8      	; 0x17f6 <dtoa_prf+0x278>
    17ee:	d6 01       	movw	r26, r12
    17f0:	8c 93       	st	X, r24
    17f2:	67 01       	movw	r12, r14
    17f4:	e2 cf       	rjmp	.-60     	; 0x17ba <dtoa_prf+0x23c>
    17f6:	64 17       	cp	r22, r20
    17f8:	75 07       	cpc	r23, r21
    17fa:	39 f4       	brne	.+14     	; 0x180a <dtoa_prf+0x28c>
    17fc:	96 33       	cpi	r25, 0x36	; 54
    17fe:	20 f4       	brcc	.+8      	; 0x1808 <dtoa_prf+0x28a>
    1800:	95 33       	cpi	r25, 0x35	; 53
    1802:	19 f4       	brne	.+6      	; 0x180a <dtoa_prf+0x28c>
    1804:	31 11       	cpse	r19, r1
    1806:	01 c0       	rjmp	.+2      	; 0x180a <dtoa_prf+0x28c>
    1808:	81 e3       	ldi	r24, 0x31	; 49
    180a:	f6 01       	movw	r30, r12
    180c:	80 83       	st	Z, r24
    180e:	f7 01       	movw	r30, r14
    1810:	82 2f       	mov	r24, r18
    1812:	90 e2       	ldi	r25, 0x20	; 32
    1814:	88 23       	and	r24, r24
    1816:	19 f0       	breq	.+6      	; 0x181e <dtoa_prf+0x2a0>
    1818:	91 93       	st	Z+, r25
    181a:	81 50       	subi	r24, 0x01	; 1
    181c:	fb cf       	rjmp	.-10     	; 0x1814 <dtoa_prf+0x296>
    181e:	f7 01       	movw	r30, r14
    1820:	e2 0f       	add	r30, r18
    1822:	f1 1d       	adc	r31, r1
    1824:	10 82       	st	Z, r1
    1826:	80 e0       	ldi	r24, 0x00	; 0
    1828:	90 e0       	ldi	r25, 0x00	; 0
    182a:	29 96       	adiw	r28, 0x09	; 9
    182c:	ec e0       	ldi	r30, 0x0C	; 12
    182e:	0c 94 90 0e 	jmp	0x1d20	; 0x1d20 <__epilogue_restores__+0xc>

00001832 <strtod>:
    1832:	a0 e0       	ldi	r26, 0x00	; 0
    1834:	b0 e0       	ldi	r27, 0x00	; 0
    1836:	ef e1       	ldi	r30, 0x1F	; 31
    1838:	fc e0       	ldi	r31, 0x0C	; 12
    183a:	0c 94 74 0e 	jmp	0x1ce8	; 0x1ce8 <__prologue_saves__+0xc>
    183e:	ec 01       	movw	r28, r24
    1840:	6b 01       	movw	r12, r22
    1842:	61 15       	cp	r22, r1
    1844:	71 05       	cpc	r23, r1
    1846:	19 f0       	breq	.+6      	; 0x184e <strtod+0x1c>
    1848:	fb 01       	movw	r30, r22
    184a:	91 83       	std	Z+1, r25	; 0x01
    184c:	80 83       	st	Z, r24
    184e:	7e 01       	movw	r14, r28
    1850:	ff ef       	ldi	r31, 0xFF	; 255
    1852:	ef 1a       	sub	r14, r31
    1854:	ff 0a       	sbc	r15, r31
    1856:	08 81       	ld	r16, Y
    1858:	80 2f       	mov	r24, r16
    185a:	90 e0       	ldi	r25, 0x00	; 0
    185c:	0e 94 3f 0e 	call	0x1c7e	; 0x1c7e <isspace>
    1860:	89 2b       	or	r24, r25
    1862:	11 f0       	breq	.+4      	; 0x1868 <strtod+0x36>
    1864:	e7 01       	movw	r28, r14
    1866:	f3 cf       	rjmp	.-26     	; 0x184e <strtod+0x1c>
    1868:	0d 32       	cpi	r16, 0x2D	; 45
    186a:	39 f4       	brne	.+14     	; 0x187a <strtod+0x48>
    186c:	7e 01       	movw	r14, r28
    186e:	82 e0       	ldi	r24, 0x02	; 2
    1870:	e8 0e       	add	r14, r24
    1872:	f1 1c       	adc	r15, r1
    1874:	09 81       	ldd	r16, Y+1	; 0x01
    1876:	11 e0       	ldi	r17, 0x01	; 1
    1878:	08 c0       	rjmp	.+16     	; 0x188a <strtod+0x58>
    187a:	0b 32       	cpi	r16, 0x2B	; 43
    187c:	29 f4       	brne	.+10     	; 0x1888 <strtod+0x56>
    187e:	7e 01       	movw	r14, r28
    1880:	92 e0       	ldi	r25, 0x02	; 2
    1882:	e9 0e       	add	r14, r25
    1884:	f1 1c       	adc	r15, r1
    1886:	09 81       	ldd	r16, Y+1	; 0x01
    1888:	10 e0       	ldi	r17, 0x00	; 0
    188a:	e7 01       	movw	r28, r14
    188c:	21 97       	sbiw	r28, 0x01	; 1
    188e:	43 e0       	ldi	r20, 0x03	; 3
    1890:	50 e0       	ldi	r21, 0x00	; 0
    1892:	6c e5       	ldi	r22, 0x5C	; 92
    1894:	70 e0       	ldi	r23, 0x00	; 0
    1896:	ce 01       	movw	r24, r28
    1898:	0e 94 48 0e 	call	0x1c90	; 0x1c90 <strncasecmp_P>
    189c:	89 2b       	or	r24, r25
    189e:	c1 f4       	brne	.+48     	; 0x18d0 <strtod+0x9e>
    18a0:	23 96       	adiw	r28, 0x03	; 3
    18a2:	45 e0       	ldi	r20, 0x05	; 5
    18a4:	50 e0       	ldi	r21, 0x00	; 0
    18a6:	67 e5       	ldi	r22, 0x57	; 87
    18a8:	70 e0       	ldi	r23, 0x00	; 0
    18aa:	ce 01       	movw	r24, r28
    18ac:	0e 94 48 0e 	call	0x1c90	; 0x1c90 <strncasecmp_P>
    18b0:	89 2b       	or	r24, r25
    18b2:	09 f4       	brne	.+2      	; 0x18b6 <strtod+0x84>
    18b4:	25 96       	adiw	r28, 0x05	; 5
    18b6:	c1 14       	cp	r12, r1
    18b8:	d1 04       	cpc	r13, r1
    18ba:	19 f0       	breq	.+6      	; 0x18c2 <strtod+0x90>
    18bc:	f6 01       	movw	r30, r12
    18be:	d1 83       	std	Z+1, r29	; 0x01
    18c0:	c0 83       	st	Z, r28
    18c2:	11 11       	cpse	r17, r1
    18c4:	f6 c0       	rjmp	.+492    	; 0x1ab2 <strtod+0x280>
    18c6:	60 e0       	ldi	r22, 0x00	; 0
    18c8:	70 e0       	ldi	r23, 0x00	; 0
    18ca:	80 e8       	ldi	r24, 0x80	; 128
    18cc:	9f e7       	ldi	r25, 0x7F	; 127
    18ce:	fa c0       	rjmp	.+500    	; 0x1ac4 <strtod+0x292>
    18d0:	43 e0       	ldi	r20, 0x03	; 3
    18d2:	50 e0       	ldi	r21, 0x00	; 0
    18d4:	64 e5       	ldi	r22, 0x54	; 84
    18d6:	70 e0       	ldi	r23, 0x00	; 0
    18d8:	ce 01       	movw	r24, r28
    18da:	0e 94 48 0e 	call	0x1c90	; 0x1c90 <strncasecmp_P>
    18de:	89 2b       	or	r24, r25
    18e0:	59 f4       	brne	.+22     	; 0x18f8 <strtod+0xc6>
    18e2:	c1 14       	cp	r12, r1
    18e4:	d1 04       	cpc	r13, r1
    18e6:	09 f4       	brne	.+2      	; 0x18ea <strtod+0xb8>
    18e8:	e9 c0       	rjmp	.+466    	; 0x1abc <strtod+0x28a>
    18ea:	f2 e0       	ldi	r31, 0x02	; 2
    18ec:	ef 0e       	add	r14, r31
    18ee:	f1 1c       	adc	r15, r1
    18f0:	f6 01       	movw	r30, r12
    18f2:	f1 82       	std	Z+1, r15	; 0x01
    18f4:	e0 82       	st	Z, r14
    18f6:	e2 c0       	rjmp	.+452    	; 0x1abc <strtod+0x28a>
    18f8:	20 e0       	ldi	r18, 0x00	; 0
    18fa:	30 e0       	ldi	r19, 0x00	; 0
    18fc:	a9 01       	movw	r20, r18
    18fe:	c0 e0       	ldi	r28, 0x00	; 0
    1900:	d0 e0       	ldi	r29, 0x00	; 0
    1902:	f7 01       	movw	r30, r14
    1904:	80 ed       	ldi	r24, 0xD0	; 208
    1906:	a8 2e       	mov	r10, r24
    1908:	a0 0e       	add	r10, r16
    190a:	89 e0       	ldi	r24, 0x09	; 9
    190c:	8a 15       	cp	r24, r10
    190e:	30 f1       	brcs	.+76     	; 0x195c <strtod+0x12a>
    1910:	91 2f       	mov	r25, r17
    1912:	92 60       	ori	r25, 0x02	; 2
    1914:	b9 2e       	mov	r11, r25
    1916:	81 2f       	mov	r24, r17
    1918:	88 70       	andi	r24, 0x08	; 8
    191a:	12 ff       	sbrs	r17, 2
    191c:	04 c0       	rjmp	.+8      	; 0x1926 <strtod+0xf4>
    191e:	81 11       	cpse	r24, r1
    1920:	24 c0       	rjmp	.+72     	; 0x196a <strtod+0x138>
    1922:	21 96       	adiw	r28, 0x01	; 1
    1924:	22 c0       	rjmp	.+68     	; 0x196a <strtod+0x138>
    1926:	81 11       	cpse	r24, r1
    1928:	21 97       	sbiw	r28, 0x01	; 1
    192a:	a5 e0       	ldi	r26, 0x05	; 5
    192c:	b0 e0       	ldi	r27, 0x00	; 0
    192e:	0e 94 63 0e 	call	0x1cc6	; 0x1cc6 <__muluhisi3>
    1932:	dc 01       	movw	r26, r24
    1934:	cb 01       	movw	r24, r22
    1936:	88 0f       	add	r24, r24
    1938:	99 1f       	adc	r25, r25
    193a:	aa 1f       	adc	r26, r26
    193c:	bb 1f       	adc	r27, r27
    193e:	9c 01       	movw	r18, r24
    1940:	ad 01       	movw	r20, r26
    1942:	2a 0d       	add	r18, r10
    1944:	31 1d       	adc	r19, r1
    1946:	41 1d       	adc	r20, r1
    1948:	51 1d       	adc	r21, r1
    194a:	28 39       	cpi	r18, 0x98	; 152
    194c:	89 e9       	ldi	r24, 0x99	; 153
    194e:	38 07       	cpc	r19, r24
    1950:	48 07       	cpc	r20, r24
    1952:	89 e1       	ldi	r24, 0x19	; 25
    1954:	58 07       	cpc	r21, r24
    1956:	48 f0       	brcs	.+18     	; 0x196a <strtod+0x138>
    1958:	16 60       	ori	r17, 0x06	; 6
    195a:	06 c0       	rjmp	.+12     	; 0x1968 <strtod+0x136>
    195c:	9e ef       	ldi	r25, 0xFE	; 254
    195e:	a9 12       	cpse	r10, r25
    1960:	0a c0       	rjmp	.+20     	; 0x1976 <strtod+0x144>
    1962:	13 fd       	sbrc	r17, 3
    1964:	40 c0       	rjmp	.+128    	; 0x19e6 <strtod+0x1b4>
    1966:	18 60       	ori	r17, 0x08	; 8
    1968:	b1 2e       	mov	r11, r17
    196a:	8f ef       	ldi	r24, 0xFF	; 255
    196c:	e8 1a       	sub	r14, r24
    196e:	f8 0a       	sbc	r15, r24
    1970:	00 81       	ld	r16, Z
    1972:	1b 2d       	mov	r17, r11
    1974:	c6 cf       	rjmp	.-116    	; 0x1902 <strtod+0xd0>
    1976:	80 2f       	mov	r24, r16
    1978:	8f 7d       	andi	r24, 0xDF	; 223
    197a:	85 34       	cpi	r24, 0x45	; 69
    197c:	a1 f5       	brne	.+104    	; 0x19e6 <strtod+0x1b4>
    197e:	80 81       	ld	r24, Z
    1980:	8d 32       	cpi	r24, 0x2D	; 45
    1982:	11 f4       	brne	.+4      	; 0x1988 <strtod+0x156>
    1984:	10 61       	ori	r17, 0x10	; 16
    1986:	06 c0       	rjmp	.+12     	; 0x1994 <strtod+0x162>
    1988:	8b 32       	cpi	r24, 0x2B	; 43
    198a:	21 f0       	breq	.+8      	; 0x1994 <strtod+0x162>
    198c:	31 96       	adiw	r30, 0x01	; 1
    198e:	61 e0       	ldi	r22, 0x01	; 1
    1990:	70 e0       	ldi	r23, 0x00	; 0
    1992:	04 c0       	rjmp	.+8      	; 0x199c <strtod+0x16a>
    1994:	81 81       	ldd	r24, Z+1	; 0x01
    1996:	32 96       	adiw	r30, 0x02	; 2
    1998:	62 e0       	ldi	r22, 0x02	; 2
    199a:	70 e0       	ldi	r23, 0x00	; 0
    199c:	80 53       	subi	r24, 0x30	; 48
    199e:	8a 30       	cpi	r24, 0x0A	; 10
    19a0:	18 f0       	brcs	.+6      	; 0x19a8 <strtod+0x176>
    19a2:	e6 1b       	sub	r30, r22
    19a4:	f7 0b       	sbc	r31, r23
    19a6:	1f c0       	rjmp	.+62     	; 0x19e6 <strtod+0x1b4>
    19a8:	60 e0       	ldi	r22, 0x00	; 0
    19aa:	70 e0       	ldi	r23, 0x00	; 0
    19ac:	60 38       	cpi	r22, 0x80	; 128
    19ae:	9c e0       	ldi	r25, 0x0C	; 12
    19b0:	79 07       	cpc	r23, r25
    19b2:	5c f4       	brge	.+22     	; 0x19ca <strtod+0x198>
    19b4:	db 01       	movw	r26, r22
    19b6:	aa 0f       	add	r26, r26
    19b8:	bb 1f       	adc	r27, r27
    19ba:	aa 0f       	add	r26, r26
    19bc:	bb 1f       	adc	r27, r27
    19be:	6a 0f       	add	r22, r26
    19c0:	7b 1f       	adc	r23, r27
    19c2:	66 0f       	add	r22, r22
    19c4:	77 1f       	adc	r23, r23
    19c6:	68 0f       	add	r22, r24
    19c8:	71 1d       	adc	r23, r1
    19ca:	31 96       	adiw	r30, 0x01	; 1
    19cc:	df 01       	movw	r26, r30
    19ce:	11 97       	sbiw	r26, 0x01	; 1
    19d0:	8c 91       	ld	r24, X
    19d2:	80 53       	subi	r24, 0x30	; 48
    19d4:	8a 30       	cpi	r24, 0x0A	; 10
    19d6:	50 f3       	brcs	.-44     	; 0x19ac <strtod+0x17a>
    19d8:	14 ff       	sbrs	r17, 4
    19da:	03 c0       	rjmp	.+6      	; 0x19e2 <strtod+0x1b0>
    19dc:	71 95       	neg	r23
    19de:	61 95       	neg	r22
    19e0:	71 09       	sbc	r23, r1
    19e2:	c6 0f       	add	r28, r22
    19e4:	d7 1f       	adc	r29, r23
    19e6:	11 ff       	sbrs	r17, 1
    19e8:	08 c0       	rjmp	.+16     	; 0x19fa <strtod+0x1c8>
    19ea:	c1 14       	cp	r12, r1
    19ec:	d1 04       	cpc	r13, r1
    19ee:	29 f0       	breq	.+10     	; 0x19fa <strtod+0x1c8>
    19f0:	cf 01       	movw	r24, r30
    19f2:	01 97       	sbiw	r24, 0x01	; 1
    19f4:	f6 01       	movw	r30, r12
    19f6:	91 83       	std	Z+1, r25	; 0x01
    19f8:	80 83       	st	Z, r24
    19fa:	ca 01       	movw	r24, r20
    19fc:	b9 01       	movw	r22, r18
    19fe:	0e 94 4a 09 	call	0x1294	; 0x1294 <__floatunsisf>
    1a02:	21 2f       	mov	r18, r17
    1a04:	23 70       	andi	r18, 0x03	; 3
    1a06:	23 30       	cpi	r18, 0x03	; 3
    1a08:	19 f0       	breq	.+6      	; 0x1a10 <strtod+0x1de>
    1a0a:	4b 01       	movw	r8, r22
    1a0c:	5c 01       	movw	r10, r24
    1a0e:	06 c0       	rjmp	.+12     	; 0x1a1c <strtod+0x1ea>
    1a10:	4b 01       	movw	r8, r22
    1a12:	5c 01       	movw	r10, r24
    1a14:	b7 fa       	bst	r11, 7
    1a16:	b0 94       	com	r11
    1a18:	b7 f8       	bld	r11, 7
    1a1a:	b0 94       	com	r11
    1a1c:	20 e0       	ldi	r18, 0x00	; 0
    1a1e:	30 e0       	ldi	r19, 0x00	; 0
    1a20:	a9 01       	movw	r20, r18
    1a22:	c5 01       	movw	r24, r10
    1a24:	b4 01       	movw	r22, r8
    1a26:	0e 94 9d 08 	call	0x113a	; 0x113a <__cmpsf2>
    1a2a:	88 23       	and	r24, r24
    1a2c:	09 f4       	brne	.+2      	; 0x1a30 <strtod+0x1fe>
    1a2e:	3e c0       	rjmp	.+124    	; 0x1aac <strtod+0x27a>
    1a30:	d7 ff       	sbrs	r29, 7
    1a32:	06 c0       	rjmp	.+12     	; 0x1a40 <strtod+0x20e>
    1a34:	d1 95       	neg	r29
    1a36:	c1 95       	neg	r28
    1a38:	d1 09       	sbc	r29, r1
    1a3a:	03 e7       	ldi	r16, 0x73	; 115
    1a3c:	10 e0       	ldi	r17, 0x00	; 0
    1a3e:	02 c0       	rjmp	.+4      	; 0x1a44 <strtod+0x212>
    1a40:	0b e8       	ldi	r16, 0x8B	; 139
    1a42:	10 e0       	ldi	r17, 0x00	; 0
    1a44:	68 01       	movw	r12, r16
    1a46:	f8 e1       	ldi	r31, 0x18	; 24
    1a48:	cf 1a       	sub	r12, r31
    1a4a:	d1 08       	sbc	r13, r1
    1a4c:	90 e2       	ldi	r25, 0x20	; 32
    1a4e:	e9 2e       	mov	r14, r25
    1a50:	f1 2c       	mov	r15, r1
    1a52:	ce 15       	cp	r28, r14
    1a54:	df 05       	cpc	r29, r15
    1a56:	74 f0       	brlt	.+28     	; 0x1a74 <strtod+0x242>
    1a58:	f8 01       	movw	r30, r16
    1a5a:	25 91       	lpm	r18, Z+
    1a5c:	35 91       	lpm	r19, Z+
    1a5e:	45 91       	lpm	r20, Z+
    1a60:	54 91       	lpm	r21, Z
    1a62:	c5 01       	movw	r24, r10
    1a64:	b4 01       	movw	r22, r8
    1a66:	0e 94 01 0a 	call	0x1402	; 0x1402 <__mulsf3>
    1a6a:	4b 01       	movw	r8, r22
    1a6c:	5c 01       	movw	r10, r24
    1a6e:	ce 19       	sub	r28, r14
    1a70:	df 09       	sbc	r29, r15
    1a72:	ef cf       	rjmp	.-34     	; 0x1a52 <strtod+0x220>
    1a74:	04 50       	subi	r16, 0x04	; 4
    1a76:	11 09       	sbc	r17, r1
    1a78:	f5 94       	asr	r15
    1a7a:	e7 94       	ror	r14
    1a7c:	0c 15       	cp	r16, r12
    1a7e:	1d 05       	cpc	r17, r13
    1a80:	41 f7       	brne	.-48     	; 0x1a52 <strtod+0x220>
    1a82:	8a 2d       	mov	r24, r10
    1a84:	88 0f       	add	r24, r24
    1a86:	8b 2d       	mov	r24, r11
    1a88:	88 1f       	adc	r24, r24
    1a8a:	8f 3f       	cpi	r24, 0xFF	; 255
    1a8c:	49 f0       	breq	.+18     	; 0x1aa0 <strtod+0x26e>
    1a8e:	20 e0       	ldi	r18, 0x00	; 0
    1a90:	30 e0       	ldi	r19, 0x00	; 0
    1a92:	a9 01       	movw	r20, r18
    1a94:	c5 01       	movw	r24, r10
    1a96:	b4 01       	movw	r22, r8
    1a98:	0e 94 9d 08 	call	0x113a	; 0x113a <__cmpsf2>
    1a9c:	81 11       	cpse	r24, r1
    1a9e:	06 c0       	rjmp	.+12     	; 0x1aac <strtod+0x27a>
    1aa0:	82 e2       	ldi	r24, 0x22	; 34
    1aa2:	90 e0       	ldi	r25, 0x00	; 0
    1aa4:	90 93 c3 02 	sts	0x02C3, r25	; 0x8002c3 <errno+0x1>
    1aa8:	80 93 c2 02 	sts	0x02C2, r24	; 0x8002c2 <errno>
    1aac:	c5 01       	movw	r24, r10
    1aae:	b4 01       	movw	r22, r8
    1ab0:	09 c0       	rjmp	.+18     	; 0x1ac4 <strtod+0x292>
    1ab2:	60 e0       	ldi	r22, 0x00	; 0
    1ab4:	70 e0       	ldi	r23, 0x00	; 0
    1ab6:	80 e8       	ldi	r24, 0x80	; 128
    1ab8:	9f ef       	ldi	r25, 0xFF	; 255
    1aba:	04 c0       	rjmp	.+8      	; 0x1ac4 <strtod+0x292>
    1abc:	60 e0       	ldi	r22, 0x00	; 0
    1abe:	70 e0       	ldi	r23, 0x00	; 0
    1ac0:	80 ec       	ldi	r24, 0xC0	; 192
    1ac2:	9f e7       	ldi	r25, 0x7F	; 127
    1ac4:	cd b7       	in	r28, 0x3d	; 61
    1ac6:	de b7       	in	r29, 0x3e	; 62
    1ac8:	ec e0       	ldi	r30, 0x0C	; 12
    1aca:	0c 94 90 0e 	jmp	0x1d20	; 0x1d20 <__epilogue_restores__+0xc>

00001ace <__ftoa_engine>:
    1ace:	28 30       	cpi	r18, 0x08	; 8
    1ad0:	08 f0       	brcs	.+2      	; 0x1ad4 <__ftoa_engine+0x6>
    1ad2:	27 e0       	ldi	r18, 0x07	; 7
    1ad4:	33 27       	eor	r19, r19
    1ad6:	da 01       	movw	r26, r20
    1ad8:	99 0f       	add	r25, r25
    1ada:	31 1d       	adc	r19, r1
    1adc:	87 fd       	sbrc	r24, 7
    1ade:	91 60       	ori	r25, 0x01	; 1
    1ae0:	00 96       	adiw	r24, 0x00	; 0
    1ae2:	61 05       	cpc	r22, r1
    1ae4:	71 05       	cpc	r23, r1
    1ae6:	39 f4       	brne	.+14     	; 0x1af6 <__ftoa_engine+0x28>
    1ae8:	32 60       	ori	r19, 0x02	; 2
    1aea:	2e 5f       	subi	r18, 0xFE	; 254
    1aec:	3d 93       	st	X+, r19
    1aee:	30 e3       	ldi	r19, 0x30	; 48
    1af0:	2a 95       	dec	r18
    1af2:	e1 f7       	brne	.-8      	; 0x1aec <__ftoa_engine+0x1e>
    1af4:	08 95       	ret
    1af6:	9f 3f       	cpi	r25, 0xFF	; 255
    1af8:	30 f0       	brcs	.+12     	; 0x1b06 <__ftoa_engine+0x38>
    1afa:	80 38       	cpi	r24, 0x80	; 128
    1afc:	71 05       	cpc	r23, r1
    1afe:	61 05       	cpc	r22, r1
    1b00:	09 f0       	breq	.+2      	; 0x1b04 <__ftoa_engine+0x36>
    1b02:	3c 5f       	subi	r19, 0xFC	; 252
    1b04:	3c 5f       	subi	r19, 0xFC	; 252
    1b06:	3d 93       	st	X+, r19
    1b08:	91 30       	cpi	r25, 0x01	; 1
    1b0a:	08 f0       	brcs	.+2      	; 0x1b0e <__ftoa_engine+0x40>
    1b0c:	80 68       	ori	r24, 0x80	; 128
    1b0e:	91 1d       	adc	r25, r1
    1b10:	df 93       	push	r29
    1b12:	cf 93       	push	r28
    1b14:	1f 93       	push	r17
    1b16:	0f 93       	push	r16
    1b18:	ff 92       	push	r15
    1b1a:	ef 92       	push	r14
    1b1c:	19 2f       	mov	r17, r25
    1b1e:	98 7f       	andi	r25, 0xF8	; 248
    1b20:	96 95       	lsr	r25
    1b22:	e9 2f       	mov	r30, r25
    1b24:	96 95       	lsr	r25
    1b26:	96 95       	lsr	r25
    1b28:	e9 0f       	add	r30, r25
    1b2a:	ff 27       	eor	r31, r31
    1b2c:	e7 51       	subi	r30, 0x17	; 23
    1b2e:	ff 4f       	sbci	r31, 0xFF	; 255
    1b30:	99 27       	eor	r25, r25
    1b32:	33 27       	eor	r19, r19
    1b34:	ee 24       	eor	r14, r14
    1b36:	ff 24       	eor	r15, r15
    1b38:	a7 01       	movw	r20, r14
    1b3a:	e7 01       	movw	r28, r14
    1b3c:	05 90       	lpm	r0, Z+
    1b3e:	08 94       	sec
    1b40:	07 94       	ror	r0
    1b42:	28 f4       	brcc	.+10     	; 0x1b4e <__ftoa_engine+0x80>
    1b44:	36 0f       	add	r19, r22
    1b46:	e7 1e       	adc	r14, r23
    1b48:	f8 1e       	adc	r15, r24
    1b4a:	49 1f       	adc	r20, r25
    1b4c:	51 1d       	adc	r21, r1
    1b4e:	66 0f       	add	r22, r22
    1b50:	77 1f       	adc	r23, r23
    1b52:	88 1f       	adc	r24, r24
    1b54:	99 1f       	adc	r25, r25
    1b56:	06 94       	lsr	r0
    1b58:	a1 f7       	brne	.-24     	; 0x1b42 <__ftoa_engine+0x74>
    1b5a:	05 90       	lpm	r0, Z+
    1b5c:	07 94       	ror	r0
    1b5e:	28 f4       	brcc	.+10     	; 0x1b6a <__ftoa_engine+0x9c>
    1b60:	e7 0e       	add	r14, r23
    1b62:	f8 1e       	adc	r15, r24
    1b64:	49 1f       	adc	r20, r25
    1b66:	56 1f       	adc	r21, r22
    1b68:	c1 1d       	adc	r28, r1
    1b6a:	77 0f       	add	r23, r23
    1b6c:	88 1f       	adc	r24, r24
    1b6e:	99 1f       	adc	r25, r25
    1b70:	66 1f       	adc	r22, r22
    1b72:	06 94       	lsr	r0
    1b74:	a1 f7       	brne	.-24     	; 0x1b5e <__ftoa_engine+0x90>
    1b76:	05 90       	lpm	r0, Z+
    1b78:	07 94       	ror	r0
    1b7a:	28 f4       	brcc	.+10     	; 0x1b86 <__ftoa_engine+0xb8>
    1b7c:	f8 0e       	add	r15, r24
    1b7e:	49 1f       	adc	r20, r25
    1b80:	56 1f       	adc	r21, r22
    1b82:	c7 1f       	adc	r28, r23
    1b84:	d1 1d       	adc	r29, r1
    1b86:	88 0f       	add	r24, r24
    1b88:	99 1f       	adc	r25, r25
    1b8a:	66 1f       	adc	r22, r22
    1b8c:	77 1f       	adc	r23, r23
    1b8e:	06 94       	lsr	r0
    1b90:	a1 f7       	brne	.-24     	; 0x1b7a <__ftoa_engine+0xac>
    1b92:	05 90       	lpm	r0, Z+
    1b94:	07 94       	ror	r0
    1b96:	20 f4       	brcc	.+8      	; 0x1ba0 <__ftoa_engine+0xd2>
    1b98:	49 0f       	add	r20, r25
    1b9a:	56 1f       	adc	r21, r22
    1b9c:	c7 1f       	adc	r28, r23
    1b9e:	d8 1f       	adc	r29, r24
    1ba0:	99 0f       	add	r25, r25
    1ba2:	66 1f       	adc	r22, r22
    1ba4:	77 1f       	adc	r23, r23
    1ba6:	88 1f       	adc	r24, r24
    1ba8:	06 94       	lsr	r0
    1baa:	a9 f7       	brne	.-22     	; 0x1b96 <__ftoa_engine+0xc8>
    1bac:	84 91       	lpm	r24, Z
    1bae:	10 95       	com	r17
    1bb0:	17 70       	andi	r17, 0x07	; 7
    1bb2:	41 f0       	breq	.+16     	; 0x1bc4 <__ftoa_engine+0xf6>
    1bb4:	d6 95       	lsr	r29
    1bb6:	c7 95       	ror	r28
    1bb8:	57 95       	ror	r21
    1bba:	47 95       	ror	r20
    1bbc:	f7 94       	ror	r15
    1bbe:	e7 94       	ror	r14
    1bc0:	1a 95       	dec	r17
    1bc2:	c1 f7       	brne	.-16     	; 0x1bb4 <__ftoa_engine+0xe6>
    1bc4:	ef e8       	ldi	r30, 0x8F	; 143
    1bc6:	f0 e0       	ldi	r31, 0x00	; 0
    1bc8:	68 94       	set
    1bca:	15 90       	lpm	r1, Z+
    1bcc:	15 91       	lpm	r17, Z+
    1bce:	35 91       	lpm	r19, Z+
    1bd0:	65 91       	lpm	r22, Z+
    1bd2:	95 91       	lpm	r25, Z+
    1bd4:	05 90       	lpm	r0, Z+
    1bd6:	7f e2       	ldi	r23, 0x2F	; 47
    1bd8:	73 95       	inc	r23
    1bda:	e1 18       	sub	r14, r1
    1bdc:	f1 0a       	sbc	r15, r17
    1bde:	43 0b       	sbc	r20, r19
    1be0:	56 0b       	sbc	r21, r22
    1be2:	c9 0b       	sbc	r28, r25
    1be4:	d0 09       	sbc	r29, r0
    1be6:	c0 f7       	brcc	.-16     	; 0x1bd8 <__ftoa_engine+0x10a>
    1be8:	e1 0c       	add	r14, r1
    1bea:	f1 1e       	adc	r15, r17
    1bec:	43 1f       	adc	r20, r19
    1bee:	56 1f       	adc	r21, r22
    1bf0:	c9 1f       	adc	r28, r25
    1bf2:	d0 1d       	adc	r29, r0
    1bf4:	7e f4       	brtc	.+30     	; 0x1c14 <__ftoa_engine+0x146>
    1bf6:	70 33       	cpi	r23, 0x30	; 48
    1bf8:	11 f4       	brne	.+4      	; 0x1bfe <__ftoa_engine+0x130>
    1bfa:	8a 95       	dec	r24
    1bfc:	e6 cf       	rjmp	.-52     	; 0x1bca <__ftoa_engine+0xfc>
    1bfe:	e8 94       	clt
    1c00:	01 50       	subi	r16, 0x01	; 1
    1c02:	30 f0       	brcs	.+12     	; 0x1c10 <__ftoa_engine+0x142>
    1c04:	08 0f       	add	r16, r24
    1c06:	0a f4       	brpl	.+2      	; 0x1c0a <__ftoa_engine+0x13c>
    1c08:	00 27       	eor	r16, r16
    1c0a:	02 17       	cp	r16, r18
    1c0c:	08 f4       	brcc	.+2      	; 0x1c10 <__ftoa_engine+0x142>
    1c0e:	20 2f       	mov	r18, r16
    1c10:	23 95       	inc	r18
    1c12:	02 2f       	mov	r16, r18
    1c14:	7a 33       	cpi	r23, 0x3A	; 58
    1c16:	28 f0       	brcs	.+10     	; 0x1c22 <__ftoa_engine+0x154>
    1c18:	79 e3       	ldi	r23, 0x39	; 57
    1c1a:	7d 93       	st	X+, r23
    1c1c:	2a 95       	dec	r18
    1c1e:	e9 f7       	brne	.-6      	; 0x1c1a <__ftoa_engine+0x14c>
    1c20:	10 c0       	rjmp	.+32     	; 0x1c42 <__ftoa_engine+0x174>
    1c22:	7d 93       	st	X+, r23
    1c24:	2a 95       	dec	r18
    1c26:	89 f6       	brne	.-94     	; 0x1bca <__ftoa_engine+0xfc>
    1c28:	06 94       	lsr	r0
    1c2a:	97 95       	ror	r25
    1c2c:	67 95       	ror	r22
    1c2e:	37 95       	ror	r19
    1c30:	17 95       	ror	r17
    1c32:	17 94       	ror	r1
    1c34:	e1 18       	sub	r14, r1
    1c36:	f1 0a       	sbc	r15, r17
    1c38:	43 0b       	sbc	r20, r19
    1c3a:	56 0b       	sbc	r21, r22
    1c3c:	c9 0b       	sbc	r28, r25
    1c3e:	d0 09       	sbc	r29, r0
    1c40:	98 f0       	brcs	.+38     	; 0x1c68 <__ftoa_engine+0x19a>
    1c42:	23 95       	inc	r18
    1c44:	7e 91       	ld	r23, -X
    1c46:	73 95       	inc	r23
    1c48:	7a 33       	cpi	r23, 0x3A	; 58
    1c4a:	08 f0       	brcs	.+2      	; 0x1c4e <__ftoa_engine+0x180>
    1c4c:	70 e3       	ldi	r23, 0x30	; 48
    1c4e:	7c 93       	st	X, r23
    1c50:	20 13       	cpse	r18, r16
    1c52:	b8 f7       	brcc	.-18     	; 0x1c42 <__ftoa_engine+0x174>
    1c54:	7e 91       	ld	r23, -X
    1c56:	70 61       	ori	r23, 0x10	; 16
    1c58:	7d 93       	st	X+, r23
    1c5a:	30 f0       	brcs	.+12     	; 0x1c68 <__ftoa_engine+0x19a>
    1c5c:	83 95       	inc	r24
    1c5e:	71 e3       	ldi	r23, 0x31	; 49
    1c60:	7d 93       	st	X+, r23
    1c62:	70 e3       	ldi	r23, 0x30	; 48
    1c64:	2a 95       	dec	r18
    1c66:	e1 f7       	brne	.-8      	; 0x1c60 <__ftoa_engine+0x192>
    1c68:	11 24       	eor	r1, r1
    1c6a:	ef 90       	pop	r14
    1c6c:	ff 90       	pop	r15
    1c6e:	0f 91       	pop	r16
    1c70:	1f 91       	pop	r17
    1c72:	cf 91       	pop	r28
    1c74:	df 91       	pop	r29
    1c76:	99 27       	eor	r25, r25
    1c78:	87 fd       	sbrc	r24, 7
    1c7a:	90 95       	com	r25
    1c7c:	08 95       	ret

00001c7e <isspace>:
    1c7e:	91 11       	cpse	r25, r1
    1c80:	0c 94 60 0e 	jmp	0x1cc0	; 0x1cc0 <__ctype_isfalse>
    1c84:	80 32       	cpi	r24, 0x20	; 32
    1c86:	19 f0       	breq	.+6      	; 0x1c8e <isspace+0x10>
    1c88:	89 50       	subi	r24, 0x09	; 9
    1c8a:	85 50       	subi	r24, 0x05	; 5
    1c8c:	c8 f7       	brcc	.-14     	; 0x1c80 <isspace+0x2>
    1c8e:	08 95       	ret

00001c90 <strncasecmp_P>:
    1c90:	fb 01       	movw	r30, r22
    1c92:	dc 01       	movw	r26, r24
    1c94:	41 50       	subi	r20, 0x01	; 1
    1c96:	50 40       	sbci	r21, 0x00	; 0
    1c98:	88 f0       	brcs	.+34     	; 0x1cbc <strncasecmp_P+0x2c>
    1c9a:	8d 91       	ld	r24, X+
    1c9c:	81 34       	cpi	r24, 0x41	; 65
    1c9e:	1c f0       	brlt	.+6      	; 0x1ca6 <strncasecmp_P+0x16>
    1ca0:	8b 35       	cpi	r24, 0x5B	; 91
    1ca2:	0c f4       	brge	.+2      	; 0x1ca6 <strncasecmp_P+0x16>
    1ca4:	80 5e       	subi	r24, 0xE0	; 224
    1ca6:	65 91       	lpm	r22, Z+
    1ca8:	61 34       	cpi	r22, 0x41	; 65
    1caa:	1c f0       	brlt	.+6      	; 0x1cb2 <strncasecmp_P+0x22>
    1cac:	6b 35       	cpi	r22, 0x5B	; 91
    1cae:	0c f4       	brge	.+2      	; 0x1cb2 <strncasecmp_P+0x22>
    1cb0:	60 5e       	subi	r22, 0xE0	; 224
    1cb2:	86 1b       	sub	r24, r22
    1cb4:	61 11       	cpse	r22, r1
    1cb6:	71 f3       	breq	.-36     	; 0x1c94 <strncasecmp_P+0x4>
    1cb8:	99 0b       	sbc	r25, r25
    1cba:	08 95       	ret
    1cbc:	88 1b       	sub	r24, r24
    1cbe:	fc cf       	rjmp	.-8      	; 0x1cb8 <strncasecmp_P+0x28>

00001cc0 <__ctype_isfalse>:
    1cc0:	99 27       	eor	r25, r25
    1cc2:	88 27       	eor	r24, r24

00001cc4 <__ctype_istrue>:
    1cc4:	08 95       	ret

00001cc6 <__muluhisi3>:
    1cc6:	0e 94 a5 0e 	call	0x1d4a	; 0x1d4a <__umulhisi3>
    1cca:	a5 9f       	mul	r26, r21
    1ccc:	90 0d       	add	r25, r0
    1cce:	b4 9f       	mul	r27, r20
    1cd0:	90 0d       	add	r25, r0
    1cd2:	a4 9f       	mul	r26, r20
    1cd4:	80 0d       	add	r24, r0
    1cd6:	91 1d       	adc	r25, r1
    1cd8:	11 24       	eor	r1, r1
    1cda:	08 95       	ret

00001cdc <__prologue_saves__>:
    1cdc:	2f 92       	push	r2
    1cde:	3f 92       	push	r3
    1ce0:	4f 92       	push	r4
    1ce2:	5f 92       	push	r5
    1ce4:	6f 92       	push	r6
    1ce6:	7f 92       	push	r7
    1ce8:	8f 92       	push	r8
    1cea:	9f 92       	push	r9
    1cec:	af 92       	push	r10
    1cee:	bf 92       	push	r11
    1cf0:	cf 92       	push	r12
    1cf2:	df 92       	push	r13
    1cf4:	ef 92       	push	r14
    1cf6:	ff 92       	push	r15
    1cf8:	0f 93       	push	r16
    1cfa:	1f 93       	push	r17
    1cfc:	cf 93       	push	r28
    1cfe:	df 93       	push	r29
    1d00:	cd b7       	in	r28, 0x3d	; 61
    1d02:	de b7       	in	r29, 0x3e	; 62
    1d04:	ca 1b       	sub	r28, r26
    1d06:	db 0b       	sbc	r29, r27
    1d08:	0f b6       	in	r0, 0x3f	; 63
    1d0a:	f8 94       	cli
    1d0c:	de bf       	out	0x3e, r29	; 62
    1d0e:	0f be       	out	0x3f, r0	; 63
    1d10:	cd bf       	out	0x3d, r28	; 61
    1d12:	09 94       	ijmp

00001d14 <__epilogue_restores__>:
    1d14:	2a 88       	ldd	r2, Y+18	; 0x12
    1d16:	39 88       	ldd	r3, Y+17	; 0x11
    1d18:	48 88       	ldd	r4, Y+16	; 0x10
    1d1a:	5f 84       	ldd	r5, Y+15	; 0x0f
    1d1c:	6e 84       	ldd	r6, Y+14	; 0x0e
    1d1e:	7d 84       	ldd	r7, Y+13	; 0x0d
    1d20:	8c 84       	ldd	r8, Y+12	; 0x0c
    1d22:	9b 84       	ldd	r9, Y+11	; 0x0b
    1d24:	aa 84       	ldd	r10, Y+10	; 0x0a
    1d26:	b9 84       	ldd	r11, Y+9	; 0x09
    1d28:	c8 84       	ldd	r12, Y+8	; 0x08
    1d2a:	df 80       	ldd	r13, Y+7	; 0x07
    1d2c:	ee 80       	ldd	r14, Y+6	; 0x06
    1d2e:	fd 80       	ldd	r15, Y+5	; 0x05
    1d30:	0c 81       	ldd	r16, Y+4	; 0x04
    1d32:	1b 81       	ldd	r17, Y+3	; 0x03
    1d34:	aa 81       	ldd	r26, Y+2	; 0x02
    1d36:	b9 81       	ldd	r27, Y+1	; 0x01
    1d38:	ce 0f       	add	r28, r30
    1d3a:	d1 1d       	adc	r29, r1
    1d3c:	0f b6       	in	r0, 0x3f	; 63
    1d3e:	f8 94       	cli
    1d40:	de bf       	out	0x3e, r29	; 62
    1d42:	0f be       	out	0x3f, r0	; 63
    1d44:	cd bf       	out	0x3d, r28	; 61
    1d46:	ed 01       	movw	r28, r26
    1d48:	08 95       	ret

00001d4a <__umulhisi3>:
    1d4a:	a2 9f       	mul	r26, r18
    1d4c:	b0 01       	movw	r22, r0
    1d4e:	b3 9f       	mul	r27, r19
    1d50:	c0 01       	movw	r24, r0
    1d52:	a3 9f       	mul	r26, r19
    1d54:	70 0d       	add	r23, r0
    1d56:	81 1d       	adc	r24, r1
    1d58:	11 24       	eor	r1, r1
    1d5a:	91 1d       	adc	r25, r1
    1d5c:	b2 9f       	mul	r27, r18
    1d5e:	70 0d       	add	r23, r0
    1d60:	81 1d       	adc	r24, r1
    1d62:	11 24       	eor	r1, r1
    1d64:	91 1d       	adc	r25, r1
    1d66:	08 95       	ret

00001d68 <_exit>:
    1d68:	f8 94       	cli

00001d6a <__stop_program>:
    1d6a:	ff cf       	rjmp	.-2      	; 0x1d6a <__stop_program>
